{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An unaffiliated python interface for dbt Cloud APIs Documentation : https://dbtc.dpguthrie.com Source Code : https://github.com/dpguthrie/dbtc V2 Docs : https://docs.getdbt.com/dbt-cloud/api-v2 V3 Docs (Unofficial) : https://documenter.getpostman.com/view/14183654/UVsSNiXC V4 Docs : https://docs.getdbt.com/dbt-cloud/api-v4 Overview \u00b6 dbtc is an unaffiliated python interface to various dbt Cloud API endpoints. This library acts as a convenient interface to two different APIs that dbt Cloud offers: Cloud API : This is a REST API that exposes endpoints that allow users to programatically create, read, update, and delete resources within their dbt Cloud Account. Metadata API : This is a GraphQL API that exposes metadata generated from a job run within dbt Cloud. Requirements \u00b6 Python 3.7+ Requests - The elegant and simple HTTP library for Python, built for human beings. sgqlc - Simple GraphQL Client Typer - Library for building CLI applications Installation \u00b6 pip install dbtc Successfully installed dbtc restart \u21bb Basic Usage \u00b6 Python \u00b6 The interface to both APIs are located in the dbtCloudClient class. The example below shows how you use the cloud property on an instance of the dbtCloudClient class to access methods that allow for programmatic control over dbt Cloud resources. from dbtc import dbtCloudClient client = dbtCloudClient () project = client . cloud . get_project ( account_id = 1 , project_id = 1 ) CLI \u00b6 All of the methods available via the dbtCloudClient class are also available through the command line via dbtc . The same code above can be written as follows using the CLI: dbtc get-project --account-id = 1 --project-id = 1 License \u00b6 This project is licensed under the terms of the MIT license.","title":"Home"},{"location":"#overview","text":"dbtc is an unaffiliated python interface to various dbt Cloud API endpoints. This library acts as a convenient interface to two different APIs that dbt Cloud offers: Cloud API : This is a REST API that exposes endpoints that allow users to programatically create, read, update, and delete resources within their dbt Cloud Account. Metadata API : This is a GraphQL API that exposes metadata generated from a job run within dbt Cloud.","title":"Overview"},{"location":"#requirements","text":"Python 3.7+ Requests - The elegant and simple HTTP library for Python, built for human beings. sgqlc - Simple GraphQL Client Typer - Library for building CLI applications","title":"Requirements"},{"location":"#installation","text":"pip install dbtc Successfully installed dbtc restart \u21bb","title":"Installation"},{"location":"#basic-usage","text":"","title":"Basic Usage"},{"location":"#python","text":"The interface to both APIs are located in the dbtCloudClient class. The example below shows how you use the cloud property on an instance of the dbtCloudClient class to access methods that allow for programmatic control over dbt Cloud resources. from dbtc import dbtCloudClient client = dbtCloudClient () project = client . cloud . get_project ( account_id = 1 , project_id = 1 )","title":"Python"},{"location":"#cli","text":"All of the methods available via the dbtCloudClient class are also available through the command line via dbtc . The same code above can be written as follows using the CLI: dbtc get-project --account-id = 1 --project-id = 1","title":"CLI"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 [0.1.1] - 2022-05-16 \u00b6 Added \u00b6 The cloud property on the dbtCloudClient class now contains v3 endpoints [0.1.0] - 2022-05-13 \u00b6 Added \u00b6 dbtCloudClient class is the main interface to the dbt Cloud APIs. The cloud property contains methods that allow for programmatic access to different resources within dbt Cloud (e.g. dbtCloudClient().cloud.list_accounts() ). The metadata property contains methods that allow for retrieval of metadata related to a dbt Cloud job run (e.g. dbtCloudClient().metadata.get_models(job_id, run_id) ). dbtc is a command line interface to the methods on the dbtCloudClient class (e.g. dbtc list-accounts )","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#011-2022-05-16","text":"","title":"[0.1.1] - 2022-05-16"},{"location":"changelog/#added","text":"The cloud property on the dbtCloudClient class now contains v3 endpoints","title":"Added"},{"location":"changelog/#010-2022-05-13","text":"","title":"[0.1.0] - 2022-05-13"},{"location":"changelog/#added_1","text":"dbtCloudClient class is the main interface to the dbt Cloud APIs. The cloud property contains methods that allow for programmatic access to different resources within dbt Cloud (e.g. dbtCloudClient().cloud.list_accounts() ). The metadata property contains methods that allow for retrieval of metadata related to a dbt Cloud job run (e.g. dbtCloudClient().metadata.get_models(job_id, run_id) ). dbtc is a command line interface to the methods on the dbtCloudClient class (e.g. dbtc list-accounts )","title":"Added"},{"location":"guide/cloud/","text":"Cloud \u00b6 The cloud property on the dbtCloudClient class contains methods that allow a user to perform CRUD operations against dbt Cloud resources. Account \u00b6 get_account \u00b6 Get an account by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_account ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-account Source code in dbtc/client/cloud/base.py @v2 def get_account ( self , account_id : int ) -> Dict : \"\"\"Get an account by its ID. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_account(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-account ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } ' ) get_account_by_name \u00b6 Get an account by its name. Parameters: Name Type Description Default account_name str Name of an account required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_account_by_name ( account_name ) CLI dbtc get-account-by-name --account-name = name Source code in dbtc/client/cloud/base.py @v2 def get_account_by_name ( self , account_name : str ) -> Dict : \"\"\"Get an account by its name. Args: account_name (str): Name of an account Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_account_by_name(account_name) ``` ??? example \"CLI\" ```bash dbtc get-account-by-name --account-name=name ``` \"\"\" accounts = self . list_accounts () account = self . _get_by_name ( accounts [ 'data' ], account_name ) if account is not None : return self . get_account ( account [ 'id' ]) raise Exception ( f '\" { account_name } \" was not found' ) get_account_licenses \u00b6 List account licenses for a specified account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_account_licenses ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-account-licenses Source code in dbtc/client/cloud/base.py @v2 def get_account_licenses ( self , account_id : int ) -> Dict : \"\"\"List account licenses for a specified account. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_account_licenses(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-account-licenses ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /licenses' ) list_accounts \u00b6 List of accounts that your API Token is authorized to access. Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_accounts () CLI dbtc list-accounts Source code in dbtc/client/cloud/base.py @v2 def list_accounts ( self ) -> Dict : \"\"\"List of accounts that your API Token is authorized to access. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_accounts() ``` ??? example \"CLI\" ```bash dbtc list-accounts ``` \"\"\" return self . _simple_request ( 'accounts/' ) Artifact \u00b6 get_run_artifact \u00b6 Fetch artifacts from a completed run. Once a run has completed, you can use this endpoint to download the manifest.json , run_results.json or catalog.json files from dbt Cloud. These artifacts contain information about the models in your dbt project, timing information around their execution, and a status message indicating the result of the model build. Note By default, this endpoint returns artifacts from the last step in the run. To list artifacts from other steps in the run, use the step query parameter described below. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required path str Paths are rooted at the target/ directory. Use manifest.json, catalog.json, or run_results.json to download dbt-generated artifacts for the run. required step str The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_run_artifact ( account_id , run_id , path ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-run-artifact --run-id = 1 --path = manifest.json Source code in dbtc/client/cloud/base.py @v2 def get_run_artifact ( self , account_id : int , run_id : int , path : str , * , step : int = None , ) -> Dict : \"\"\"Fetch artifacts from a completed run. Once a run has completed, you can use this endpoint to download the `manifest.json`, `run_results.json` or `catalog.json` files from dbt Cloud. These artifacts contain information about the models in your dbt project, timing information around their execution, and a status message indicating the result of the model build. Note: By default, this endpoint returns artifacts from the last step in the run. To list artifacts from other steps in the run, use the step query parameter described below. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve path (str): Paths are rooted at the target/ directory. Use manifest.json, catalog.json, or run_results.json to download dbt-generated artifacts for the run. step (str, optional): The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_run_artifact(account_id, run_id, path) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-run-artifact --run-id=1 --path=manifest.json ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } /artifacts/ { path } ' , params = { 'step' : step }, ) list_run_artifacts \u00b6 Fetch a list of artifact files generated for a completed run. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required step str The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_run_artifacts ( account_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-environments --run-id = 1 Source code in dbtc/client/cloud/base.py @v2 def list_run_artifacts ( self , account_id : int , run_id : int , * , step : int = None , ) -> Dict : \"\"\"Fetch a list of artifact files generated for a completed run. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve step (str, optional): The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_run_artifacts(account_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-environments --run-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } /artifacts' , params = { 'step' : step }, ) Audit Log \u00b6 list_audit_logs \u00b6 List audit logs for a specific account Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required logged_at_start str Date to begin retrieving audit logs Format is yyyy-mm-dd None logged_at_end str Date to stop retrieving audit logs. Format is yyyy-mm-dd None offset int The offset to apply when listing runs. Use with limit to paginate results. None limit int The limit to apply when listing runs. Use with offset to paginate results. None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_audit_logs ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. ```bash dbtc list-audit-logs Source code in dbtc/client/cloud/base.py @v3 def list_audit_logs ( self , account_id : int , * , logged_at_start : str = None , logged_at_end : str = None , offset : int = None , limit : int = None , ) -> Dict : \"\"\"List audit logs for a specific account Args: account_id (int): Numeric ID of the account to retrieve logged_at_start (str, optional): Date to begin retrieving audit logs Format is yyyy-mm-dd logged_at_end (str, optional): Date to stop retrieving audit logs. Format is yyyy-mm-dd offset (int, optional): The offset to apply when listing runs. Use with limit to paginate results. limit (int, optional): The limit to apply when listing runs. Use with offset to paginate results. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_audit_logs(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-audit-logs \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /audit-logs' , params = { 'logged_at_start' : logged_at_start , 'logged_at_end' : logged_at_end , 'offset' : offset , 'limit' : limit , }, ) Connection \u00b6 create_adapter \u00b6 Create an adapter Note This is a prerequisite for creating a Databricks connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the adapter to create required Examples: Example Payload payload = { 'id' : None , 'account_id' : 1 , 'created_by_id' : 1 , 'project_id' : 1 , 'state' : 1 , 'adapter_version' : 'databricks_spark_v0' , } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_adapter ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-adapter --payload = '{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 Source code in dbtc/client/cloud/base.py @v3 def create_adapter ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create an adapter Note: This is a prerequisite for creating a Databricks connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the adapter to create Examples: ??? example \"Example Payload\" ```py payload = { 'id': None, 'account_id': 1, 'created_by_id': 1, 'project_id': 1, 'state': 1, 'adapter_version': 'databricks_spark_v0', } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_adapter(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-adapter --payload='{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /adapters/' , method = 'post' , json = payload , ) create_connection \u00b6 Create a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the connection to create required Examples: Snowflake Payload payload = { 'id' : None , 'name' : 'Test' , 'type' : 'snowflake' , 'details' : { 'account' : snowflake_account , 'role' : snowflake_role , 'database' : snowflake_database , 'warehouse' : snowflake_warehouse , 'oauth_client_id' : None , 'oauth_client_secret' : None , 'client_session_keep_alive' : False , 'allow_sso' : False , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } Bigquery Payload payload = { 'id' : None , 'name' : '<test-bigquery-connection>' , 'type' : 'bigquery' , 'details' : { 'retries' : 1 , 'maximum_bytes_billed' : 0 , 'locaiton' : None , 'timeout_seconds' : 300 , 'project_id' : google_cloud_project_id , 'private_key_id' : service_account_private_key_id , 'private_key' : '-----BEGIN PRIVATE KEY----' , 'client_email' : 'service_account_email@gmail.com' , 'client_id' : '<service-account-client-id' , 'auth_uri' : 'https://accounts.google.com/o/oauth2/auth' , 'token_uri' : 'https://oauth2.googleapis.com/token' , 'auth_provider_x509_cert_url' : 'https://www.googleapiscom/robot/v1/metadata/x509/<service-account-email>' , 'application_id' : None , 'application_secret' : None , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } Redshift Payload payload = { 'id' : None , 'name' : '<connection-name>' , 'type' : 'redshift' , 'details' : { 'hostname' : '<hostname>' , 'port' : 5439 , 'dbname' : '<your-db-name>' , 'tunnel_enabled' : False , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_connection ( account_id , project_id , payload ) CLI dbtc create-connection --payload = '{\"id\": null, \"name\": \"<connection-name>\", \"type\": \"redshift\", \"details\": {\"hostname\": \"<hostname>\", \"port\": 5439, \"dbname\": \"<your-db-name>\", \"tunnel_enabled\": false}, \"state\": 1, \"account_id\": 1, \"project_id\": 1}' # noqa: E501 Source code in dbtc/client/cloud/base.py @v3 def create_connection ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the connection to create Examples: ??? example \"Snowflake Payload\" ```py payload = { 'id': None, 'name': 'Test', 'type': 'snowflake', 'details': { 'account': snowflake_account, 'role': snowflake_role, 'database': snowflake_database, 'warehouse': snowflake_warehouse, 'oauth_client_id': None, 'oauth_client_secret': None, 'client_session_keep_alive': False, 'allow_sso': False, }, 'state': 1, 'account_id': 1, 'project_id': 1, } ``` ??? example \"Bigquery Payload\" ```py payload = { 'id': None, 'name': '<test-bigquery-connection>', 'type': 'bigquery', 'details': { 'retries': 1, 'maximum_bytes_billed': 0, 'locaiton': None, 'timeout_seconds': 300, 'project_id': google_cloud_project_id, 'private_key_id': service_account_private_key_id, 'private_key': '-----BEGIN PRIVATE KEY----', 'client_email': 'service_account_email@gmail.com', 'client_id': '<service-account-client-id', 'auth_uri': 'https://accounts.google.com/o/oauth2/auth', 'token_uri': 'https://oauth2.googleapis.com/token', 'auth_provider_x509_cert_url': 'https://www.googleapiscom/robot/v1/metadata/x509/<service-account-email>', 'application_id': None, 'application_secret': None, }, 'state': 1, 'account_id': 1, 'project_id': 1, } ``` ??? example \"Redshift Payload\" ```py payload = { 'id': None, 'name': '<connection-name>', 'type': 'redshift', 'details': { 'hostname': '<hostname>', 'port': 5439, 'dbname': '<your-db-name>', 'tunnel_enabled': False, }, 'state': 1, 'account_id': 1, 'project_id': 1, } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_connection(account_id, project_id, payload) ``` ??? example \"CLI\" ```bash dbtc create-connection --payload='{\"id\": null, \"name\": \"<connection-name>\", \"type\": \"redshift\", \"details\": {\"hostname\": \"<hostname>\", \"port\": 5439, \"dbname\": \"<your-db-name>\", \"tunnel_enabled\": false}, \"state\": 1, \"account_id\": 1, \"project_id\": 1}' # noqa: E501 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /connections/' , method = 'post' , json = payload , ) delete_connection \u00b6 Delete a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required connection_id int Numeric ID of the connection to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_connection ( account_id , project_id , connection_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-connection --connection-id = 1 Source code in dbtc/client/cloud/base.py @v3 def delete_connection ( self , account_id : int , project_id : int , connection_id : int ) -> Dict : \"\"\"Delete a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project connection_id (int): Numeric ID of the connection to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_connection(account_id, project_id, connection_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-connection --connection-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /connections/ { connection_id } ' , method = 'delete' , ) list_connections \u00b6 List connections for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_connections ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-connections Source code in dbtc/client/cloud/base.py @v3 def list_connections ( self , account_id : int , project_id : int ) -> Dict : \"\"\"List connections for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_connections(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc list-connections ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /connections' ) test_connection \u00b6 Test a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the connection to test required Source code in dbtc/client/cloud/base.py @v3 def test_connection ( self , account_id : int , payload : Dict ) -> Dict : \"\"\"Test a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the connection to test \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /connections/test/' , method = 'post' , json = payload ) update_connection \u00b6 Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required connection_id int Numeric ID of the connection to update required payload dict Dictionary representing the connection to update required Source code in dbtc/client/cloud/base.py @v3 def update_connection ( self , account_id : int , project_id : int , connection_id : int , payload : Dict ) -> Dict : \"\"\"Update a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project connection_id (int): Numeric ID of the connection to update payload (dict): Dictionary representing the connection to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /connections/ { connection_id } /' , method = 'post' , json = payload , ) Credentials \u00b6 create_credentials \u00b6 Create credentials Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the credentials to create required Examples: Example Payload payload = { 'id' : None , 'account_id' : 1 , 'created_by_id' : 1 , 'project_id' : 1 , 'state' : 1 , 'adapter_version' : 'databricks_spark_v0' , } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_credentials ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 Source code in dbtc/client/cloud/base.py @v3 def create_credentials ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create credentials Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the credentials to create Examples: ??? example \"Example Payload\" ```py payload = { 'id': None, 'account_id': 1, 'created_by_id': 1, 'project_id': 1, 'state': 1, 'adapter_version': 'databricks_spark_v0', } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_credentials(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-credentials --payload='{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /credentials/' , method = 'post' , json = payload , ) list_credentials \u00b6 List credentials for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_credentials ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-credentials Source code in dbtc/client/cloud/base.py @v3 def list_credentials ( self , account_id : int , project_id : int ) -> Dict : \"\"\"List credentials for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_credentials(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc list-credentials ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /credentials' ) update_credentials \u00b6 Update credentials Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required credentials_id int Numeric ID of the credentials to update required payload dict Dictionary representing the credentials to update required Source code in dbtc/client/cloud/base.py @v3 def update_credentials ( self , account_id : int , project_id : int , credentials_id : int , payload : Dict ) -> Dict : \"\"\"Update credentials Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project credentials_id (int): Numeric ID of the credentials to update payload (dict): Dictionary representing the credentials to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /credentials/ { credentials_id } /' , # noqa: E50 method = 'post' , json = payload , ) Environment \u00b6 create_environment \u00b6 Create an environment Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the environment to create required Source code in dbtc/client/cloud/base.py @v3 def create_environment ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create an environment Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the environment to create \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /environments/' , method = 'post' , json = payload , ) delete_environment \u00b6 Delete job for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required environment_id int Numeric ID of the environment to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_environment ( account_id , project_id , environment_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-environment --environment-id = 1 Source code in dbtc/client/cloud/base.py @v3 def delete_environment ( self , account_id : int , environment_id : int ) -> Dict : \"\"\"Delete job for a specified account Args: account_id (int): Numeric ID of the account environment_id (int): Numeric ID of the environment to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_environment(account_id, project_id, environment_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-environment --environment-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /environments/ { environment_id } /' , method = 'delete' , ) list_environments \u00b6 List environments for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_environments ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-environments Source code in dbtc/client/cloud/base.py @v3 def list_environments ( self , account_id : int , project_id : int ) -> Dict : \"\"\"List environments for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_environments(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc list-environments ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /environments/' ) update_environment \u00b6 Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required environment_id int Numeric ID of the environment to update required payload dict Dictionary representing the environment to update required Source code in dbtc/client/cloud/base.py @v3 def update_environment ( self , account_id : int , project_id : int , environment_id : int , payload : Dict ) -> Dict : \"\"\"Update a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project environment_id (int): Numeric ID of the environment to update payload (dict): Dictionary representing the environment to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /environments/ { environment_id } /' , # noqa: E501 method = 'post' , json = payload , ) Environment Variables \u00b6 create_environment_variables \u00b6 Create environment variabless Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the environment variables to create required Examples: Example Payload payload = { 'env_var' : { 'name' : 'DBT_ENV_TEST' , 'ids' : [], 'new_name' : 'DBT_ENV_TEST' , 'project' : 'foo' , '{{development_environment_name}}' : 'dev_value' , '{{deployment_environment_name}}' : 'deploy_value' } } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_environment_variables ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"env_var\": {\"name\": \"DBT_ENV_TEST\", \"ids\": [], \"new_name\": \"DBT_ENV_TEST\", \"project\": \"foo\", \"{{development_environment_name}}\": \"dev_value\", \"{{deployment_environment_name}}\": \"deploy_value\"}}' Source code in dbtc/client/cloud/base.py @v3 def create_environment_variables ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create environment variabless Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the environment variables to create Examples: ??? example \"Example Payload\" ```py payload = { 'env_var': { 'name': 'DBT_ENV_TEST', 'ids': [], 'new_name': 'DBT_ENV_TEST', 'project': 'foo', '{{development_environment_name}}': 'dev_value', '{{deployment_environment_name}}': 'deploy_value' } } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_environment_variables(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-credentials --payload='{\"env_var\": {\"name\": \"DBT_ENV_TEST\", \"ids\": [], \"new_name\": \"DBT_ENV_TEST\", \"project\": \"foo\", \"{{development_environment_name}}\": \"dev_value\", \"{{deployment_environment_name}}\": \"deploy_value\"}}' ``` \"\"\" url = f 'accounts/ { account_id } /projects/ { project_id } /environment-variables/' if len ( payload . keys ()) > 1 : url += 'bulk/' return self . _simple_request ( url , method = 'post' , json = payload ) delete_environment_variables \u00b6 Delete environment variables for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload Dict Dictionary representing environment variables to delete required Examples: Example Payload payload = { 'name' : 'DBT_MY_AWESOME_VARIABLE' } Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_environment_variables ( account_id , project_id , environment_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-environment --payload = '{\"name\": \"DBT_MY_AWESOME_VARIABLE\"}' Source code in dbtc/client/cloud/base.py @v3 def delete_environment_variables ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Delete environment variables for a specified account Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (Dict): Dictionary representing environment variables to delete Examples: ??? example \"Example Payload\" ```py payload = { 'name': 'DBT_MY_AWESOME_VARIABLE' } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_environment_variables(account_id, project_id, environment_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-environment --payload='{\"name\": \"DBT_MY_AWESOME_VARIABLE\"}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /environment-variables/bulk/' , method = 'delete' , json = payload , ) Feature Flags \u00b6 list_feature_flags \u00b6 List feature flags for a specific account Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_feature_flags ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-feature-flags Source code in dbtc/client/cloud/base.py @v3 def list_feature_flags ( self , account_id : int ) -> Dict : \"\"\"List feature flags for a specific account Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_feature_flags(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-feature-flags ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /feature-flag/' ) Group \u00b6 assign_group_permissions \u00b6 Assign group permissions Parameters: Name Type Description Default account_id int Numeric ID of the account required group_id int Numeric ID of the group required payload dict Dictionary representing the group to create required Examples: Example Payload payload = [ { 'group_id' : 1 , 'account_id' : 1 , 'permission_set' : 'analyst' , 'project_id' : 1 , 'all_projects' : False }, ] Python Assuming that client is an instance of dbtCloudClient client . cloud . assign_service_token_permissions ( account_id , group_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-group-permissions --payload = '[{\"group_id\": 1, \"account_id\": 1, \"permission_set\": \"analyst\", \"project_id\": 1, \"all_projects\": false}]' Source code in dbtc/client/cloud/base.py @v3 def assign_group_permissions ( self , account_id : int , group_id : int , payload : Dict ) -> Dict : \"\"\"Assign group permissions Args: account_id (int): Numeric ID of the account group_id (int): Numeric ID of the group payload (dict): Dictionary representing the group to create Examples: ??? example \"Example Payload\" ```py payload = [ { 'group_id': 1, 'account_id': 1, 'permission_set': 'analyst', 'project_id': 1, 'all_projects': False }, ] ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.assign_service_token_permissions(account_id, group_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc assign-group-permissions --payload='[{\"group_id\": 1, \"account_id\": 1, \"permission_set\": \"analyst\", \"project_id\": 1, \"all_projects\": false}]' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /group-permissions/ { group_id } /' , method = 'post' , json = payload , ) assign_user_to_group \u00b6 Assign a user to a group Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the user to assign required Examples: Example Payload payload = { 'user_id' : 1 , 'desired_group_ids' : [ 1 ], } Python Assuming that client is an instance of dbtCloudClient client . cloud . assign_user_to_group ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. ```bash dbtc assign-user-to-group --payload='{\"user_id\": 1, \"desired_group_ids\": [1]}' Source code in dbtc/client/cloud/base.py @v3 def assign_user_to_group ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Assign a user to a group Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the user to assign Examples: ??? example \"Example Payload\" ```py payload = { 'user_id': 1, 'desired_group_ids': [1], } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.assign_user_to_group(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc assign-user-to-group --payload='{\"user_id\": 1, \"desired_group_ids\": [1]}' \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /assign-groups/' , method = 'post' , json = payload , ) create_user_group \u00b6 Create a user group Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the group to create required Note The group_name is the name of the dbt Cloud group. The list of sso_mapping_groups are string values that dbt Cloud will attempt to match with incoming information from your identity provider at login time, in order to assign the group with group_name to the user. Examples: Example Payload payload = { 'account_id' : 1 , 'name' : '{{group_name}}' , 'assign_by_default' : False , 'sso_mapping_groups' :[ 'mapping_group_1' ] } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_user_group ( account_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-user-group --payload = '{\"account_id\": 1, \"name\": \"{{group_name}}\", \"assign_by_default\": false, \"sso_mapping_groups\": [\"mapping_group_1\"]}' Source code in dbtc/client/cloud/base.py @v3 def create_user_group ( self , account_id : int , payload : Dict ) -> Dict : \"\"\"Create a user group Args: account_id (int): Numeric ID of the account payload (dict): Dictionary representing the group to create Note: The group_name is the name of the dbt Cloud group. The list of sso_mapping_groups are string values that dbt Cloud will attempt to match with incoming information from your identity provider at login time, in order to assign the group with group_name to the user. Examples: ??? example \"Example Payload\" ```py payload = { 'account_id':1, 'name':'{{group_name}}', 'assign_by_default':False, 'sso_mapping_groups':['mapping_group_1'] } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_user_group(account_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc create-user-group --payload='{\"account_id\": 1, \"name\": \"{{group_name}}\", \"assign_by_default\": false, \"sso_mapping_groups\": [\"mapping_group_1\"]}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /groups/' , method = 'post' , json = payload ) delete_user_group \u00b6 Delete group for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required group_id int Numeric ID of the group to delete required Examples required Source code in dbtc/client/cloud/base.py @v3 def delete_user_group ( self , account_id : int , group_id : int ) -> Dict : \"\"\"Delete group for a specified account Args: account_id (int): Numeric ID of the account group_id (int): Numeric ID of the group to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_group(account_id, group_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc delete-environment --group-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /groups/ { group_id } /' , method = 'post' , ) list_groups \u00b6 List groups for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_groups ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-groups Source code in dbtc/client/cloud/base.py @v3 def list_groups ( self , account_id : int ) -> Dict : \"\"\"List groups for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_groups(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-groups ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /groups/' ) Job \u00b6 create_job \u00b6 Create a job Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the job to create required Examples: Example Payload payload = { 'account_id' : 1 , 'project_id' : 1 , 'id' : None , 'environment_id' : 1 , 'name' : '<your-job-name>' , 'dbt_version' : '1.0.1' , 'triggers' : { 'github_webhook' : False , 'schedule' : False , 'custom_branch_only' : False }, 'execute_steps' : [ 'dbt build' ], 'settings' : { 'threads' : 1 , 'target_name' : 'default' }, 'state' : 1 , 'generate_docs' : False , 'schedule' : { 'date' : { 'type' : 'every_day' }, 'time' : { 'type' : 'every_hour' , 'interval' : 1 } } } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_job ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"account_id\": 1, \"project_id\": 1, \"id\": null, \"environment_id\": 1, \"name\": \"<your-job-name>\", \"dbt_version\": \"1.0.1\", \"triggers\": {\"github_webhook\": false, \"schedule\": false, \"custom_branch_only\": false}, \"execute_steps\": [\"dbt build\"], \"settings\": {\"threads\": 1, \"target_name\": \"default\"}, \"state\": 1, \"generate_docs\": false, \"schedule\": {\"date\": {\"type\": \"every_day\"}, \"time\": {\"type\": \"every_hour\", \"interval\": 1}}}' Source code in dbtc/client/cloud/base.py @v3 def create_job ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create a job Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the job to create Examples: ??? example \"Example Payload\" ```py payload = { 'account_id': 1, 'project_id': 1, 'id': None, 'environment_id': 1, 'name': '<your-job-name>', 'dbt_version': '1.0.1', 'triggers': { 'github_webhook': False, 'schedule': False, 'custom_branch_only': False }, 'execute_steps': [ 'dbt build' ], 'settings': { 'threads': 1, 'target_name': 'default' }, 'state': 1, 'generate_docs': False, 'schedule': { 'date': { 'type': 'every_day' }, 'time': { 'type': 'every_hour', 'interval': 1 } } } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_job(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-credentials --payload='{\"account_id\": 1, \"project_id\": 1, \"id\": null, \"environment_id\": 1, \"name\": \"<your-job-name>\", \"dbt_version\": \"1.0.1\", \"triggers\": {\"github_webhook\": false, \"schedule\": false, \"custom_branch_only\": false}, \"execute_steps\": [\"dbt build\"], \"settings\": {\"threads\": 1, \"target_name\": \"default\"}, \"state\": 1, \"generate_docs\": false, \"schedule\": {\"date\": {\"type\": \"every_day\"}, \"time\": {\"type\": \"every_hour\", \"interval\": 1}}}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /jobs/' , method = 'post' , json = payload , ) delete_job \u00b6 Delete job for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required job_id int Numeric ID of the project to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_job ( account_id , job_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --job-id = 1 Source code in dbtc/client/cloud/base.py @v3 def delete_job ( self , account_id : int , job_id : int ) -> Dict : \"\"\"Delete job for a specified account Args: account_id (int): Numeric ID of the account job_id (int): Numeric ID of the project to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_job(account_id, job_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc delete-environment --job-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/ { job_id } /' , method = 'delete' , ) get_job \u00b6 Get a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to retrieve required order_by str Field to order the result by. Use - to indicate reverse order. None Examples required Source code in dbtc/client/cloud/base.py @v2 def get_job ( self , account_id : int , job_id : int , * , order_by : str = None ) -> Dict : \"\"\"Get a job by its ID. Args: account_id (int): Numeric ID of the account to retrieve job_id (int): Numeric ID of the job to retrieve order_by (str, optional): Field to order the result by. Use - to indicate reverse order. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_job(account_id, job_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-job --job-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/ { job_id } /' , params = { 'order_by' : order_by }, ) list_jobs \u00b6 List jobs in an account or specific project. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required order_by str Field to order the result by. Use - to indicate reverse order. None project_id int Numeric ID of the project containing jobs None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_jobs ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-jobs Source code in dbtc/client/cloud/base.py @v2 def list_jobs ( self , account_id : int , * , order_by : str = None , project_id : int = None ) -> Dict : \"\"\"List jobs in an account or specific project. Args: account_id (int): Numeric ID of the account to retrieve order_by (str, optional): Field to order the result by. Use - to indicate reverse order. project_id (int, optional): Numeric ID of the project containing jobs Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_jobs(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-jobs ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/' , params = { 'order_by' : order_by , 'project_id' : project_id }, ) trigger_job \u00b6 Trigger a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to trigger required payload dict Payload required for post request required Source code in dbtc/client/cloud/base.py @v2 def trigger_job ( self , account_id : int , job_id : int , payload : Dict ): \"\"\"Trigger a job by its ID. Args: account_id (int): Numeric ID of the account to retrieve job_id (int): Numeric ID of the job to trigger payload (dict): Payload required for post request \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/ { job_id } /run/' , method = 'post' , json = payload , ) trigger_job_and_poll \u00b6 Trigger a job by its ID and poll until completion: one of SUCCESS, ERROR, or CANCELLED. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to trigger required payload dict Payload required for post request required poll_interval int Number of seconds to wait in between polling 10 Source code in dbtc/client/cloud/base.py @v2 def trigger_job_and_poll ( self , account_id : int , job_id : int , payload : Dict , poll_interval : int = 10 ) -> int : \"\"\"Trigger a job by its ID and poll until completion: one of SUCCESS, ERROR, or CANCELLED. Args: account_id (int): Numeric ID of the account to retrieve job_id (int): Numeric ID of the job to trigger payload (dict): Payload required for post request poll_interval (int, optional): Number of seconds to wait in between polling \"\"\" def _run_status_formatted ( run_id : int , status : str , time : float ) -> str : \"\"\"Format a string indicating status of job. Args: run_id (int): Numeric ID of the run to retrieve status (str): Status of job time (float): Elapsed time since job triggered \"\"\" return ( f 'Run { run_id } - { status . capitalize () } , Elapsed time: { round ( time , 0 ) } s' ) run_id = self . trigger_job ( account_id , job_id , payload )[ 'data' ][ 'id' ] print ( 'Job Triggered!' ) start = time . time () while True : time . sleep ( poll_interval ) run = self . get_run ( account_id , run_id ) status = run [ 'data' ][ 'status' ] status_name = JobRunStatus ( status ) . name if status == JobRunStatus . SUCCESS : print ( _run_status_formatted ( run_id , status_name , time . time () - start )) return run_id if status in [ JobRunStatus . CANCELLED , JobRunStatus . ERROR ]: raise Exception ( run [ 'data' ][ 'status_message' ]) print ( _run_status_formatted ( run_id , status_name , time . time () - start )) update_job \u00b6 Update a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to retrieve required payload dict Payload required for post request required Source code in dbtc/client/cloud/base.py @v2 def update_job ( self , account_id : int , job_id : int , payload : Dict ) -> Dict : \"\"\"Update a job by its ID. Args: account_id (int): Numeric ID of the account to retrieve job_id (int): Numeric ID of the job to retrieve payload (dict): Payload required for post request \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/ { job_id } /' , method = 'post' , json = payload , ) Repository \u00b6 create_repository \u00b6 Create a repository Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the repository to create required Note After creating / updating a dbt Cloud repository's SSH key, you will need to add the generated key text as a deploy key to the target repository. This gives dbt Cloud permissions to read / write in the repository You can read more in the docs Examples: Example Payload payload = { 'account_id' : 1 , 'project_id' : 1 , 'remote_url' : '{{git_clone_url}}' , 'git_clone_strategy' : 'deploy_key' , 'github_installation_id' : None , 'token_str' : None } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_repository ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-repository --payload = '{\"account_id\": 1, \"project_id\": 1, \"remote_url\": \"{{git_clone_url}}\", \"git_clone_strategy\": \"deploy_key\", \"github_installation_id\": null, \"token_str\": null}' Source code in dbtc/client/cloud/base.py @v3 def create_repository ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create a repository Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the repository to create Note: After creating / updating a dbt Cloud repository's SSH key, you will need to add the generated key text as a deploy key to the target repository. This gives dbt Cloud permissions to read / write in the repository You can read more in the [docs](https://docs.getdbt.com/docs/dbt-cloud/cloud-configuring-dbt-cloud/cloud-configuring-repositories) Examples: ??? example \"Example Payload\" ```py payload = { 'account_id': 1, 'project_id': 1, 'remote_url':'{{git_clone_url}}', 'git_clone_strategy': 'deploy_key', 'github_installation_id': None, 'token_str': None } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_repository(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-repository --payload='{\"account_id\": 1, \"project_id\": 1, \"remote_url\": \"{{git_clone_url}}\", \"git_clone_strategy\": \"deploy_key\", \"github_installation_id\": null, \"token_str\": null}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /repositories/' , method = 'post' , json = payload , ) delete_repository \u00b6 Delete repository for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required repository_id int Numeric ID of the repository to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_repository ( account_id , project_id , repository_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-repository --repository-id = 1 Source code in dbtc/client/cloud/base.py @v3 def delete_repository ( self , account_id : int , project_id : int , repository_id : int ) -> Dict : \"\"\"Delete repository for a specified account Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project repository_id (int): Numeric ID of the repository to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_repository(account_id, project_id, repository_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-repository --repository-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /repositories/ { repository_id } ' , method = 'delete' , ) list_repositories \u00b6 List repositories for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_repositories ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-repositories Source code in dbtc/client/cloud/base.py @v3 def list_repositories ( self , account_id : int , project_id : int ) -> Dict : \"\"\"List repositories for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_repositories(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc list-repositories ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /repositories/' ) update_repository \u00b6 Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required repository_id int Numeric ID of the repository to update required payload dict Dictionary representing the repository to update required Source code in dbtc/client/cloud/base.py @v3 def update_repository ( self , account_id : int , project_id : int , repository_id : int , payload : Dict ) -> Dict : \"\"\"Update a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project repository_id (int): Numeric ID of the repository to update payload (dict): Dictionary representing the repository to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /repositories/ { repository_id } /' , # noqa: E501 method = 'post' , json = payload , ) Run \u00b6 cancel_run \u00b6 Cancel a run. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . cancel_run ( account_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. ```bash dbtc cancel-run --account-id=1 --run-id=1 Source code in dbtc/client/cloud/base.py @v2 def cancel_run ( self , account_id : int , run_id : int ) -> Dict : \"\"\"Cancel a run. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.cancel_run(account_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc cancel-run --account-id=1 --run-id=1 \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } /cancel' , method = 'post' , ) get_run \u00b6 Get a run by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required include_related obj: list of str, optional): List of related fields to pull with the run. Valid values are \"trigger\", \"job\", \"repository\", \"debug_logs\", \"run_steps\", and \"environment\". None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_run ( account_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-run --run-id = 1 Source code in dbtc/client/cloud/base.py @v2 def get_run ( self , account_id : int , run_id : int , * , include_related : List [ str ] = None ) -> Dict : \"\"\"Get a run by its ID. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve include_related (:obj:`list` of str, optional): List of related fields to pull with the run. Valid values are \"trigger\", \"job\", \"repository\", \"debug_logs\", \"run_steps\", and \"environment\". Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_run(account_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-run --run-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } ' , params = { 'include_related' : ',' . join ( include_related or [])}, ) get_run_timing_details \u00b6 Retrieves the timing details related to a run Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_run_timing_details ( account_id , project_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc get-run-timing-details --run-id = 1 Source code in dbtc/client/cloud/base.py @v3 def get_run_timing_details ( self , account_id : int , project_id : int , run_id : int ) -> Dict : \"\"\"Retrieves the timing details related to a run Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_run_timing_details(account_id, project_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc get-run-timing-details --run-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /runs/ { run_id } /timing/' ) get_run_v4 \u00b6 Retrieves the details of an existing run with the given run_id. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_run_v4 ( account_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --run-id = 1 Source code in dbtc/client/cloud/base.py @v4 def get_run_v4 ( self , account_id : int , run_id : int ) -> Dict : \"\"\"Retrieves the details of an existing run with the given run_id. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_run_v4(account_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc delete-environment --run-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } ' ) list_runs \u00b6 List runs in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required include_related obj: list of str, optional): List of related fields to pull with the run. Valid values are \"trigger\", \"job\", \"repository\", \"debug_logs\", \"run_steps\", and \"environment\". None job_definition_id int Applies a filter to only return runs from the specified Job. None order_by str Field to order the result by. Use - to indicate reverse order. None offset int The offset to apply when listing runs. Use with limit to paginate results. None limit int The limit to apply when listing runs. Use with offset to paginate results. None Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_runs ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-runs Source code in dbtc/client/cloud/base.py @v2 def list_runs ( self , account_id : int , * , include_related : List [ str ] = None , job_definition_id : int = None , order_by : str = None , offset : int = None , limit : int = None , ) -> Dict : \"\"\"List runs in an account. Args: account_id (int): Numeric ID of the account to retrieve include_related (:obj:`list` of str, optional): List of related fields to pull with the run. Valid values are \"trigger\", \"job\", \"repository\", \"debug_logs\", \"run_steps\", and \"environment\". job_definition_id (int, optional): Applies a filter to only return runs from the specified Job. order_by (str, optional): Field to order the result by. Use - to indicate reverse order. offset (int, optional): The offset to apply when listing runs. Use with limit to paginate results. limit (int, optional): The limit to apply when listing runs. Use with offset to paginate results. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_runs(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-runs ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs' , params = { 'include_related' : ',' . join ( include_related or []), 'job_definition_id' : job_definition_id , 'order_by' : order_by , 'offset' : offset , 'limit' : limit , }, ) list_runs_v4 \u00b6 Returns a list of runs in the account. The runs are returned sorted by creation date, with the most recent run appearing first. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required limit int A limit on the number of objects to be returned, between 1 and 100. None environment str A filter on the list based on the object's environment_id field. None project str A filter on the list based on the object's project_id field. None job str A filter on the list based on the object's job_id field. None status str A filter on the list based on the object's status field. Enum: \"Queued\" \"Starting\" \"Running\" \"Succeeded\" \"Failed\" \"Canceled\" None Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_runs_v4 ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-runs-v4 Source code in dbtc/client/cloud/base.py @v4 def list_runs_v4 ( self , account_id : int , * , limit : int = None , environment : str = None , project : str = None , job : str = None , status : str = None , ) -> List [ Dict ]: \"\"\"Returns a list of runs in the account. The runs are returned sorted by creation date, with the most recent run appearing first. Args: account_id (int): Numeric ID of the account to retrieve limit (int, optional): A limit on the number of objects to be returned, between 1 and 100. environment (str): A filter on the list based on the object's environment_id field. project (str): A filter on the list based on the object's project_id field. job (str): A filter on the list based on the object's job_id field. status: A filter on the list based on the object's status field. Enum: \"Queued\" \"Starting\" \"Running\" \"Succeeded\" \"Failed\" \"Canceled\" Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_runs_v4(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-runs-v4 ``` \"\"\" return self . _paginated_request ( f 'accounts/ { account_id } /runs' , params = { 'limit' : limit , 'environment' : environment , 'project' : project , 'job' : job , 'status' : status , }, ) Project \u00b6 create_project \u00b6 Create a project Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the project to create required Examples: Example Payload payload = { 'id' : None , 'name' : '{{project_name}}' , 'dbt_project_subdirectory' : None , 'account_id' : 1 , 'connection_id' : None , 'repository_id' : None } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_project ( account_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-project --payload = '{\"id\": null, \"name\": \"{{project_name}}\", \"dbt_project_subdirectory\": null, \"account_id\": 1, \"connection_id\": null, \"repository_id\": null}' Source code in dbtc/client/cloud/base.py @v3 def create_project ( self , account_id : int , payload : Dict ) -> Dict : \"\"\"Create a project Args: account_id (int): Numeric ID of the account payload (dict): Dictionary representing the project to create Examples: ??? example \"Example Payload\" ```py payload = { 'id': None, 'name': '{{project_name}}', 'dbt_project_subdirectory': None, 'account_id': 1, 'connection_id': None, 'repository_id': None } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_project(account_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc create-project --payload='{\"id\": null, \"name\": \"{{project_name}}\", \"dbt_project_subdirectory\": null, \"account_id\": 1, \"connection_id\": null, \"repository_id\": null}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/' , method = 'post' , json = payload ) delete_project \u00b6 Delete project for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_project ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-project Source code in dbtc/client/cloud/base.py @v3 def delete_project ( self , account_id : int , project_id : int ) -> Dict : \"\"\"Delete project for a specified account Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_project(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-project ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /' , method = 'delete' , ) get_project \u00b6 Get a project by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_project ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc get-project Source code in dbtc/client/cloud/base.py @v2 def get_project ( self , account_id : int , project_id : int ) -> Dict : \"\"\"Get a project by its ID. Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_project(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc get-project ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } ' ) get_project_by_name \u00b6 Get a project by its name. Parameters: Name Type Description Default project_name str Name of project to retrieve required account_id int Numeric ID of the account to retrieve None account_name str Name of account to retrieve None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_project ( \"name\" ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-project --project-name = name Source code in dbtc/client/cloud/base.py @v2 def get_project_by_name ( self , project_name : str , account_id : int = None , account_name : str = None ) -> Dict : \"\"\"Get a project by its name. Args: project_name (str): Name of project to retrieve account_id (int, optional): Numeric ID of the account to retrieve account_name (str, optional): Name of account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_project(\"name\") ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-project --project-name=name ``` \"\"\" if account_id is None and account_name is None : accounts = self . list_accounts () for account in accounts [ 'data' ]: projects = self . list_projects ( account [ 'id' ]) project = self . _get_by_name ( projects [ 'data' ], project_name ) if project is not None : break else : if account_id is not None : account = self . get_account ( account_id ) else : account = self . get_account_by_name ( account_name ) projects = self . list_projects ( account [ 'id' ]) project = self . _get_by_name ( projects [ 'data' ], project_name ) if project is not None : return self . get_project ( project [ 'account_id' ], project [ 'id' ]) raise Exception ( f '\" { project_name } \" was not found.' ) list_projects \u00b6 List projects for a specified account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_projects ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-projects Source code in dbtc/client/cloud/base.py @v3 def list_projects ( self , account_id : int ) -> Dict : \"\"\"List projects for a specified account. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_projects(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-projects ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects' ) update_project \u00b6 Update project for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project to update required payload dict Dictionary representing the project to update required Source code in dbtc/client/cloud/base.py @v3 def update_project ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Update project for a specified account Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project to update payload (dict): Dictionary representing the project to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /' , method = 'POST' , json = payload ) Service Token \u00b6 assign_service_token_permissions \u00b6 Assign permissions to a service token. Parameters: Name Type Description Default account_id int Numeric ID of the account required service_token_id int Numeric ID of the service token required payload list List of dictionaries representing the permissions to assign required Examples: Example Payload payload = [ { 'service_token_id' : 1 , 'account_id' : 1 , 'permission_set' : 'job_viewer' , 'project_id' : 1 , 'all_projects' : False }, ] Python Assuming that client is an instance of dbtCloudClient client . cloud . assign_service_token_permissions ( account_id , service_token_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-service-token-permissions --payload = '[{\"service_token_id\": 1, \"account_id\": 1, \"permission_set\": \"job_viewer\", \"project_id\": 1, \"all_projects\": false}]' Source code in dbtc/client/cloud/base.py @v3 def assign_service_token_permissions ( self , account_id : int , service_token_id : int , payload : List [ Dict ] ) -> Dict : \"\"\"Assign permissions to a service token. Args: account_id (int): Numeric ID of the account service_token_id (int): Numeric ID of the service token payload (list): List of dictionaries representing the permissions to assign Examples: ??? example \"Example Payload\" ```py payload = [ { 'service_token_id': 1, 'account_id': 1, 'permission_set': 'job_viewer', 'project_id': 1, 'all_projects': False }, ] ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.assign_service_token_permissions(account_id, service_token_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc assign-service-token-permissions --payload='[{\"service_token_id\": 1, \"account_id\": 1, \"permission_set\": \"job_viewer\", \"project_id\": 1, \"all_projects\": false}]' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/ { service_token_id } /permissions/' , method = 'post' , json = payload , ) create_service_token \u00b6 Create a service token Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the service token to create required Note This request creates a service token, but does not assign permissions to it. Permissions are assigned via the assign_service_token_permissions See the user tokens and service tokens documentation for more information. Examples: Example Payload payload = { 'id' : None , 'name' : 'api-test' , 'state' : 1 , 'account_id' : 1 , 'access' : { 'admin' : { 'permissionSet' : 'admin' , 'projects' : [ 1 ] }, 'job_admin' : { 'permissionSet' : 'job_admin' , 'projects' : [ 1 ] } } } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_service_token ( account_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-service-token --payload = '{\"id\": null, \"name\": \"api-test\", \"state\": 1, \"account_id\": 1, \"access\": {\"admin\": {\"permissionSet\": \"admin\", \"projects\": [1]}, \"job_admin\": {\"permissionSet\": \"job_admin\", \"projects\": [1]}}}' Source code in dbtc/client/cloud/base.py @v3 def create_service_token ( self , account_id : int , payload : Dict ) -> Dict : \"\"\"Create a service token Args: account_id (int): Numeric ID of the account payload (dict): Dictionary representing the service token to create Note: This request creates a service token, but does not assign permissions to it. Permissions are assigned via the [assign_service_token_permissions](cloud.md#assign_service_token_permissions) See the [user tokens](https://docs.getdbt.com/docs/dbt-cloud/dbt-cloud-api/user-tokens) and [service tokens](https://docs.getdbt.com/docs/dbt-cloud/dbt-cloud-api/service-tokens) documentation for more information. Examples: ??? example \"Example Payload\" ```py payload = { 'id': None, 'name': 'api-test', 'state': 1, 'account_id': 1, 'access': { 'admin': { 'permissionSet': 'admin', 'projects': [ 1 ] }, 'job_admin': { 'permissionSet': 'job_admin', 'projects': [ 1 ] } } } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_service_token(account_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc create-service-token --payload='{\"id\": null, \"name\": \"api-test\", \"state\": 1, \"account_id\": 1, \"access\": {\"admin\": {\"permissionSet\": \"admin\", \"projects\": [1]}, \"job_admin\": {\"permissionSet\": \"job_admin\", \"projects\": [1]}}}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/' , method = 'post' , json = payload ) get_service_token \u00b6 Retrieves a service token. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required service_token_id int Numeric ID of the service token to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_service_toke ( account_id , service_token_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-service-token --service-token-id = 1 Source code in dbtc/client/cloud/base.py @v3 def get_service_token ( self , account_id : int , service_token_id : int ) -> Dict : \"\"\"Retrieves a service token. Args: account_id (int): Numeric ID of the account to retrieve service_token_id (int): Numeric ID of the service token to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_service_toke (account_id, service_token_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-service-token --service-token-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/ { service_token_id } ' ) list_service_tokens \u00b6 List service tokens for a specific account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_service_tokens ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-service-tokens Source code in dbtc/client/cloud/base.py @v3 def list_service_tokens ( self , account_id : int ) -> Dict : \"\"\"List service tokens for a specific account. Args: account_id (int): Numeric ID of the account to retrieve Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_service_tokens(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-service-tokens ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/' ) list_service_token_permissions \u00b6 List service token permissions for a specific account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required service_token_id int Numeric ID of the service token to retrieve required Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_service_token_permissions ( account_id , service_token_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-service-token-permissions --service-token-id = 1 Source code in dbtc/client/cloud/base.py @v3 def list_service_token_permissions ( self , account_id : int , service_token_id : int ) -> Dict : \"\"\"List service token permissions for a specific account. Args: account_id (int): Numeric ID of the account to retrieve service_token_id (int): Numeric ID of the service token to retrieve Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_service_token_permissions(account_id, service_token_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-service-token-permissions --service-token-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/ { service_token_id } /permissions' ) User \u00b6 deactivate_user_license \u00b6 Deactivate user license Parameters: Name Type Description Default account_id int Numeric ID of the account required permission_id int Numeric ID of the permission that contains user you'd like to deactivate required Note Note: Ensure the groups object contains all of a user's assigned group permissions. This request will fail if a user has already been deactivated. Examples: Example Payload payload = { 'license_type' : 'developer' , 'id' : 1 , 'user_id' : 1 , 'account_id' : 1 , 'state' : 2 , 'groups' : [ { 'account_id' : 1 , 'name' : 'test-group-with-sso-mappings' , 'id' : 1 , 'state' : 1 , 'assign_by_default' : False , 'sso_mapping_groups' : [ 'something' ], 'group_permissions' : [ { 'account_id' : 1 , 'group_id' : 1 , 'project_id' : None , 'all_projects' : True , 'permission_set' : 'analyst' , 'permission_level' : None , 'id' : '{{group_permission_id}}' , 'state' : 1 } ] } ], 'permission_statements' : [ { 'permission' : 'invitations_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'license_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'projects_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'environments_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'jobs_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'runs_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'metadata_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'custom_environment_variables_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'projects_develop' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'credentials_write' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'develop_access' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'custom_environment_variables_write' , 'target_resource' : None , 'all_resources' : True } ] } Python Assuming that client is an instance of dbtCloudClient client . cloud . deactivate_user_license ( account_id , permission_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc deactivate-user-license --permission_id = 1 --payload = '{\"license_type\": \"developer\", \"id\": 1, \"user_id\": 1, \"account_id\": 1, \"state\": 2, \"groups\": [{\"account_id\": 1, \"name\": \"test-group-with-sso-mappings\", \"id\": 1, \"state\": 1, \"assign_by_default\": false, \"sso_mapping_groups\": [\"something\"], \"group_permissions\": [{\"account_id\": 1, \"group_id\": 1, \"project_id\": null, \"all_projects\": true, \"permission_set\": \"analyst\", \"permission_level\": null, \"id\": \"{{group_permission_id}}\", \"state\": 1}]}], \"permission_statements\": [{\"permission\": \"invitations_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"license_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"environments_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"jobs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"runs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"metadata_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_develop\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"credentials_write\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"develop_access\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_write\", \"target_resource\": null, \"all_resources\": true}]}' Source code in dbtc/client/cloud/base.py @v3 def deactivate_user_license ( self , account_id : int , permission_id : int , payload : Dict ) -> Dict : \"\"\"Deactivate user license Args: account_id (int): Numeric ID of the account permission_id (int): Numeric ID of the permission that contains user you'd like to deactivate Note: Note: Ensure the `groups` object contains all of a user's assigned group permissions. This request will fail if a user has already been deactivated. Examples: ??? example \"Example Payload\" ```py payload = { 'license_type': 'developer', 'id': 1, 'user_id': 1, 'account_id': 1, 'state': 2, 'groups': [ { 'account_id': 1, 'name': 'test-group-with-sso-mappings', 'id': 1, 'state': 1, 'assign_by_default': False, 'sso_mapping_groups': [ 'something' ], 'group_permissions': [ { 'account_id': 1, 'group_id': 1, 'project_id': None, 'all_projects': True, 'permission_set': 'analyst', 'permission_level': None, 'id': '{{group_permission_id}}', 'state': 1 } ] } ], 'permission_statements': [ { 'permission': 'invitations_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'license_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'projects_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'environments_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'jobs_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'runs_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'metadata_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'custom_environment_variables_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'projects_develop', 'target_resource': None, 'all_resources': True }, { 'permission': 'credentials_write', 'target_resource': None, 'all_resources': True }, { 'permission': 'develop_access', 'target_resource': None, 'all_resources': True }, { 'permission': 'custom_environment_variables_write', 'target_resource': None, 'all_resources': True } ] } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.deactivate_user_license(account_id, permission_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc deactivate-user-license --permission_id=1 --payload='{\"license_type\": \"developer\", \"id\": 1, \"user_id\": 1, \"account_id\": 1, \"state\": 2, \"groups\": [{\"account_id\": 1, \"name\": \"test-group-with-sso-mappings\", \"id\": 1, \"state\": 1, \"assign_by_default\": false, \"sso_mapping_groups\": [\"something\"], \"group_permissions\": [{\"account_id\": 1, \"group_id\": 1, \"project_id\": null, \"all_projects\": true, \"permission_set\": \"analyst\", \"permission_level\": null, \"id\": \"{{group_permission_id}}\", \"state\": 1}]}], \"permission_statements\": [{\"permission\": \"invitations_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"license_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"environments_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"jobs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"runs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"metadata_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_develop\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"credentials_write\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"develop_access\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_write\", \"target_resource\": null, \"all_resources\": true}]}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /permissions/ { permission_id } ' , method = 'post' , json = payload , ) get_user \u00b6 List invited users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required user_id int Numeric ID of the user to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_user ( account_id , user_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get_user --user-id = 1 Source code in dbtc/client/cloud/base.py @v2 def get_user ( self , account_id : int , user_id : int ) -> Dict : \"\"\"List invited users in an account. Args: account_id (int): Numeric ID of the account to retrieve user_id (int): Numeric ID of the user to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_user(account_id, user_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get_user --user-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /users/ { user_id } /' ) list_invited_users \u00b6 List invited users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_invited_users ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-invited-users Source code in dbtc/client/cloud/base.py @v2 def list_invited_users ( self , account_id : int ) -> Dict : \"\"\"List invited users in an account. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_invited_users(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-invited-users ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /invites/' ) list_users \u00b6 List users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required limit int The limit to apply when listing runs. Use with offset to paginate results. None offset int The offset to apply when listing runs. Use with limit to paginate results. None order_by str Field to order the result by. Use - to indicate reverse order. 'email' Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_users ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-users Source code in dbtc/client/cloud/base.py @v2 def list_users ( self , account_id : int , * , limit : int = None , offset : int = None , order_by : str = 'email' , ) -> Dict : \"\"\"List users in an account. Args: account_id (int): Numeric ID of the account to retrieve limit (int, optional): The limit to apply when listing runs. Use with offset to paginate results. offset (int, optional): The offset to apply when listing runs. Use with limit to paginate results. order_by (str, optional): Field to order the result by. Use - to indicate reverse order. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_users(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-users ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /users/' , params = { 'limit' : limit , 'offset' : offset , 'order_by' : order_by }, )","title":"Cloud"},{"location":"guide/cloud/#cloud","text":"The cloud property on the dbtCloudClient class contains methods that allow a user to perform CRUD operations against dbt Cloud resources.","title":"Cloud"},{"location":"guide/cloud/#account","text":"","title":"Account"},{"location":"guide/cloud/#get_account","text":"Get an account by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_account ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-account Source code in dbtc/client/cloud/base.py @v2 def get_account ( self , account_id : int ) -> Dict : \"\"\"Get an account by its ID. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_account(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-account ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } ' )","title":"get_account"},{"location":"guide/cloud/#get_account_by_name","text":"Get an account by its name. Parameters: Name Type Description Default account_name str Name of an account required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_account_by_name ( account_name ) CLI dbtc get-account-by-name --account-name = name Source code in dbtc/client/cloud/base.py @v2 def get_account_by_name ( self , account_name : str ) -> Dict : \"\"\"Get an account by its name. Args: account_name (str): Name of an account Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_account_by_name(account_name) ``` ??? example \"CLI\" ```bash dbtc get-account-by-name --account-name=name ``` \"\"\" accounts = self . list_accounts () account = self . _get_by_name ( accounts [ 'data' ], account_name ) if account is not None : return self . get_account ( account [ 'id' ]) raise Exception ( f '\" { account_name } \" was not found' )","title":"get_account_by_name"},{"location":"guide/cloud/#get_account_licenses","text":"List account licenses for a specified account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_account_licenses ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-account-licenses Source code in dbtc/client/cloud/base.py @v2 def get_account_licenses ( self , account_id : int ) -> Dict : \"\"\"List account licenses for a specified account. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_account_licenses(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-account-licenses ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /licenses' )","title":"get_account_licenses"},{"location":"guide/cloud/#list_accounts","text":"List of accounts that your API Token is authorized to access. Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_accounts () CLI dbtc list-accounts Source code in dbtc/client/cloud/base.py @v2 def list_accounts ( self ) -> Dict : \"\"\"List of accounts that your API Token is authorized to access. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_accounts() ``` ??? example \"CLI\" ```bash dbtc list-accounts ``` \"\"\" return self . _simple_request ( 'accounts/' )","title":"list_accounts"},{"location":"guide/cloud/#artifact","text":"","title":"Artifact"},{"location":"guide/cloud/#get_run_artifact","text":"Fetch artifacts from a completed run. Once a run has completed, you can use this endpoint to download the manifest.json , run_results.json or catalog.json files from dbt Cloud. These artifacts contain information about the models in your dbt project, timing information around their execution, and a status message indicating the result of the model build. Note By default, this endpoint returns artifacts from the last step in the run. To list artifacts from other steps in the run, use the step query parameter described below. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required path str Paths are rooted at the target/ directory. Use manifest.json, catalog.json, or run_results.json to download dbt-generated artifacts for the run. required step str The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_run_artifact ( account_id , run_id , path ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-run-artifact --run-id = 1 --path = manifest.json Source code in dbtc/client/cloud/base.py @v2 def get_run_artifact ( self , account_id : int , run_id : int , path : str , * , step : int = None , ) -> Dict : \"\"\"Fetch artifacts from a completed run. Once a run has completed, you can use this endpoint to download the `manifest.json`, `run_results.json` or `catalog.json` files from dbt Cloud. These artifacts contain information about the models in your dbt project, timing information around their execution, and a status message indicating the result of the model build. Note: By default, this endpoint returns artifacts from the last step in the run. To list artifacts from other steps in the run, use the step query parameter described below. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve path (str): Paths are rooted at the target/ directory. Use manifest.json, catalog.json, or run_results.json to download dbt-generated artifacts for the run. step (str, optional): The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_run_artifact(account_id, run_id, path) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-run-artifact --run-id=1 --path=manifest.json ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } /artifacts/ { path } ' , params = { 'step' : step }, )","title":"get_run_artifact"},{"location":"guide/cloud/#list_run_artifacts","text":"Fetch a list of artifact files generated for a completed run. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required step str The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_run_artifacts ( account_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-environments --run-id = 1 Source code in dbtc/client/cloud/base.py @v2 def list_run_artifacts ( self , account_id : int , run_id : int , * , step : int = None , ) -> Dict : \"\"\"Fetch a list of artifact files generated for a completed run. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve step (str, optional): The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_run_artifacts(account_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-environments --run-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } /artifacts' , params = { 'step' : step }, )","title":"list_run_artifacts"},{"location":"guide/cloud/#audit-log","text":"","title":"Audit Log"},{"location":"guide/cloud/#list_audit_logs","text":"List audit logs for a specific account Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required logged_at_start str Date to begin retrieving audit logs Format is yyyy-mm-dd None logged_at_end str Date to stop retrieving audit logs. Format is yyyy-mm-dd None offset int The offset to apply when listing runs. Use with limit to paginate results. None limit int The limit to apply when listing runs. Use with offset to paginate results. None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_audit_logs ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. ```bash dbtc list-audit-logs Source code in dbtc/client/cloud/base.py @v3 def list_audit_logs ( self , account_id : int , * , logged_at_start : str = None , logged_at_end : str = None , offset : int = None , limit : int = None , ) -> Dict : \"\"\"List audit logs for a specific account Args: account_id (int): Numeric ID of the account to retrieve logged_at_start (str, optional): Date to begin retrieving audit logs Format is yyyy-mm-dd logged_at_end (str, optional): Date to stop retrieving audit logs. Format is yyyy-mm-dd offset (int, optional): The offset to apply when listing runs. Use with limit to paginate results. limit (int, optional): The limit to apply when listing runs. Use with offset to paginate results. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_audit_logs(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-audit-logs \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /audit-logs' , params = { 'logged_at_start' : logged_at_start , 'logged_at_end' : logged_at_end , 'offset' : offset , 'limit' : limit , }, )","title":"list_audit_logs"},{"location":"guide/cloud/#connection","text":"","title":"Connection"},{"location":"guide/cloud/#create_adapter","text":"Create an adapter Note This is a prerequisite for creating a Databricks connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the adapter to create required Examples: Example Payload payload = { 'id' : None , 'account_id' : 1 , 'created_by_id' : 1 , 'project_id' : 1 , 'state' : 1 , 'adapter_version' : 'databricks_spark_v0' , } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_adapter ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-adapter --payload = '{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 Source code in dbtc/client/cloud/base.py @v3 def create_adapter ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create an adapter Note: This is a prerequisite for creating a Databricks connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the adapter to create Examples: ??? example \"Example Payload\" ```py payload = { 'id': None, 'account_id': 1, 'created_by_id': 1, 'project_id': 1, 'state': 1, 'adapter_version': 'databricks_spark_v0', } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_adapter(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-adapter --payload='{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /adapters/' , method = 'post' , json = payload , )","title":"create_adapter"},{"location":"guide/cloud/#create_connection","text":"Create a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the connection to create required Examples: Snowflake Payload payload = { 'id' : None , 'name' : 'Test' , 'type' : 'snowflake' , 'details' : { 'account' : snowflake_account , 'role' : snowflake_role , 'database' : snowflake_database , 'warehouse' : snowflake_warehouse , 'oauth_client_id' : None , 'oauth_client_secret' : None , 'client_session_keep_alive' : False , 'allow_sso' : False , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } Bigquery Payload payload = { 'id' : None , 'name' : '<test-bigquery-connection>' , 'type' : 'bigquery' , 'details' : { 'retries' : 1 , 'maximum_bytes_billed' : 0 , 'locaiton' : None , 'timeout_seconds' : 300 , 'project_id' : google_cloud_project_id , 'private_key_id' : service_account_private_key_id , 'private_key' : '-----BEGIN PRIVATE KEY----' , 'client_email' : 'service_account_email@gmail.com' , 'client_id' : '<service-account-client-id' , 'auth_uri' : 'https://accounts.google.com/o/oauth2/auth' , 'token_uri' : 'https://oauth2.googleapis.com/token' , 'auth_provider_x509_cert_url' : 'https://www.googleapiscom/robot/v1/metadata/x509/<service-account-email>' , 'application_id' : None , 'application_secret' : None , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } Redshift Payload payload = { 'id' : None , 'name' : '<connection-name>' , 'type' : 'redshift' , 'details' : { 'hostname' : '<hostname>' , 'port' : 5439 , 'dbname' : '<your-db-name>' , 'tunnel_enabled' : False , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_connection ( account_id , project_id , payload ) CLI dbtc create-connection --payload = '{\"id\": null, \"name\": \"<connection-name>\", \"type\": \"redshift\", \"details\": {\"hostname\": \"<hostname>\", \"port\": 5439, \"dbname\": \"<your-db-name>\", \"tunnel_enabled\": false}, \"state\": 1, \"account_id\": 1, \"project_id\": 1}' # noqa: E501 Source code in dbtc/client/cloud/base.py @v3 def create_connection ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the connection to create Examples: ??? example \"Snowflake Payload\" ```py payload = { 'id': None, 'name': 'Test', 'type': 'snowflake', 'details': { 'account': snowflake_account, 'role': snowflake_role, 'database': snowflake_database, 'warehouse': snowflake_warehouse, 'oauth_client_id': None, 'oauth_client_secret': None, 'client_session_keep_alive': False, 'allow_sso': False, }, 'state': 1, 'account_id': 1, 'project_id': 1, } ``` ??? example \"Bigquery Payload\" ```py payload = { 'id': None, 'name': '<test-bigquery-connection>', 'type': 'bigquery', 'details': { 'retries': 1, 'maximum_bytes_billed': 0, 'locaiton': None, 'timeout_seconds': 300, 'project_id': google_cloud_project_id, 'private_key_id': service_account_private_key_id, 'private_key': '-----BEGIN PRIVATE KEY----', 'client_email': 'service_account_email@gmail.com', 'client_id': '<service-account-client-id', 'auth_uri': 'https://accounts.google.com/o/oauth2/auth', 'token_uri': 'https://oauth2.googleapis.com/token', 'auth_provider_x509_cert_url': 'https://www.googleapiscom/robot/v1/metadata/x509/<service-account-email>', 'application_id': None, 'application_secret': None, }, 'state': 1, 'account_id': 1, 'project_id': 1, } ``` ??? example \"Redshift Payload\" ```py payload = { 'id': None, 'name': '<connection-name>', 'type': 'redshift', 'details': { 'hostname': '<hostname>', 'port': 5439, 'dbname': '<your-db-name>', 'tunnel_enabled': False, }, 'state': 1, 'account_id': 1, 'project_id': 1, } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_connection(account_id, project_id, payload) ``` ??? example \"CLI\" ```bash dbtc create-connection --payload='{\"id\": null, \"name\": \"<connection-name>\", \"type\": \"redshift\", \"details\": {\"hostname\": \"<hostname>\", \"port\": 5439, \"dbname\": \"<your-db-name>\", \"tunnel_enabled\": false}, \"state\": 1, \"account_id\": 1, \"project_id\": 1}' # noqa: E501 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /connections/' , method = 'post' , json = payload , )","title":"create_connection"},{"location":"guide/cloud/#delete_connection","text":"Delete a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required connection_id int Numeric ID of the connection to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_connection ( account_id , project_id , connection_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-connection --connection-id = 1 Source code in dbtc/client/cloud/base.py @v3 def delete_connection ( self , account_id : int , project_id : int , connection_id : int ) -> Dict : \"\"\"Delete a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project connection_id (int): Numeric ID of the connection to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_connection(account_id, project_id, connection_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-connection --connection-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /connections/ { connection_id } ' , method = 'delete' , )","title":"delete_connection"},{"location":"guide/cloud/#list_connections","text":"List connections for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_connections ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-connections Source code in dbtc/client/cloud/base.py @v3 def list_connections ( self , account_id : int , project_id : int ) -> Dict : \"\"\"List connections for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_connections(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc list-connections ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /connections' )","title":"list_connections"},{"location":"guide/cloud/#test_connection","text":"Test a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the connection to test required Source code in dbtc/client/cloud/base.py @v3 def test_connection ( self , account_id : int , payload : Dict ) -> Dict : \"\"\"Test a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the connection to test \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /connections/test/' , method = 'post' , json = payload )","title":"test_connection"},{"location":"guide/cloud/#update_connection","text":"Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required connection_id int Numeric ID of the connection to update required payload dict Dictionary representing the connection to update required Source code in dbtc/client/cloud/base.py @v3 def update_connection ( self , account_id : int , project_id : int , connection_id : int , payload : Dict ) -> Dict : \"\"\"Update a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project connection_id (int): Numeric ID of the connection to update payload (dict): Dictionary representing the connection to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /connections/ { connection_id } /' , method = 'post' , json = payload , )","title":"update_connection"},{"location":"guide/cloud/#credentials","text":"","title":"Credentials"},{"location":"guide/cloud/#create_credentials","text":"Create credentials Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the credentials to create required Examples: Example Payload payload = { 'id' : None , 'account_id' : 1 , 'created_by_id' : 1 , 'project_id' : 1 , 'state' : 1 , 'adapter_version' : 'databricks_spark_v0' , } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_credentials ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 Source code in dbtc/client/cloud/base.py @v3 def create_credentials ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create credentials Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the credentials to create Examples: ??? example \"Example Payload\" ```py payload = { 'id': None, 'account_id': 1, 'created_by_id': 1, 'project_id': 1, 'state': 1, 'adapter_version': 'databricks_spark_v0', } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_credentials(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-credentials --payload='{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /credentials/' , method = 'post' , json = payload , )","title":"create_credentials"},{"location":"guide/cloud/#list_credentials","text":"List credentials for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_credentials ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-credentials Source code in dbtc/client/cloud/base.py @v3 def list_credentials ( self , account_id : int , project_id : int ) -> Dict : \"\"\"List credentials for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_credentials(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc list-credentials ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /credentials' )","title":"list_credentials"},{"location":"guide/cloud/#update_credentials","text":"Update credentials Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required credentials_id int Numeric ID of the credentials to update required payload dict Dictionary representing the credentials to update required Source code in dbtc/client/cloud/base.py @v3 def update_credentials ( self , account_id : int , project_id : int , credentials_id : int , payload : Dict ) -> Dict : \"\"\"Update credentials Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project credentials_id (int): Numeric ID of the credentials to update payload (dict): Dictionary representing the credentials to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /credentials/ { credentials_id } /' , # noqa: E50 method = 'post' , json = payload , )","title":"update_credentials"},{"location":"guide/cloud/#environment","text":"","title":"Environment"},{"location":"guide/cloud/#create_environment","text":"Create an environment Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the environment to create required Source code in dbtc/client/cloud/base.py @v3 def create_environment ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create an environment Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the environment to create \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /environments/' , method = 'post' , json = payload , )","title":"create_environment"},{"location":"guide/cloud/#delete_environment","text":"Delete job for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required environment_id int Numeric ID of the environment to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_environment ( account_id , project_id , environment_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-environment --environment-id = 1 Source code in dbtc/client/cloud/base.py @v3 def delete_environment ( self , account_id : int , environment_id : int ) -> Dict : \"\"\"Delete job for a specified account Args: account_id (int): Numeric ID of the account environment_id (int): Numeric ID of the environment to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_environment(account_id, project_id, environment_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-environment --environment-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /environments/ { environment_id } /' , method = 'delete' , )","title":"delete_environment"},{"location":"guide/cloud/#list_environments","text":"List environments for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_environments ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-environments Source code in dbtc/client/cloud/base.py @v3 def list_environments ( self , account_id : int , project_id : int ) -> Dict : \"\"\"List environments for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_environments(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc list-environments ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /environments/' )","title":"list_environments"},{"location":"guide/cloud/#update_environment","text":"Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required environment_id int Numeric ID of the environment to update required payload dict Dictionary representing the environment to update required Source code in dbtc/client/cloud/base.py @v3 def update_environment ( self , account_id : int , project_id : int , environment_id : int , payload : Dict ) -> Dict : \"\"\"Update a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project environment_id (int): Numeric ID of the environment to update payload (dict): Dictionary representing the environment to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /environments/ { environment_id } /' , # noqa: E501 method = 'post' , json = payload , )","title":"update_environment"},{"location":"guide/cloud/#environment-variables","text":"","title":"Environment Variables"},{"location":"guide/cloud/#create_environment_variables","text":"Create environment variabless Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the environment variables to create required Examples: Example Payload payload = { 'env_var' : { 'name' : 'DBT_ENV_TEST' , 'ids' : [], 'new_name' : 'DBT_ENV_TEST' , 'project' : 'foo' , '{{development_environment_name}}' : 'dev_value' , '{{deployment_environment_name}}' : 'deploy_value' } } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_environment_variables ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"env_var\": {\"name\": \"DBT_ENV_TEST\", \"ids\": [], \"new_name\": \"DBT_ENV_TEST\", \"project\": \"foo\", \"{{development_environment_name}}\": \"dev_value\", \"{{deployment_environment_name}}\": \"deploy_value\"}}' Source code in dbtc/client/cloud/base.py @v3 def create_environment_variables ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create environment variabless Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the environment variables to create Examples: ??? example \"Example Payload\" ```py payload = { 'env_var': { 'name': 'DBT_ENV_TEST', 'ids': [], 'new_name': 'DBT_ENV_TEST', 'project': 'foo', '{{development_environment_name}}': 'dev_value', '{{deployment_environment_name}}': 'deploy_value' } } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_environment_variables(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-credentials --payload='{\"env_var\": {\"name\": \"DBT_ENV_TEST\", \"ids\": [], \"new_name\": \"DBT_ENV_TEST\", \"project\": \"foo\", \"{{development_environment_name}}\": \"dev_value\", \"{{deployment_environment_name}}\": \"deploy_value\"}}' ``` \"\"\" url = f 'accounts/ { account_id } /projects/ { project_id } /environment-variables/' if len ( payload . keys ()) > 1 : url += 'bulk/' return self . _simple_request ( url , method = 'post' , json = payload )","title":"create_environment_variables"},{"location":"guide/cloud/#delete_environment_variables","text":"Delete environment variables for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload Dict Dictionary representing environment variables to delete required Examples: Example Payload payload = { 'name' : 'DBT_MY_AWESOME_VARIABLE' } Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_environment_variables ( account_id , project_id , environment_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-environment --payload = '{\"name\": \"DBT_MY_AWESOME_VARIABLE\"}' Source code in dbtc/client/cloud/base.py @v3 def delete_environment_variables ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Delete environment variables for a specified account Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (Dict): Dictionary representing environment variables to delete Examples: ??? example \"Example Payload\" ```py payload = { 'name': 'DBT_MY_AWESOME_VARIABLE' } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_environment_variables(account_id, project_id, environment_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-environment --payload='{\"name\": \"DBT_MY_AWESOME_VARIABLE\"}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /environment-variables/bulk/' , method = 'delete' , json = payload , )","title":"delete_environment_variables"},{"location":"guide/cloud/#feature-flags","text":"","title":"Feature Flags"},{"location":"guide/cloud/#list_feature_flags","text":"List feature flags for a specific account Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_feature_flags ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-feature-flags Source code in dbtc/client/cloud/base.py @v3 def list_feature_flags ( self , account_id : int ) -> Dict : \"\"\"List feature flags for a specific account Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_feature_flags(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-feature-flags ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /feature-flag/' )","title":"list_feature_flags"},{"location":"guide/cloud/#group","text":"","title":"Group"},{"location":"guide/cloud/#assign_group_permissions","text":"Assign group permissions Parameters: Name Type Description Default account_id int Numeric ID of the account required group_id int Numeric ID of the group required payload dict Dictionary representing the group to create required Examples: Example Payload payload = [ { 'group_id' : 1 , 'account_id' : 1 , 'permission_set' : 'analyst' , 'project_id' : 1 , 'all_projects' : False }, ] Python Assuming that client is an instance of dbtCloudClient client . cloud . assign_service_token_permissions ( account_id , group_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-group-permissions --payload = '[{\"group_id\": 1, \"account_id\": 1, \"permission_set\": \"analyst\", \"project_id\": 1, \"all_projects\": false}]' Source code in dbtc/client/cloud/base.py @v3 def assign_group_permissions ( self , account_id : int , group_id : int , payload : Dict ) -> Dict : \"\"\"Assign group permissions Args: account_id (int): Numeric ID of the account group_id (int): Numeric ID of the group payload (dict): Dictionary representing the group to create Examples: ??? example \"Example Payload\" ```py payload = [ { 'group_id': 1, 'account_id': 1, 'permission_set': 'analyst', 'project_id': 1, 'all_projects': False }, ] ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.assign_service_token_permissions(account_id, group_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc assign-group-permissions --payload='[{\"group_id\": 1, \"account_id\": 1, \"permission_set\": \"analyst\", \"project_id\": 1, \"all_projects\": false}]' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /group-permissions/ { group_id } /' , method = 'post' , json = payload , )","title":"assign_group_permissions"},{"location":"guide/cloud/#assign_user_to_group","text":"Assign a user to a group Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the user to assign required Examples: Example Payload payload = { 'user_id' : 1 , 'desired_group_ids' : [ 1 ], } Python Assuming that client is an instance of dbtCloudClient client . cloud . assign_user_to_group ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. ```bash dbtc assign-user-to-group --payload='{\"user_id\": 1, \"desired_group_ids\": [1]}' Source code in dbtc/client/cloud/base.py @v3 def assign_user_to_group ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Assign a user to a group Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the user to assign Examples: ??? example \"Example Payload\" ```py payload = { 'user_id': 1, 'desired_group_ids': [1], } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.assign_user_to_group(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc assign-user-to-group --payload='{\"user_id\": 1, \"desired_group_ids\": [1]}' \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /assign-groups/' , method = 'post' , json = payload , )","title":"assign_user_to_group"},{"location":"guide/cloud/#create_user_group","text":"Create a user group Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the group to create required Note The group_name is the name of the dbt Cloud group. The list of sso_mapping_groups are string values that dbt Cloud will attempt to match with incoming information from your identity provider at login time, in order to assign the group with group_name to the user. Examples: Example Payload payload = { 'account_id' : 1 , 'name' : '{{group_name}}' , 'assign_by_default' : False , 'sso_mapping_groups' :[ 'mapping_group_1' ] } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_user_group ( account_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-user-group --payload = '{\"account_id\": 1, \"name\": \"{{group_name}}\", \"assign_by_default\": false, \"sso_mapping_groups\": [\"mapping_group_1\"]}' Source code in dbtc/client/cloud/base.py @v3 def create_user_group ( self , account_id : int , payload : Dict ) -> Dict : \"\"\"Create a user group Args: account_id (int): Numeric ID of the account payload (dict): Dictionary representing the group to create Note: The group_name is the name of the dbt Cloud group. The list of sso_mapping_groups are string values that dbt Cloud will attempt to match with incoming information from your identity provider at login time, in order to assign the group with group_name to the user. Examples: ??? example \"Example Payload\" ```py payload = { 'account_id':1, 'name':'{{group_name}}', 'assign_by_default':False, 'sso_mapping_groups':['mapping_group_1'] } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_user_group(account_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc create-user-group --payload='{\"account_id\": 1, \"name\": \"{{group_name}}\", \"assign_by_default\": false, \"sso_mapping_groups\": [\"mapping_group_1\"]}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /groups/' , method = 'post' , json = payload )","title":"create_user_group"},{"location":"guide/cloud/#delete_user_group","text":"Delete group for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required group_id int Numeric ID of the group to delete required Examples required Source code in dbtc/client/cloud/base.py @v3 def delete_user_group ( self , account_id : int , group_id : int ) -> Dict : \"\"\"Delete group for a specified account Args: account_id (int): Numeric ID of the account group_id (int): Numeric ID of the group to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_group(account_id, group_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc delete-environment --group-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /groups/ { group_id } /' , method = 'post' , )","title":"delete_user_group"},{"location":"guide/cloud/#list_groups","text":"List groups for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_groups ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-groups Source code in dbtc/client/cloud/base.py @v3 def list_groups ( self , account_id : int ) -> Dict : \"\"\"List groups for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_groups(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-groups ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /groups/' )","title":"list_groups"},{"location":"guide/cloud/#job","text":"","title":"Job"},{"location":"guide/cloud/#create_job","text":"Create a job Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the job to create required Examples: Example Payload payload = { 'account_id' : 1 , 'project_id' : 1 , 'id' : None , 'environment_id' : 1 , 'name' : '<your-job-name>' , 'dbt_version' : '1.0.1' , 'triggers' : { 'github_webhook' : False , 'schedule' : False , 'custom_branch_only' : False }, 'execute_steps' : [ 'dbt build' ], 'settings' : { 'threads' : 1 , 'target_name' : 'default' }, 'state' : 1 , 'generate_docs' : False , 'schedule' : { 'date' : { 'type' : 'every_day' }, 'time' : { 'type' : 'every_hour' , 'interval' : 1 } } } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_job ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"account_id\": 1, \"project_id\": 1, \"id\": null, \"environment_id\": 1, \"name\": \"<your-job-name>\", \"dbt_version\": \"1.0.1\", \"triggers\": {\"github_webhook\": false, \"schedule\": false, \"custom_branch_only\": false}, \"execute_steps\": [\"dbt build\"], \"settings\": {\"threads\": 1, \"target_name\": \"default\"}, \"state\": 1, \"generate_docs\": false, \"schedule\": {\"date\": {\"type\": \"every_day\"}, \"time\": {\"type\": \"every_hour\", \"interval\": 1}}}' Source code in dbtc/client/cloud/base.py @v3 def create_job ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create a job Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the job to create Examples: ??? example \"Example Payload\" ```py payload = { 'account_id': 1, 'project_id': 1, 'id': None, 'environment_id': 1, 'name': '<your-job-name>', 'dbt_version': '1.0.1', 'triggers': { 'github_webhook': False, 'schedule': False, 'custom_branch_only': False }, 'execute_steps': [ 'dbt build' ], 'settings': { 'threads': 1, 'target_name': 'default' }, 'state': 1, 'generate_docs': False, 'schedule': { 'date': { 'type': 'every_day' }, 'time': { 'type': 'every_hour', 'interval': 1 } } } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_job(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-credentials --payload='{\"account_id\": 1, \"project_id\": 1, \"id\": null, \"environment_id\": 1, \"name\": \"<your-job-name>\", \"dbt_version\": \"1.0.1\", \"triggers\": {\"github_webhook\": false, \"schedule\": false, \"custom_branch_only\": false}, \"execute_steps\": [\"dbt build\"], \"settings\": {\"threads\": 1, \"target_name\": \"default\"}, \"state\": 1, \"generate_docs\": false, \"schedule\": {\"date\": {\"type\": \"every_day\"}, \"time\": {\"type\": \"every_hour\", \"interval\": 1}}}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /jobs/' , method = 'post' , json = payload , )","title":"create_job"},{"location":"guide/cloud/#delete_job","text":"Delete job for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required job_id int Numeric ID of the project to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_job ( account_id , job_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --job-id = 1 Source code in dbtc/client/cloud/base.py @v3 def delete_job ( self , account_id : int , job_id : int ) -> Dict : \"\"\"Delete job for a specified account Args: account_id (int): Numeric ID of the account job_id (int): Numeric ID of the project to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_job(account_id, job_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc delete-environment --job-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/ { job_id } /' , method = 'delete' , )","title":"delete_job"},{"location":"guide/cloud/#get_job","text":"Get a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to retrieve required order_by str Field to order the result by. Use - to indicate reverse order. None Examples required Source code in dbtc/client/cloud/base.py @v2 def get_job ( self , account_id : int , job_id : int , * , order_by : str = None ) -> Dict : \"\"\"Get a job by its ID. Args: account_id (int): Numeric ID of the account to retrieve job_id (int): Numeric ID of the job to retrieve order_by (str, optional): Field to order the result by. Use - to indicate reverse order. Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_job(account_id, job_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-job --job-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/ { job_id } /' , params = { 'order_by' : order_by }, )","title":"get_job"},{"location":"guide/cloud/#list_jobs","text":"List jobs in an account or specific project. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required order_by str Field to order the result by. Use - to indicate reverse order. None project_id int Numeric ID of the project containing jobs None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_jobs ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-jobs Source code in dbtc/client/cloud/base.py @v2 def list_jobs ( self , account_id : int , * , order_by : str = None , project_id : int = None ) -> Dict : \"\"\"List jobs in an account or specific project. Args: account_id (int): Numeric ID of the account to retrieve order_by (str, optional): Field to order the result by. Use - to indicate reverse order. project_id (int, optional): Numeric ID of the project containing jobs Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_jobs(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-jobs ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/' , params = { 'order_by' : order_by , 'project_id' : project_id }, )","title":"list_jobs"},{"location":"guide/cloud/#trigger_job","text":"Trigger a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to trigger required payload dict Payload required for post request required Source code in dbtc/client/cloud/base.py @v2 def trigger_job ( self , account_id : int , job_id : int , payload : Dict ): \"\"\"Trigger a job by its ID. Args: account_id (int): Numeric ID of the account to retrieve job_id (int): Numeric ID of the job to trigger payload (dict): Payload required for post request \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/ { job_id } /run/' , method = 'post' , json = payload , )","title":"trigger_job"},{"location":"guide/cloud/#trigger_job_and_poll","text":"Trigger a job by its ID and poll until completion: one of SUCCESS, ERROR, or CANCELLED. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to trigger required payload dict Payload required for post request required poll_interval int Number of seconds to wait in between polling 10 Source code in dbtc/client/cloud/base.py @v2 def trigger_job_and_poll ( self , account_id : int , job_id : int , payload : Dict , poll_interval : int = 10 ) -> int : \"\"\"Trigger a job by its ID and poll until completion: one of SUCCESS, ERROR, or CANCELLED. Args: account_id (int): Numeric ID of the account to retrieve job_id (int): Numeric ID of the job to trigger payload (dict): Payload required for post request poll_interval (int, optional): Number of seconds to wait in between polling \"\"\" def _run_status_formatted ( run_id : int , status : str , time : float ) -> str : \"\"\"Format a string indicating status of job. Args: run_id (int): Numeric ID of the run to retrieve status (str): Status of job time (float): Elapsed time since job triggered \"\"\" return ( f 'Run { run_id } - { status . capitalize () } , Elapsed time: { round ( time , 0 ) } s' ) run_id = self . trigger_job ( account_id , job_id , payload )[ 'data' ][ 'id' ] print ( 'Job Triggered!' ) start = time . time () while True : time . sleep ( poll_interval ) run = self . get_run ( account_id , run_id ) status = run [ 'data' ][ 'status' ] status_name = JobRunStatus ( status ) . name if status == JobRunStatus . SUCCESS : print ( _run_status_formatted ( run_id , status_name , time . time () - start )) return run_id if status in [ JobRunStatus . CANCELLED , JobRunStatus . ERROR ]: raise Exception ( run [ 'data' ][ 'status_message' ]) print ( _run_status_formatted ( run_id , status_name , time . time () - start ))","title":"trigger_job_and_poll"},{"location":"guide/cloud/#update_job","text":"Update a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to retrieve required payload dict Payload required for post request required Source code in dbtc/client/cloud/base.py @v2 def update_job ( self , account_id : int , job_id : int , payload : Dict ) -> Dict : \"\"\"Update a job by its ID. Args: account_id (int): Numeric ID of the account to retrieve job_id (int): Numeric ID of the job to retrieve payload (dict): Payload required for post request \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /jobs/ { job_id } /' , method = 'post' , json = payload , )","title":"update_job"},{"location":"guide/cloud/#repository","text":"","title":"Repository"},{"location":"guide/cloud/#create_repository","text":"Create a repository Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the repository to create required Note After creating / updating a dbt Cloud repository's SSH key, you will need to add the generated key text as a deploy key to the target repository. This gives dbt Cloud permissions to read / write in the repository You can read more in the docs Examples: Example Payload payload = { 'account_id' : 1 , 'project_id' : 1 , 'remote_url' : '{{git_clone_url}}' , 'git_clone_strategy' : 'deploy_key' , 'github_installation_id' : None , 'token_str' : None } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_repository ( account_id , project_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-repository --payload = '{\"account_id\": 1, \"project_id\": 1, \"remote_url\": \"{{git_clone_url}}\", \"git_clone_strategy\": \"deploy_key\", \"github_installation_id\": null, \"token_str\": null}' Source code in dbtc/client/cloud/base.py @v3 def create_repository ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Create a repository Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project payload (dict): Dictionary representing the repository to create Note: After creating / updating a dbt Cloud repository's SSH key, you will need to add the generated key text as a deploy key to the target repository. This gives dbt Cloud permissions to read / write in the repository You can read more in the [docs](https://docs.getdbt.com/docs/dbt-cloud/cloud-configuring-dbt-cloud/cloud-configuring-repositories) Examples: ??? example \"Example Payload\" ```py payload = { 'account_id': 1, 'project_id': 1, 'remote_url':'{{git_clone_url}}', 'git_clone_strategy': 'deploy_key', 'github_installation_id': None, 'token_str': None } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_repository(account_id, project_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc create-repository --payload='{\"account_id\": 1, \"project_id\": 1, \"remote_url\": \"{{git_clone_url}}\", \"git_clone_strategy\": \"deploy_key\", \"github_installation_id\": null, \"token_str\": null}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /repositories/' , method = 'post' , json = payload , )","title":"create_repository"},{"location":"guide/cloud/#delete_repository","text":"Delete repository for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required repository_id int Numeric ID of the repository to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_repository ( account_id , project_id , repository_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-repository --repository-id = 1 Source code in dbtc/client/cloud/base.py @v3 def delete_repository ( self , account_id : int , project_id : int , repository_id : int ) -> Dict : \"\"\"Delete repository for a specified account Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project repository_id (int): Numeric ID of the repository to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_repository(account_id, project_id, repository_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-repository --repository-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /repositories/ { repository_id } ' , method = 'delete' , )","title":"delete_repository"},{"location":"guide/cloud/#list_repositories","text":"List repositories for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_repositories ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-repositories Source code in dbtc/client/cloud/base.py @v3 def list_repositories ( self , account_id : int , project_id : int ) -> Dict : \"\"\"List repositories for a specific account and project Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_repositories(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc list-repositories ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /repositories/' )","title":"list_repositories"},{"location":"guide/cloud/#update_repository","text":"Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required repository_id int Numeric ID of the repository to update required payload dict Dictionary representing the repository to update required Source code in dbtc/client/cloud/base.py @v3 def update_repository ( self , account_id : int , project_id : int , repository_id : int , payload : Dict ) -> Dict : \"\"\"Update a connection Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project repository_id (int): Numeric ID of the repository to update payload (dict): Dictionary representing the repository to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /repositories/ { repository_id } /' , # noqa: E501 method = 'post' , json = payload , )","title":"update_repository"},{"location":"guide/cloud/#run","text":"","title":"Run"},{"location":"guide/cloud/#cancel_run","text":"Cancel a run. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . cancel_run ( account_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. ```bash dbtc cancel-run --account-id=1 --run-id=1 Source code in dbtc/client/cloud/base.py @v2 def cancel_run ( self , account_id : int , run_id : int ) -> Dict : \"\"\"Cancel a run. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.cancel_run(account_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc cancel-run --account-id=1 --run-id=1 \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } /cancel' , method = 'post' , )","title":"cancel_run"},{"location":"guide/cloud/#get_run","text":"Get a run by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required include_related obj: list of str, optional): List of related fields to pull with the run. Valid values are \"trigger\", \"job\", \"repository\", \"debug_logs\", \"run_steps\", and \"environment\". None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_run ( account_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-run --run-id = 1 Source code in dbtc/client/cloud/base.py @v2 def get_run ( self , account_id : int , run_id : int , * , include_related : List [ str ] = None ) -> Dict : \"\"\"Get a run by its ID. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve include_related (:obj:`list` of str, optional): List of related fields to pull with the run. Valid values are \"trigger\", \"job\", \"repository\", \"debug_logs\", \"run_steps\", and \"environment\". Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_run(account_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-run --run-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } ' , params = { 'include_related' : ',' . join ( include_related or [])}, )","title":"get_run"},{"location":"guide/cloud/#get_run_timing_details","text":"Retrieves the timing details related to a run Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_run_timing_details ( account_id , project_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc get-run-timing-details --run-id = 1 Source code in dbtc/client/cloud/base.py @v3 def get_run_timing_details ( self , account_id : int , project_id : int , run_id : int ) -> Dict : \"\"\"Retrieves the timing details related to a run Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_run_timing_details(account_id, project_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc get-run-timing-details --run-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /runs/ { run_id } /timing/' )","title":"get_run_timing_details"},{"location":"guide/cloud/#get_run_v4","text":"Retrieves the details of an existing run with the given run_id. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_run_v4 ( account_id , run_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --run-id = 1 Source code in dbtc/client/cloud/base.py @v4 def get_run_v4 ( self , account_id : int , run_id : int ) -> Dict : \"\"\"Retrieves the details of an existing run with the given run_id. Args: account_id (int): Numeric ID of the account to retrieve run_id (int): Numeric ID of the run to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_run_v4(account_id, run_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc delete-environment --run-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs/ { run_id } ' )","title":"get_run_v4"},{"location":"guide/cloud/#list_runs","text":"List runs in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required include_related obj: list of str, optional): List of related fields to pull with the run. Valid values are \"trigger\", \"job\", \"repository\", \"debug_logs\", \"run_steps\", and \"environment\". None job_definition_id int Applies a filter to only return runs from the specified Job. None order_by str Field to order the result by. Use - to indicate reverse order. None offset int The offset to apply when listing runs. Use with limit to paginate results. None limit int The limit to apply when listing runs. Use with offset to paginate results. None Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_runs ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-runs Source code in dbtc/client/cloud/base.py @v2 def list_runs ( self , account_id : int , * , include_related : List [ str ] = None , job_definition_id : int = None , order_by : str = None , offset : int = None , limit : int = None , ) -> Dict : \"\"\"List runs in an account. Args: account_id (int): Numeric ID of the account to retrieve include_related (:obj:`list` of str, optional): List of related fields to pull with the run. Valid values are \"trigger\", \"job\", \"repository\", \"debug_logs\", \"run_steps\", and \"environment\". job_definition_id (int, optional): Applies a filter to only return runs from the specified Job. order_by (str, optional): Field to order the result by. Use - to indicate reverse order. offset (int, optional): The offset to apply when listing runs. Use with limit to paginate results. limit (int, optional): The limit to apply when listing runs. Use with offset to paginate results. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_runs(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-runs ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /runs' , params = { 'include_related' : ',' . join ( include_related or []), 'job_definition_id' : job_definition_id , 'order_by' : order_by , 'offset' : offset , 'limit' : limit , }, )","title":"list_runs"},{"location":"guide/cloud/#list_runs_v4","text":"Returns a list of runs in the account. The runs are returned sorted by creation date, with the most recent run appearing first. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required limit int A limit on the number of objects to be returned, between 1 and 100. None environment str A filter on the list based on the object's environment_id field. None project str A filter on the list based on the object's project_id field. None job str A filter on the list based on the object's job_id field. None status str A filter on the list based on the object's status field. Enum: \"Queued\" \"Starting\" \"Running\" \"Succeeded\" \"Failed\" \"Canceled\" None Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_runs_v4 ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-runs-v4 Source code in dbtc/client/cloud/base.py @v4 def list_runs_v4 ( self , account_id : int , * , limit : int = None , environment : str = None , project : str = None , job : str = None , status : str = None , ) -> List [ Dict ]: \"\"\"Returns a list of runs in the account. The runs are returned sorted by creation date, with the most recent run appearing first. Args: account_id (int): Numeric ID of the account to retrieve limit (int, optional): A limit on the number of objects to be returned, between 1 and 100. environment (str): A filter on the list based on the object's environment_id field. project (str): A filter on the list based on the object's project_id field. job (str): A filter on the list based on the object's job_id field. status: A filter on the list based on the object's status field. Enum: \"Queued\" \"Starting\" \"Running\" \"Succeeded\" \"Failed\" \"Canceled\" Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_runs_v4(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-runs-v4 ``` \"\"\" return self . _paginated_request ( f 'accounts/ { account_id } /runs' , params = { 'limit' : limit , 'environment' : environment , 'project' : project , 'job' : job , 'status' : status , }, )","title":"list_runs_v4"},{"location":"guide/cloud/#project","text":"","title":"Project"},{"location":"guide/cloud/#create_project","text":"Create a project Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the project to create required Examples: Example Payload payload = { 'id' : None , 'name' : '{{project_name}}' , 'dbt_project_subdirectory' : None , 'account_id' : 1 , 'connection_id' : None , 'repository_id' : None } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_project ( account_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-project --payload = '{\"id\": null, \"name\": \"{{project_name}}\", \"dbt_project_subdirectory\": null, \"account_id\": 1, \"connection_id\": null, \"repository_id\": null}' Source code in dbtc/client/cloud/base.py @v3 def create_project ( self , account_id : int , payload : Dict ) -> Dict : \"\"\"Create a project Args: account_id (int): Numeric ID of the account payload (dict): Dictionary representing the project to create Examples: ??? example \"Example Payload\" ```py payload = { 'id': None, 'name': '{{project_name}}', 'dbt_project_subdirectory': None, 'account_id': 1, 'connection_id': None, 'repository_id': None } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_project(account_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc create-project --payload='{\"id\": null, \"name\": \"{{project_name}}\", \"dbt_project_subdirectory\": null, \"account_id\": 1, \"connection_id\": null, \"repository_id\": null}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/' , method = 'post' , json = payload )","title":"create_project"},{"location":"guide/cloud/#delete_project","text":"Delete project for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project to delete required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . delete_project ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-project Source code in dbtc/client/cloud/base.py @v3 def delete_project ( self , account_id : int , project_id : int ) -> Dict : \"\"\"Delete project for a specified account Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project to delete Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.delete_project(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc delete-project ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /' , method = 'delete' , )","title":"delete_project"},{"location":"guide/cloud/#get_project","text":"Get a project by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_project ( account_id , project_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc get-project Source code in dbtc/client/cloud/base.py @v2 def get_project ( self , account_id : int , project_id : int ) -> Dict : \"\"\"Get a project by its ID. Args: account_id (int): Numeric ID of the account to retrieve project_id (int): Numeric ID of the project to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_project(account_id, project_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc get-project ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } ' )","title":"get_project"},{"location":"guide/cloud/#get_project_by_name","text":"Get a project by its name. Parameters: Name Type Description Default project_name str Name of project to retrieve required account_id int Numeric ID of the account to retrieve None account_name str Name of account to retrieve None Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_project ( \"name\" ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-project --project-name = name Source code in dbtc/client/cloud/base.py @v2 def get_project_by_name ( self , project_name : str , account_id : int = None , account_name : str = None ) -> Dict : \"\"\"Get a project by its name. Args: project_name (str): Name of project to retrieve account_id (int, optional): Numeric ID of the account to retrieve account_name (str, optional): Name of account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_project(\"name\") ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-project --project-name=name ``` \"\"\" if account_id is None and account_name is None : accounts = self . list_accounts () for account in accounts [ 'data' ]: projects = self . list_projects ( account [ 'id' ]) project = self . _get_by_name ( projects [ 'data' ], project_name ) if project is not None : break else : if account_id is not None : account = self . get_account ( account_id ) else : account = self . get_account_by_name ( account_name ) projects = self . list_projects ( account [ 'id' ]) project = self . _get_by_name ( projects [ 'data' ], project_name ) if project is not None : return self . get_project ( project [ 'account_id' ], project [ 'id' ]) raise Exception ( f '\" { project_name } \" was not found.' )","title":"get_project_by_name"},{"location":"guide/cloud/#list_projects","text":"List projects for a specified account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_projects ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-projects Source code in dbtc/client/cloud/base.py @v3 def list_projects ( self , account_id : int ) -> Dict : \"\"\"List projects for a specified account. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_projects(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-projects ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects' )","title":"list_projects"},{"location":"guide/cloud/#update_project","text":"Update project for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project to update required payload dict Dictionary representing the project to update required Source code in dbtc/client/cloud/base.py @v3 def update_project ( self , account_id : int , project_id : int , payload : Dict ) -> Dict : \"\"\"Update project for a specified account Args: account_id (int): Numeric ID of the account project_id (int): Numeric ID of the project to update payload (dict): Dictionary representing the project to update \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /projects/ { project_id } /' , method = 'POST' , json = payload )","title":"update_project"},{"location":"guide/cloud/#service-token","text":"","title":"Service Token"},{"location":"guide/cloud/#assign_service_token_permissions","text":"Assign permissions to a service token. Parameters: Name Type Description Default account_id int Numeric ID of the account required service_token_id int Numeric ID of the service token required payload list List of dictionaries representing the permissions to assign required Examples: Example Payload payload = [ { 'service_token_id' : 1 , 'account_id' : 1 , 'permission_set' : 'job_viewer' , 'project_id' : 1 , 'all_projects' : False }, ] Python Assuming that client is an instance of dbtCloudClient client . cloud . assign_service_token_permissions ( account_id , service_token_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-service-token-permissions --payload = '[{\"service_token_id\": 1, \"account_id\": 1, \"permission_set\": \"job_viewer\", \"project_id\": 1, \"all_projects\": false}]' Source code in dbtc/client/cloud/base.py @v3 def assign_service_token_permissions ( self , account_id : int , service_token_id : int , payload : List [ Dict ] ) -> Dict : \"\"\"Assign permissions to a service token. Args: account_id (int): Numeric ID of the account service_token_id (int): Numeric ID of the service token payload (list): List of dictionaries representing the permissions to assign Examples: ??? example \"Example Payload\" ```py payload = [ { 'service_token_id': 1, 'account_id': 1, 'permission_set': 'job_viewer', 'project_id': 1, 'all_projects': False }, ] ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.assign_service_token_permissions(account_id, service_token_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` and `DBT_CLOUD_PROJECT_ID` environment variables have been set. ```bash dbtc assign-service-token-permissions --payload='[{\"service_token_id\": 1, \"account_id\": 1, \"permission_set\": \"job_viewer\", \"project_id\": 1, \"all_projects\": false}]' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/ { service_token_id } /permissions/' , method = 'post' , json = payload , )","title":"assign_service_token_permissions"},{"location":"guide/cloud/#create_service_token","text":"Create a service token Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the service token to create required Note This request creates a service token, but does not assign permissions to it. Permissions are assigned via the assign_service_token_permissions See the user tokens and service tokens documentation for more information. Examples: Example Payload payload = { 'id' : None , 'name' : 'api-test' , 'state' : 1 , 'account_id' : 1 , 'access' : { 'admin' : { 'permissionSet' : 'admin' , 'projects' : [ 1 ] }, 'job_admin' : { 'permissionSet' : 'job_admin' , 'projects' : [ 1 ] } } } Python Assuming that client is an instance of dbtCloudClient client . cloud . create_service_token ( account_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-service-token --payload = '{\"id\": null, \"name\": \"api-test\", \"state\": 1, \"account_id\": 1, \"access\": {\"admin\": {\"permissionSet\": \"admin\", \"projects\": [1]}, \"job_admin\": {\"permissionSet\": \"job_admin\", \"projects\": [1]}}}' Source code in dbtc/client/cloud/base.py @v3 def create_service_token ( self , account_id : int , payload : Dict ) -> Dict : \"\"\"Create a service token Args: account_id (int): Numeric ID of the account payload (dict): Dictionary representing the service token to create Note: This request creates a service token, but does not assign permissions to it. Permissions are assigned via the [assign_service_token_permissions](cloud.md#assign_service_token_permissions) See the [user tokens](https://docs.getdbt.com/docs/dbt-cloud/dbt-cloud-api/user-tokens) and [service tokens](https://docs.getdbt.com/docs/dbt-cloud/dbt-cloud-api/service-tokens) documentation for more information. Examples: ??? example \"Example Payload\" ```py payload = { 'id': None, 'name': 'api-test', 'state': 1, 'account_id': 1, 'access': { 'admin': { 'permissionSet': 'admin', 'projects': [ 1 ] }, 'job_admin': { 'permissionSet': 'job_admin', 'projects': [ 1 ] } } } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.create_service_token(account_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc create-service-token --payload='{\"id\": null, \"name\": \"api-test\", \"state\": 1, \"account_id\": 1, \"access\": {\"admin\": {\"permissionSet\": \"admin\", \"projects\": [1]}, \"job_admin\": {\"permissionSet\": \"job_admin\", \"projects\": [1]}}}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/' , method = 'post' , json = payload )","title":"create_service_token"},{"location":"guide/cloud/#get_service_token","text":"Retrieves a service token. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required service_token_id int Numeric ID of the service token to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_service_toke ( account_id , service_token_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-service-token --service-token-id = 1 Source code in dbtc/client/cloud/base.py @v3 def get_service_token ( self , account_id : int , service_token_id : int ) -> Dict : \"\"\"Retrieves a service token. Args: account_id (int): Numeric ID of the account to retrieve service_token_id (int): Numeric ID of the service token to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_service_toke (account_id, service_token_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get-service-token --service-token-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/ { service_token_id } ' )","title":"get_service_token"},{"location":"guide/cloud/#list_service_tokens","text":"List service tokens for a specific account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_service_tokens ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-service-tokens Source code in dbtc/client/cloud/base.py @v3 def list_service_tokens ( self , account_id : int ) -> Dict : \"\"\"List service tokens for a specific account. Args: account_id (int): Numeric ID of the account to retrieve Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_service_tokens(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-service-tokens ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/' )","title":"list_service_tokens"},{"location":"guide/cloud/#list_service_token_permissions","text":"List service token permissions for a specific account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required service_token_id int Numeric ID of the service token to retrieve required Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_service_token_permissions ( account_id , service_token_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-service-token-permissions --service-token-id = 1 Source code in dbtc/client/cloud/base.py @v3 def list_service_token_permissions ( self , account_id : int , service_token_id : int ) -> Dict : \"\"\"List service token permissions for a specific account. Args: account_id (int): Numeric ID of the account to retrieve service_token_id (int): Numeric ID of the service token to retrieve Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_service_token_permissions(account_id, service_token_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-service-token-permissions --service-token-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /service-tokens/ { service_token_id } /permissions' )","title":"list_service_token_permissions"},{"location":"guide/cloud/#user","text":"","title":"User"},{"location":"guide/cloud/#deactivate_user_license","text":"Deactivate user license Parameters: Name Type Description Default account_id int Numeric ID of the account required permission_id int Numeric ID of the permission that contains user you'd like to deactivate required Note Note: Ensure the groups object contains all of a user's assigned group permissions. This request will fail if a user has already been deactivated. Examples: Example Payload payload = { 'license_type' : 'developer' , 'id' : 1 , 'user_id' : 1 , 'account_id' : 1 , 'state' : 2 , 'groups' : [ { 'account_id' : 1 , 'name' : 'test-group-with-sso-mappings' , 'id' : 1 , 'state' : 1 , 'assign_by_default' : False , 'sso_mapping_groups' : [ 'something' ], 'group_permissions' : [ { 'account_id' : 1 , 'group_id' : 1 , 'project_id' : None , 'all_projects' : True , 'permission_set' : 'analyst' , 'permission_level' : None , 'id' : '{{group_permission_id}}' , 'state' : 1 } ] } ], 'permission_statements' : [ { 'permission' : 'invitations_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'license_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'projects_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'environments_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'jobs_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'runs_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'metadata_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'custom_environment_variables_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'projects_develop' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'credentials_write' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'develop_access' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'custom_environment_variables_write' , 'target_resource' : None , 'all_resources' : True } ] } Python Assuming that client is an instance of dbtCloudClient client . cloud . deactivate_user_license ( account_id , permission_id , payload ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc deactivate-user-license --permission_id = 1 --payload = '{\"license_type\": \"developer\", \"id\": 1, \"user_id\": 1, \"account_id\": 1, \"state\": 2, \"groups\": [{\"account_id\": 1, \"name\": \"test-group-with-sso-mappings\", \"id\": 1, \"state\": 1, \"assign_by_default\": false, \"sso_mapping_groups\": [\"something\"], \"group_permissions\": [{\"account_id\": 1, \"group_id\": 1, \"project_id\": null, \"all_projects\": true, \"permission_set\": \"analyst\", \"permission_level\": null, \"id\": \"{{group_permission_id}}\", \"state\": 1}]}], \"permission_statements\": [{\"permission\": \"invitations_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"license_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"environments_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"jobs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"runs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"metadata_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_develop\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"credentials_write\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"develop_access\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_write\", \"target_resource\": null, \"all_resources\": true}]}' Source code in dbtc/client/cloud/base.py @v3 def deactivate_user_license ( self , account_id : int , permission_id : int , payload : Dict ) -> Dict : \"\"\"Deactivate user license Args: account_id (int): Numeric ID of the account permission_id (int): Numeric ID of the permission that contains user you'd like to deactivate Note: Note: Ensure the `groups` object contains all of a user's assigned group permissions. This request will fail if a user has already been deactivated. Examples: ??? example \"Example Payload\" ```py payload = { 'license_type': 'developer', 'id': 1, 'user_id': 1, 'account_id': 1, 'state': 2, 'groups': [ { 'account_id': 1, 'name': 'test-group-with-sso-mappings', 'id': 1, 'state': 1, 'assign_by_default': False, 'sso_mapping_groups': [ 'something' ], 'group_permissions': [ { 'account_id': 1, 'group_id': 1, 'project_id': None, 'all_projects': True, 'permission_set': 'analyst', 'permission_level': None, 'id': '{{group_permission_id}}', 'state': 1 } ] } ], 'permission_statements': [ { 'permission': 'invitations_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'license_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'projects_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'environments_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'jobs_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'runs_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'metadata_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'custom_environment_variables_read', 'target_resource': None, 'all_resources': True }, { 'permission': 'projects_develop', 'target_resource': None, 'all_resources': True }, { 'permission': 'credentials_write', 'target_resource': None, 'all_resources': True }, { 'permission': 'develop_access', 'target_resource': None, 'all_resources': True }, { 'permission': 'custom_environment_variables_write', 'target_resource': None, 'all_resources': True } ] } ``` ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.deactivate_user_license(account_id, permission_id, payload) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc deactivate-user-license --permission_id=1 --payload='{\"license_type\": \"developer\", \"id\": 1, \"user_id\": 1, \"account_id\": 1, \"state\": 2, \"groups\": [{\"account_id\": 1, \"name\": \"test-group-with-sso-mappings\", \"id\": 1, \"state\": 1, \"assign_by_default\": false, \"sso_mapping_groups\": [\"something\"], \"group_permissions\": [{\"account_id\": 1, \"group_id\": 1, \"project_id\": null, \"all_projects\": true, \"permission_set\": \"analyst\", \"permission_level\": null, \"id\": \"{{group_permission_id}}\", \"state\": 1}]}], \"permission_statements\": [{\"permission\": \"invitations_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"license_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"environments_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"jobs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"runs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"metadata_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_develop\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"credentials_write\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"develop_access\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_write\", \"target_resource\": null, \"all_resources\": true}]}' ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /permissions/ { permission_id } ' , method = 'post' , json = payload , )","title":"deactivate_user_license"},{"location":"guide/cloud/#get_user","text":"List invited users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required user_id int Numeric ID of the user to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . get_user ( account_id , user_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get_user --user-id = 1 Source code in dbtc/client/cloud/base.py @v2 def get_user ( self , account_id : int , user_id : int ) -> Dict : \"\"\"List invited users in an account. Args: account_id (int): Numeric ID of the account to retrieve user_id (int): Numeric ID of the user to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.get_user(account_id, user_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc get_user --user-id=1 ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /users/ { user_id } /' )","title":"get_user"},{"location":"guide/cloud/#list_invited_users","text":"List invited users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_invited_users ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-invited-users Source code in dbtc/client/cloud/base.py @v2 def list_invited_users ( self , account_id : int ) -> Dict : \"\"\"List invited users in an account. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_invited_users(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-invited-users ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /invites/' )","title":"list_invited_users"},{"location":"guide/cloud/#list_users","text":"List users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required limit int The limit to apply when listing runs. Use with offset to paginate results. None offset int The offset to apply when listing runs. Use with limit to paginate results. None order_by str Field to order the result by. Use - to indicate reverse order. 'email' Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python Assuming that client is an instance of dbtCloudClient client . cloud . list_users ( account_id ) CLI Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-users Source code in dbtc/client/cloud/base.py @v2 def list_users ( self , account_id : int , * , limit : int = None , offset : int = None , order_by : str = 'email' , ) -> Dict : \"\"\"List users in an account. Args: account_id (int): Numeric ID of the account to retrieve limit (int, optional): The limit to apply when listing runs. Use with offset to paginate results. offset (int, optional): The offset to apply when listing runs. Use with limit to paginate results. order_by (str, optional): Field to order the result by. Use - to indicate reverse order. Args: account_id (int): Numeric ID of the account to retrieve Examples: ??? example \"Python\" Assuming that `client` is an instance of `dbtCloudClient` ```py client.cloud.list_users(account_id) ``` ??? example \"CLI\" Assuming that `DBT_CLOUD_ACCOUNT_ID` environment variable has been set. ```bash dbtc list-users ``` \"\"\" return self . _simple_request ( f 'accounts/ { account_id } /users/' , params = { 'limit' : limit , 'offset' : offset , 'order_by' : order_by }, )","title":"list_users"},{"location":"guide/intro/","text":"Introduction \u00b6 Class \u00b6 The dbtCloudClient class is the main interface through which you will interact with dbt Cloud API endpoints. The class accepts three optional arguments: api_key service_token host An api_key can be used to access endpoints from any version of the dbt Cloud API (v2, v3, or v4). The service_token can be used for either the dbt Cloud API or the Metadata API. If you have the proper permissions , you would only need to pass a service token. from dbtc import dbtCloudClient client = dbtCloudClient ( service_token = 'this-is-my-service-token' ) Alternatively, you can set the following environment variables in place of passing the arguments to the class: api_key --> DBT_CLOUD_API_KEY service_token --> DBT_CLOUD_SERVICE_TOKEN host --> DBT_CLOUD_HOST If you have set environment variables, and have the proper permissions, you'll be able to instantiate the dbtCloudClient class as follows: from dbtc import dbtCloudClient client = dbtCloudClient () Info The host argument is only necessary for customers on single-tenant instances Properties \u00b6 The dbtCloudClient class contains two properties: cloud - instance of the _CloudClient class, which contains methods to create, read, update, and delete dbt Cloud resources metadata - instance of the _MetadataClient class, which contains methods to retrieve metadata generated from a dbt Cloud job run cloud from dbtc import dbtCloudClient # Assuming we've set the `DBT_CLOUD_SERVICET_TOKEN` environment variable` client = dbtCloudClient () accounts = client . cloud . list_accounts () metadata from dbtc import dbtCloudClient client = dbtCloudClient () job_id = < xxx > run_id = < xxx > models = client . metadata . get_models ( job_id , run_id ) CLI \u00b6 This package also comes with a command-line utility, dbtc . All of the methods available through the cloud or metadata properties on the dbtCloudClient class are available through the command line as well. The command line interface also accepts additional environment variables: DBT_CLOUD_ACCOUNT_ID DBT_CLOUD_PROJECT_ID Setting these will reduce the amount of arguments you'll need to pass. dbtc get-project --account-id = 1 --project-id = 1 Or, if you've set the DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables. dbtc get-project","title":"Introduction"},{"location":"guide/intro/#introduction","text":"","title":"Introduction"},{"location":"guide/intro/#class","text":"The dbtCloudClient class is the main interface through which you will interact with dbt Cloud API endpoints. The class accepts three optional arguments: api_key service_token host An api_key can be used to access endpoints from any version of the dbt Cloud API (v2, v3, or v4). The service_token can be used for either the dbt Cloud API or the Metadata API. If you have the proper permissions , you would only need to pass a service token. from dbtc import dbtCloudClient client = dbtCloudClient ( service_token = 'this-is-my-service-token' ) Alternatively, you can set the following environment variables in place of passing the arguments to the class: api_key --> DBT_CLOUD_API_KEY service_token --> DBT_CLOUD_SERVICE_TOKEN host --> DBT_CLOUD_HOST If you have set environment variables, and have the proper permissions, you'll be able to instantiate the dbtCloudClient class as follows: from dbtc import dbtCloudClient client = dbtCloudClient () Info The host argument is only necessary for customers on single-tenant instances","title":"Class"},{"location":"guide/intro/#properties","text":"The dbtCloudClient class contains two properties: cloud - instance of the _CloudClient class, which contains methods to create, read, update, and delete dbt Cloud resources metadata - instance of the _MetadataClient class, which contains methods to retrieve metadata generated from a dbt Cloud job run cloud from dbtc import dbtCloudClient # Assuming we've set the `DBT_CLOUD_SERVICET_TOKEN` environment variable` client = dbtCloudClient () accounts = client . cloud . list_accounts () metadata from dbtc import dbtCloudClient client = dbtCloudClient () job_id = < xxx > run_id = < xxx > models = client . metadata . get_models ( job_id , run_id )","title":"Properties"},{"location":"guide/intro/#cli","text":"This package also comes with a command-line utility, dbtc . All of the methods available through the cloud or metadata properties on the dbtCloudClient class are available through the command line as well. The command line interface also accepts additional environment variables: DBT_CLOUD_ACCOUNT_ID DBT_CLOUD_PROJECT_ID Setting these will reduce the amount of arguments you'll need to pass. dbtc get-project --account-id = 1 --project-id = 1 Or, if you've set the DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables. dbtc get-project","title":"CLI"},{"location":"guide/metadata/","text":"","title":"Metadata"}]}