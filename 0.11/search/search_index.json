{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> An unaffiliated python interface for dbt Cloud APIs </p> <p> </p> <p>Documentation: https://dbtc.dpguthrie.com</p> <p>Interactive Demo: https://dpguthrie-dbtc-streamlit-home-yy7c0b.streamlit.app/</p> <p>Source Code: https://github.com/dpguthrie/dbtc</p> <p>V2 Docs: https://docs.getdbt.com/dbt-cloud/api-v2</p> <p>V3 Docs: https://docs.getdbt.com/dbt-cloud/api-v3#/operations/List%20Accounts</p>"},{"location":"#quick-intro","title":"Quick Intro","text":""},{"location":"#overview","title":"Overview","text":"<p>dbtc is an unaffiliated python interface to various dbt Cloud API endpoints.</p> <p>This library acts as a convenient interface to two different APIs that dbt Cloud offers:</p> <ul> <li>Cloud API:  This is a REST API that exposes endpoints that allow users to programatically create, read, update, and delete resources within their dbt Cloud Account.</li> <li>Metadata API:  This is a GraphQL API that exposes metadata generated from a job run within dbt Cloud.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.7+</p> <ul> <li>Requests - The elegant and simple HTTP library for Python, built for human beings.</li> <li>Typer - Library for building CLI applications</li> </ul>"},{"location":"#installation","title":"Installation","text":"pip install dbtc Successfully installed dbtc restart \u21bb"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#python","title":"Python","text":"<p>The interface to both APIs are located in the <code>dbtCloudClient</code> class.</p> <p>The example below shows how you use the <code>cloud</code> property on an instance of the <code>dbtCloudClient</code> class to access methods that allow for programmatic control over dbt Cloud resources.</p> <pre><code>from dbtc import dbtCloudClient\n\nclient = dbtCloudClient()\n\nproject = client.cloud.get_project(account_id=1, project_id=1)\n</code></pre>"},{"location":"#cli","title":"CLI","text":"<p>All of the methods available via the <code>dbtCloudClient</code> class are also available through the command line via <code>dbtc</code>.</p> <p>The same code above can be written as follows using the CLI:</p> <pre><code>dbtc get-project --account-id=1 --project-id=1\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#0112","title":"[0.11.2]","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>The list_environments method and CLI invocations</li> </ul>"},{"location":"changelog/#0111","title":"[0.11.1]","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Versioning issue</li> </ul>"},{"location":"changelog/#0110","title":"[0.11.0]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>New command line groups (e.g. instead of <code>dbtc list-accounts</code>, you would use <code>dbtc accounts list</code>).  Older methods are still around but will be deprecated in future versions.</li> <li>New discovery API convenience methods to retrieve performance, recommendations, and other information</li> </ul>"},{"location":"changelog/#0100-2024-02-08","title":"[0.10.0] - 2024-02-08","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Semantic layer client.  This can be accessed with the <code>sl</code> property on the <code>dbtCloudClient</code> class (e.g. <code>client.sl.query</code>)</li> </ul>"},{"location":"changelog/#090-2024-01-11","title":"[0.9.0] - 2024-01-11","text":""},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>All of the methods in the <code>_MetadataClient</code> except for <code>query</code>.  The Discovery API no longer allows a user to specify every single field recursively, which is what the <code>sgqlc</code> package would do.</li> </ul>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>An optional keyword argument <code>use_beta_endpoint</code> to the <code>dbtCloudClient</code> class.  This will default to <code>True</code>, which means that the Discovery API will use the beta endpoint at https://metadata./beta/graphql instead of https://metadata./graphql.  This contains both the stable API resources (environment, models, tests, etc.) but also contains things for performance, recommendations, and lineage. <li>Ability to automatically paginate requests for the Discovery API.  If pagination is required/desired, ensure that your query is properly created with an <code>$after</code> variable and all of the fields within the <code>pageInfo</code> field.</li>"},{"location":"changelog/#updated","title":"Updated","text":"<ul> <li>Loosen restrictions on Pydantic - \"&gt;=2.0,&lt;3.0\"</li> </ul>"},{"location":"changelog/#080-2023-12-04","title":"[0.8.0] - 2023-12-04","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li><code>retries</code> argument to the <code>trigger_job</code> method. This will allow you to retry a job <code>retries</code> amount of times until completion, which is defined as <code>success</code> or <code>cancelled</code>.</li> </ul>"},{"location":"changelog/#updated_1","title":"Updated","text":"<ul> <li><code>trigger_job_from_failure</code> method to point at the new <code>rerun</code> endpoint. Logic is no longer necessary internally.</li> </ul>"},{"location":"changelog/#070-2023-12-04","title":"[0.7.0] - 2023-12-04","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li><code>output</code> flag can now be used to pipe output into files instead of stdout</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>The <code>-o</code> flag is no longer used for order-by when using that argument via the CLI; it is now used as an alternative for output (<code>--output</code> or <code>-o</code>)</li> </ul>"},{"location":"changelog/#060-2023-09-02","title":"[0.6.0] - 2023-09-02","text":""},{"location":"changelog/#updated_2","title":"Updated","text":"<ul> <li>Typer version to <code>0.9.0</code></li> </ul>"},{"location":"changelog/#053-2023-08-09","title":"[0.5.3] - 2023-08-09","text":"<ul> <li>Remove read-only field <code>job_type</code> from job payload before cloning job</li> </ul>"},{"location":"changelog/#052-2023-07-30","title":"[0.5.2] - 2023-07-30","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Method used in the <code>update_environment_variables</code> method call from <code>POST</code> to <code>PUT</code></li> </ul>"},{"location":"changelog/#051-2023-07-30","title":"[0.5.1] - 2023-07-30","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Methods to update and list environment variables</li> </ul>"},{"location":"changelog/#050-2023-07-28","title":"[0.5.0] - 2023-07-28","text":""},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li><code>trigger_job_from_failure</code> method encountering an <code>IndexError</code> when called for the first run of the job</li> <li><code>assign_user_to_group</code> method now accepts a <code>project_id</code> argument</li> <li><code>delete_user_group</code> method now accepts a <code>payload</code> argument</li> </ul>"},{"location":"changelog/#042-2023-04-03","title":"[0.4.2] - 2023-04-03","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>How the base URL was constructed as it was not properly accounting for other regions, single tenant instances properly</li> </ul>"},{"location":"changelog/#041-2023-04-02","title":"[0.4.1] - 2023-04-02","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Most recent updates for the Metadata API schema</li> </ul>"},{"location":"changelog/#040-2023-03-18","title":"[0.4.0] - 2023-03-18","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>List, test, create, get, update, and delete methods for webhooks</li> <li>Support for pydantic models used for validation logic when creating Webhooks - eventually will add support for other create methods</li> <li>Decorator that sets a private property on the <code>_Client</code> class, <code>_called_from</code>, that helps understand when methods are called from another method.</li> </ul>"},{"location":"changelog/#updated_3","title":"Updated","text":"<ul> <li><code>list_users</code> is now using a v3 endpoint</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li>All v4 methods were removed as dbt Cloud will begin to deprecate their use soon</li> </ul>"},{"location":"changelog/#037-2023-03-04","title":"[0.3.7] - 2023-03-04","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>A <code>max_run_slots</code> keyword argument to the <code>trigger_autoscaling_ci_job</code> method. This will allow a user to limit the amount of run slots that can be occupied by CI jobs. The default value will be None, which will ensure that the normal behavior of this method remains intact (e.g. it will clone the CI job until the number of run slots configured for the account is reached).</li> </ul>"},{"location":"changelog/#036-2023-02-28","title":"[0.3.6] - 2023-02-28","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>An additional read-only field from a job definition needed to be removed prior to creating the cloned job. 500 errors were occuring because of this.</li> </ul>"},{"location":"changelog/#035-2023-02-22","title":"[0.3.5] - 2023-02-22","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li><code>version</code> argument to the CLI. Invoke with <code>dbtc --version</code>.</li> <li>Ability to track what methods are being used. Important to note that you can opt out of this by passing <code>do_not_track=True</code> to the <code>dbtCloudClient</code> class. Additionally, nothing identifiable, like IDs, will be tracked - simply a way to understand what methods of the package are being used.</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Bad type argument for <code>poll_interval</code> in the CLI method for <code>trigger-job-from-failure</code></li> </ul>"},{"location":"changelog/#034-2023-01-27","title":"[0.3.4] - 2023-01-27","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>Additional keyword arguments to filter the <code>list_projects</code> endpoint by - <code>project_id</code>, <code>state</code>, <code>offset</code>, and <code>limit</code>. The <code>offset</code> will be useful if an account has greater than 100 (the max projects that can be returned) projects.</li> <li>Additional keyword arguments to filter the <code>list_jobs</code> endpoint by - <code>environment_id</code>, <code>state</code>, <code>offset</code>, and <code>limit</code>. Important to note that the <code>project_id</code> can either be a single project_id integer or a list of project_ids</li> <li>Convenience methods to return the most recent run, <code>get_most_recent_run</code>, and the recent run artifact, <code>get_most_recent_run_artifact</code>.</li> <li>Additional keyword arguments to filter the <code>list_environments</code> endpoint by - <code>dbt_version</code>, <code>name</code>, <code>type</code>, <code>state</code>, <code>offset</code>, and <code>limit</code>. Important to note that the <code>project_id</code> can either be a single project_id integer or a list of project_ids.</li> <li><code>fields</code> argument to the methods on the <code>metadata</code> property. This allows you to limit the data returned from the Metadata API while still not having to write any GraphQL!</li> <li><code>query</code> method on the <code>metadata</code> property. This allows you to write a GraphQL query and supply variables</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>A bug in <code>get_project_by_name</code></li> <li>A bug in the CLI related to any methods that accept the <code>include_related</code> argument. This is now valid syntax <code>'[\"debug_logs\", \"run_steps\"]'</code>.</li> </ul>"},{"location":"changelog/#033-2022-11-14","title":"[0.3.3] - 2022-11-14","text":""},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Autoscaling CI jobs were being improperly cloned when adding a commit to the same PR.</li> </ul>"},{"location":"changelog/#032-2022-11-08","title":"[0.3.2] - 2022-11-08","text":""},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Finding in progress PR runs using the PR ID within the payload</li> </ul>"},{"location":"changelog/#031-2022-11-07","title":"[0.3.1] - 2022-11-07","text":""},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>In progress runs weren't properly being cancelled within the <code>trigger_autoscaling_ci_job</code> method. In addiiton to checking if the job has an in progress run, this method will now also check if there is a run in a \"running\" state for the PR ID given in the payload. This will ensure that a single PR can only have one run occuring at a given time (this wasn't the case in 0.3.0).</li> </ul>"},{"location":"changelog/#030-2022-11-05","title":"[0.3.0] - 2022-11-05","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li><code>trigger_autoscaling_ci_job</code> method to the <code>cloud</code> property of the <code>dbtCloudClient</code> class.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>The restart from failure functionality has now been moved to it's own separate method, <code>trigger_job_from_failure</code>. You'll still be able to trigger a job using the <code>trigger_job</code> method.</li> </ul>"},{"location":"changelog/#024-2022-10-17","title":"[0.2.4] - 2022-10-17","text":""},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Non json artifacts are now able to be retrieved from <code>get_run_artifact</code></li> </ul>"},{"location":"changelog/#023-2022-09-16","title":"[0.2.3] - 2022-09-16","text":""},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Bad url configuration for <code>create_job</code> method</li> </ul>"},{"location":"changelog/#022-2022-09-15","title":"[0.2.2] - 2022-09-15","text":""},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Global CLI args <code>--warn-error</code> and <code>--use-experimental-parser</code> were not being considered. If they were present in the command, the modified command would have been invalid. These are now included within the <code>modified_command</code> if present in the initial step's command.</li> </ul>"},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li><code>--full-refresh</code> flag is now being pulled in the <code>modified_command</code> if present in the initial step's command.</li> </ul>"},{"location":"changelog/#021-2022-08-31","title":"[0.2.1] - 2022-08-31","text":""},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Checking for an invalid result \"skip\" instead of \"skipped\" when identifying nodes that need to be reran.</li> </ul>"},{"location":"changelog/#020-2022-08-30","title":"[0.2.0] - 2022-08-30","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>The ability to restart a job from failure. The <code>trigger_job</code> method now accepts an argument <code>restart_from_failure</code> (default <code>False</code>) that will determine whether or not the last run attempt for a job was unsuccessful - in the event it was, it will parse the steps within that job and find the nodes that it needs to rerun as well as any steps that were skipped entirely.</li> <li>Additional commands to the <code>trigger_job</code> method:<ul> <li><code>should_poll</code> - Indicate whether or not the method should poll for completion (default <code>True</code>)</li> <li><code>poll_interval</code> - How long in between polling requests (default 10 seconds)</li> <li><code>restart_from_failure</code> - Described above</li> <li><code>trigger_on_failure_only</code> - Only relevant when setting <code>restart_from_failure</code> to <code>True</code>. This has the effect, when set to <code>True</code>, of only triggering the job when the prior invocation was not successful. Otherwise, the function will exit prior to triggering the job (default <code>False</code>)</li> </ul> </li> <li>Logging to stderr when using the <code>trigger_job</code> method (internally using the <code>rich</code> package that comes when installing <code>Typer</code>)</li> <li>Multiple tests for the <code>restart_from_failure</code> functionality</li> </ul>"},{"location":"changelog/#removed_3","title":"Removed","text":"<ul> <li>The <code>trigger_job_and_poll</code> method within the <code>cloud</code> property of the <code>dbtCloudClient</code> class. The polling functionality is now rolled up into the single <code>trigger_job</code> method with the argument <code>should_poll</code> (default is <code>True</code>)</li> </ul>"},{"location":"changelog/#014-2022-07-11","title":"[0.1.4] - 2022-07-11","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li><code>get_model_by_environment</code> to the <code>metadata</code> property</li> <li><code>meta</code> field is now available when you query columns</li> </ul>"},{"location":"changelog/#013-2022-07-08","title":"[0.1.3] - 2022-07-08","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li>The metadata methods are now available via the CLI</li> <li>A <code>status</code> arg can now be used in the <code>list_runs</code> method on the <code>cloud</code> property</li> </ul>"},{"location":"changelog/#012-2022-06-30","title":"[0.1.2] - 2022-06-30","text":""},{"location":"changelog/#fixed_15","title":"Fixed","text":"<ul> <li>The <code>_dbt_cloud_request</code> private method, which is used in the CLI, now only uses <code>typer.echo</code> to return data from a request.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>The <code>trigger_job_and_poll</code> method now returns the <code>Run</code>, represented as a <code>dict</code>. It will no longer raise an exception if the result of the run is cancelled or error.</li> </ul>"},{"location":"changelog/#011-2022-05-16","title":"[0.1.1] - 2022-05-16","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>The <code>cloud</code> property on the <code>dbtCloudClient</code> class now contains v3 endpoints</li> </ul>"},{"location":"changelog/#010-2022-05-13","title":"[0.1.0] - 2022-05-13","text":""},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li><code>dbtCloudClient</code> class is the main interface to the dbt Cloud APIs. The <code>cloud</code> property contains methods that allow for programmatic access to different resources within dbt Cloud (e.g. <code>dbtCloudClient().cloud.list_accounts()</code>). The <code>metadata</code> property contains methods that allow for retrieval of metadata related to a dbt Cloud job run (e.g. <code>dbtCloudClient().metadata.get_models(job_id, run_id)</code>).</li> <li><code>dbtc</code> is a command line interface to the methods on the <code>dbtCloudClient</code> class (e.g. <code>dbtc list-accounts</code>)</li> </ul>"},{"location":"guide/autoscaling_ci/","title":"Autoscaling CI","text":"<p>Warning</p> <p>This feature within this package is no longer required as it's all done in a native way with dbt Cloud's continuous integration offering.</p> <p>Thank You!</p> <p>As with the restart from failure functionality, a lot of credit goes to @matt-winkler for developing this feature.</p>"},{"location":"guide/autoscaling_ci/#intro","title":"Intro","text":""},{"location":"guide/autoscaling_ci/#summary","title":"Summary","text":"<p>This library offers a convenient interface to create, what we call, an autoscaling CI job.  As of the time of this writing (11/5/22), dbt Cloud does not allow a job to have concurrent runs.  This largely makes sense in the context of regularly scheduled jobs - you would never want your daily job to be run in a concurrent fashion.  However, this feature starts to become a limitation in the context of continuous integration (CI) jobs.  Take the following scenarios:</p> <ul> <li>Adding a commit to an existing pull request that already has a job running</li> <li>Opening a separate pull request in the same repo that already has a running CI job</li> </ul> <p>In both of these instances, we'll have to wait until the existing job has completed before that same CI job can move from a queued state.</p>"},{"location":"guide/autoscaling_ci/#how-it-works","title":"How it Works","text":"<p>In the event your CI job is already running, this package, through the <code>trigger_autoscaling_ci_job</code> method, will do the following:</p> <ul> <li>If a new commit is created for the pull request linked to the existing run for the referenced job, cancel the run and trigger again.</li> <li>If this is an entirely new pull request, clone the job definition and trigger the clone.  It's important to note that the cloned job will be deleted by default after the run (you can change this through an argument to the function).  Deleting the cloned job will also force the execution into a polling state (e.g. the function won't return a <code>Run</code> until it has encountered a completed state).</li> <li>This will also check to see if your account has met or exceeded the allotted run slots.  In the event you have, a cloned job will not be created and the existing job will be triggered.</li> </ul>"},{"location":"guide/autoscaling_ci/#considerations","title":"Considerations","text":""},{"location":"guide/autoscaling_ci/#dbt-cloud","title":"dbt Cloud","text":"<p>Normally, when you configure a dbt Cloud CI job, you'll do the following:</p> <ul> <li>Defer to another job</li> <li>Include a command with a <code>state:modified+</code> selector</li> <li>And, trigger it via pull request</li> </ul> <p>To use this functionality, you want to follow all of the steps above EXCEPT the trigger piece.  The action that you setup in your repo will take care of triggering the dbt Cloud job, so if you also check that checkbox, you'll be triggering this job in two different places.</p>"},{"location":"guide/autoscaling_ci/#payload","title":"Payload","text":"<p>In order to mimic the native Slim CI behavior within dbt Cloud, it's important to pass the appropriate payload.  The payload should consist of the following (this is in the context of running against a github repository but it will be very similar across Gitlab and ADO).</p> <ul> <li><code>cause</code> - Put whatever you want here - this is a required field</li> <li><code>schema_override</code> - <code>\"dbt_cloud_pr_\"$JOB_ID\"_\"$PULL_REQUEST_ID</code></li> <li><code>git_sha</code> - <code>${{ github.event.pull_request.head.sha }}</code></li> <li>Depending on your git provider, one of <code>github_pull_request_id</code>, <code>gitlab_merge_request_id</code>, or <code>azure_pull_request_id</code> (in the GH action example, set to <code>${{ github.event.number }}</code>)</li> </ul>"},{"location":"guide/autoscaling_ci/#recommended-use","title":"Recommended Use","text":"<p>This method is best suited to be used within a Github Action, Gitlab CI Pipeline, or an Azure Pipeline.  The example below shows how you can use it within a Github Action.</p>"},{"location":"guide/autoscaling_ci/#examples","title":"Examples","text":"PythonCLIGithub ActionResponse <pre><code>from dbtc import dbtCloudClient\n\n# Assumes I have DBT_CLOUD_SERVICE_TOKEN as an environment variable\nclient = dbtCloudClient()\n\naccount_id = 1\njob_id = 1\npayload = {\n    'cause': 'Autoscaling CI',\n    'schema_override': 'dbt_cloud_pr_1_50',\n    'github_pull_request_id': 50,\n    'git_sha': 'jkafjdkfjallakjf'\n}\n\nrun = client.cloud.trigger_autoscaling_ci_job(account_id, job_id, payload)\n</code></pre> <p>Assuming that <code>DBT_CLOUD_SERVICE_TOKEN</code> and <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc trigger-autoscaling-ci-job \\\n    --job-id=$JOB_ID \\\n    --payload='{\"cause\": \"Autoscaling Slim CI!\",\"git_sha\":\"'\"$GIT_SHA\"'\",\"schema_override\":\"'\"$SO\"'\",\"github_pull_request_id\":'\"$PULL_REQUEST_ID\"'}' \\\n    --no-should-poll)\n</code></pre></p> <p>Required:  You'll need to create a secret in your repo called <code>DBT_CLOUD_SERVICE_TOKEN</code>.  The token can be obtained from dbt Cloud</p> <pre><code>name: Autoscaling dbt Cloud CI\non:\n  pull_request:\n    branches:\n      - main\n    types:\n      - opened\n      - reopened\n      - synchronize\n      - ready_for_review\n\njobs:\n  autoscaling:\n    if: github.event.pull_request.draft == false\n    runs-on: ubuntu-latest\n    env:\n      DBT_CLOUD_SERVICE_TOKEN: ${{ secrets.DBT_CLOUD_SERVICE_TOKEN }}\n      DBT_CLOUD_ACCOUNT_ID: 43786\n      JOB_ID: 73797\n      PULL_REQUEST_ID: ${{ github.event.number }}\n      GIT_SHA: ${{ github.event.pull_request.head.sha }}\n\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9.x\"\n\n      - name: Trigger Autoscaling CI Job\n        run: |\n          pip install dbtc==0.3.3\n          SO=\"dbt_cloud_pr_\"$JOB_ID\"_\"$PULL_REQUEST_ID\n          run=$(dbtc trigger-autoscaling-ci-job \\\n            --job-id=$JOB_ID \\\n            --payload='{\"cause\": \"Autoscaling Slim CI!\",\"git_sha\":\"'\"$GIT_SHA\"'\",\"schema_override\":\"'\"$SO\"'\",\"github_pull_request_id\":'\"$PULL_REQUEST_ID\"'}' \\\n            --no-should-poll)\n</code></pre> <pre><code>{\n    'status': {\n        'code': 200,\n        'is_success': True,\n        'user_message': 'Success!',\n        'developer_message': ''\n    },\n    'data': {\n        'id': 78614274,\n        'trigger_id': 79329387,\n        'account_id': 1,\n        'environment_id': 1,\n        'project_id': 1,\n        'job_definition_id': 1,\n        'status': 1,\n        'dbt_version': '1.2.0-latest',\n        'git_branch': None,\n        'git_sha': None,\n        'status_message': None,\n        'owner_thread_id': None,\n        'executed_by_thread_id': None,\n        'deferring_run_id': None,\n        'artifacts_saved': False,\n        'artifact_s3_path': None,\n        'has_docs_generated': False,\n        'has_sources_generated': False,\n        'notifications_sent': False,\n        'blocked_by': [],\n        'scribe_enabled': True,\n        'created_at': '2022-08-31 02:18:57.855152+00:00',\n        'updated_at': '2022-08-31 02:18:57.855169+00:00',\n        'dequeued_at': None,\n        'started_at': None,\n        'finished_at': None,\n        'last_checked_at': None,\n        'last_heartbeat_at': None,\n        'should_start_at': None,\n        'trigger': {\n            'id': 79329387,\n            'cause': 'Just cause',\n            'job_definition_id': 1,\n            'git_branch': None,\n            'git_sha': None,\n            'azure_pull_request_id': None,\n            'github_pull_request_id': None,\n            'gitlab_merge_request_id': None,\n            'schema_override': None,\n            'dbt_version_override': None,\n            'threads_override': None,\n            'target_name_override': None,\n            'generate_docs_override': None,\n            'timeout_seconds_override': None,\n            'steps_override': ['dbt run -s bad_model --vars \\'{\"key\": \"value\"}\\''],\n            'created_at': '2022-08-31 02:18:57.846515+00:00',\n            'cause_humanized': 'Just cause',\n            'job': None\n        },\n        'job': {\n            'execution': {\n                'timeout_seconds': 0\n            },\n            'generate_docs': False,\n            'run_generate_sources': False,\n            'id': 1,\n            'account_id': 1,\n            'project_id': 1,\n            'environment_id': 1,\n            'name': 'Test 10 - Restart with Vars',\n            'dbt_version': None,\n            'created_at': '2022-08-29T14:02:57.378279Z',\n            'updated_at': '2022-08-29T14:06:31.485879Z',\n            'execute_steps': ['dbt run -s good_model bad_model --vars \\'{\"key\": \"value\"}\\''],\n            'state': 1,\n            'deactivated': False,\n            'run_failure_count': 0,\n            'deferring_job_definition_id': None,\n            'lifecycle_webhooks': False,\n            'lifecycle_webhooks_url': None,\n            'triggers': {\n                'github_webhook': False,\n                'git_provider_webhook': False,\n                'custom_branch_only': False,\n                'schedule': False\n            },\n            'settings': {\n                'threads': 4,\n                'target_name': 'default'\n            },\n            'schedule': {\n                'cron': '0 * * * 0,1,2,3,4,5,6',\n                'date': 'days_of_week',\n                'time': 'every_hour'\n            },\n            'is_deferrable': False\n        },\n        'environment': None,\n        'run_steps': [],\n        'status_humanized': 'Queued',\n        'in_progress': True,\n        'is_complete': False,\n        'is_success': False,\n        'is_error': False,\n        'is_cancelled': False,\n        'href': 'https://cloud.getdbt.com/#/accounts/43786/projects/146089/runs/78614274/',\n        'duration': '00:00:00',\n        'queued_duration': '00:00:00',\n        'run_duration': '00:00:00',\n        'duration_humanized': '0 minutes',\n        'queued_duration_humanized': '0 minutes',\n        'run_duration_humanized': '0 minutes',\n        'created_at_humanized': '0 minutes ago',\n        'finished_at_humanized': '0 minutes from now',\n        'job_id': 1,\n        'is_running': None\n    }\n}\n</code></pre>"},{"location":"guide/cloud/","title":"Cloud","text":"<p>The <code>cloud</code> property on the <code>dbtCloudClient</code> class contains methods that allow a user to perform CRUD operations against dbt Cloud resources.</p>"},{"location":"guide/cloud/#accounts","title":"Accounts","text":""},{"location":"guide/cloud/#get_account","title":"get_account","text":"<p>Get an account by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_account(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc accounts get --account-id 1\n</code></pre></p>"},{"location":"guide/cloud/#get_account_by_name","title":"get_account_by_name","text":"<p>Get an account by its name.</p> <p>Parameters:</p> Name Type Description Default <code>account_name</code> <code>str</code> <p>Name of an account</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_account_by_name(account_name)\n</code></pre></p> <pre><code>dbtc accounts get-by-name --account-name \"Doug Sandbox\"\n</code></pre>"},{"location":"guide/cloud/#get_account_licenses","title":"get_account_licenses","text":"<p>List account licenses for a specified account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_account_licenses(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc accounts get-licenses\n</code></pre></p>"},{"location":"guide/cloud/#list_accounts","title":"list_accounts","text":"<p>List of accounts that your API Token is authorized to access.</p> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_accounts()\n</code></pre></p> <pre><code>dbtc accounts list\n</code></pre>"},{"location":"guide/cloud/#list_audit_logs","title":"list_audit_logs","text":"<p>List audit logs for a specific account</p> <p>Note</p> <p>This API is only available to enterprise customers.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>logged_at_start</code> <code>str</code> <p>Date to begin retrieving audit logs Format is yyyy-mm-dd</p> <code>None</code> <code>logged_at_end</code> <code>str</code> <p>Date to stop retrieving audit logs. Format is yyyy-mm-dd</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset to apply when listing runs. Use with limit to paginate results.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The limit to apply when listing runs. Use with offset to paginate results.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_audit_logs(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc accounts list-audit-logs\n</code></pre></p>"},{"location":"guide/cloud/#list_feature_flags","title":"list_feature_flags","text":"<p>List feature flags for a specific account</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_feature_flags(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc list-feature-flags\n</code></pre></p>"},{"location":"guide/cloud/#adapters","title":"Adapters","text":""},{"location":"guide/cloud/#create_adapter","title":"create_adapter","text":"<p>Create an adapter</p> <p>Note</p> <p>This is a prerequisite for creating a Databricks connection</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the adapter to create</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>payload = {\n    \"id\": None,\n    \"account_id\": 1,\n    \"created_by_id\": 1,\n    \"project_id\": 1,\n    \"state\": 1,\n    \"adapter_version\": \"databricks_spark_v0\"\n}\nclient.cloud.create_adapter(1, 1, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc adapters create --payload='{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}'\n</code></pre></p>"},{"location":"guide/cloud/#delete_adapter","title":"delete_adapter","text":"<p>Delete an adapter</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>adapter_id</code> <code>int</code> <p>Numeric ID of the adapter to delete</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.delete_adapter(1, 1, 1)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc adapters delete --adapter-id 1\n</code></pre></p>"},{"location":"guide/cloud/#get_adapter","title":"get_adapter","text":"<p>Get an adapter</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>adapter_id</code> <code>int</code> <p>Numeric ID of the adapter</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_adapter(1, 1, 1)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc adapters get --adapter-id 1\n</code></pre></p>"},{"location":"guide/cloud/#update_adapter","title":"update_adapter","text":"<p>Update an adapter</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>adapter_id</code> <code>int</code> <p>Numeric ID of the adapter</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the adapter to update</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>payload = {\n    \"id\": None,\n    \"account_id\": 1,\n    \"created_by_id\": 1,\n    \"project_id\": 1,\n    \"state\": 1,\n    \"adapter_version\": \"databricks_spark_v0\"\n}\nclient.cloud.update_adapter(1, 1, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc adapters update --payload='{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}'\n</code></pre></p>"},{"location":"guide/cloud/#runs","title":"Runs","text":""},{"location":"guide/cloud/#get_most_recent_run_artifact","title":"get_most_recent_run_artifact","text":"<p>Fetch artifacts from the most recent run</p> <p>Once a run has completed, you can use this endpoint to download the <code>manifest.json</code>, <code>run_results.json</code> or <code>catalog.json</code> files from dbt Cloud. These artifacts contain information about the models in your dbt project, timing information around their execution, and a status message indicating the result of the model build.</p> <p>Note</p> <p>By default, this endpoint returns artifacts from the last step in the run. To list artifacts from other steps in the run, use the step query parameter described below.</p> <p>Warning</p> <p>If requesting a non JSON artifact, the result will be a <code>str</code></p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>path</code> <code>str</code> <p>Paths are rooted at the target/ directory. Use manifest.json, catalog.json, or run_results.json to download dbt-generated artifacts for the run.</p> required <code>job_definition_id</code> <code>int</code> <p>Applies a filter to only return runs from the specified Job.</p> <code>None</code> <code>environment_id</code> <code>int</code> <p>Numeric ID of the environment</p> <code>None</code> <code>project_id</code> <code>int or list</code> <p>The project ID or IDs</p> <code>None</code> <code>deferring_run_id</code> <code>int</code> <p>Numeric ID of a deferred run</p> <code>None</code> <code>step</code> <code>str</code> <p>The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_most_recent_run_artifact(account_id, path)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc runs get-most-recent-artifact --path manifest.json\n</code></pre></p>"},{"location":"guide/cloud/#get_run_artifact","title":"get_run_artifact","text":"<p>Fetch artifacts from a completed run.</p> <p>Once a run has completed, you can use this endpoint to download the <code>manifest.json</code>, <code>run_results.json</code> or <code>catalog.json</code> files from dbt Cloud. These artifacts contain information about the models in your dbt project, timing information around their execution, and a status message indicating the result of the model build.</p> <p>Note</p> <p>By default, this endpoint returns artifacts from the last step in the run. To list artifacts from other steps in the run, use the step query parameter described below.</p> <p>Warning</p> <p>If requesting a non JSON artifact, the result will be a <code>str</code></p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>run_id</code> <code>int</code> <p>Numeric ID of the run to retrieve</p> required <code>path</code> <code>str</code> <p>Paths are rooted at the target/ directory. Use manifest.json, catalog.json, or run_results.json to download dbt-generated artifacts for the run.</p> required <code>step</code> <code>str</code> <p>The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_run_artifact(account_id, run_id, path)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc runs get-artifact --run-id 1 --path \"manifest.json\"\n</code></pre></p>"},{"location":"guide/cloud/#list_run_artifacts","title":"list_run_artifacts","text":"<p>Fetch a list of artifact files generated for a completed run.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>run_id</code> <code>int</code> <p>Numeric ID of the run to retrieve</p> required <code>step</code> <code>str</code> <p>The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_run_artifacts(account_id, run_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc runs list-artifacts --run-id 1\n</code></pre></p>"},{"location":"guide/cloud/#connection","title":"Connection","text":""},{"location":"guide/cloud/#create_connection","title":"create_connection","text":"<p>Create a connection</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the connection to create</p> required <p>Examples:</p> PythonCLISnowflakeBigqueryRedshift <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code></p> <pre><code>client.cloud.create_connection(account_id, project_id, payload)\n</code></pre> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set.</p> <pre><code>dbtc connections create --payload='{\"id\": null, \"name\": \"&lt;connection-name&gt;\", \"type\": \"redshift\", \"details\": {\"hostname\": \"&lt;hostname&gt;\", \"port\": 5439, \"dbname\": \"&lt;your-db-name&gt;\", \"tunnel_enabled\": false}, \"state\": 1, \"account_id\": 1, \"project_id\": 1}'  # noqa: E501\n</code></pre> <pre><code>payload = {\n    'id': None,\n    'name': 'Test',\n    'type': 'snowflake',\n    'details': {\n        'account': snowflake_account,\n        'role': snowflake_role,\n        'database': snowflake_database,\n        'warehouse': snowflake_warehouse,\n        'oauth_client_id': None,\n        'oauth_client_secret': None,\n        'client_session_keep_alive': False,\n        'allow_sso': False,\n    },\n    'state': 1,\n    'account_id': 1,\n    'project_id': 1,\n}\n</code></pre> <pre><code>payload = {\n    'id': None,\n    'name': '&lt;test-bigquery-connection&gt;',\n    'type': 'bigquery',\n    'details': {\n        'retries': 1,\n        'maximum_bytes_billed': 0,\n        'locaiton': None,\n        'timeout_seconds': 300,\n        'project_id': google_cloud_project_id,\n        'private_key_id': service_account_private_key_id,\n        'private_key': '-----BEGIN PRIVATE KEY----',\n        'client_email': 'service_account_email@gmail.com',\n        'client_id': '&lt;service-account-client-id',\n        'auth_uri': 'https://accounts.google.com/o/oauth2/auth',\n        'token_uri': 'https://oauth2.googleapis.com/token',\n        'auth_provider_x509_cert_url': 'https://www.googleapiscom/robot/v1/metadata/x509/&lt;service-account-email&gt;',\n        'application_id': None,\n        'application_secret': None,\n    },\n    'state': 1,\n    'account_id': 1,\n    'project_id': 1,\n}\n</code></pre> <pre><code>payload = {\n    'id': None,\n    'name': '&lt;connection-name&gt;',\n    'type': 'redshift',\n    'details': {\n        'hostname': '&lt;hostname&gt;',\n        'port': 5439,\n        'dbname': '&lt;your-db-name&gt;',\n        'tunnel_enabled': False,\n    },\n    'state': 1,\n    'account_id': 1,\n    'project_id': 1,\n}\n</code></pre>"},{"location":"guide/cloud/#delete_connection","title":"delete_connection","text":"<p>Delete a connection</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>connection_id</code> <code>int</code> <p>Numeric ID of the connection to delete</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.delete_connection(1, 1, 1)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc connections delete --connection-id 1\n</code></pre></p>"},{"location":"guide/cloud/#list_connections","title":"list_connections","text":"<p>List connections for a specific account and project</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project to retrieve</p> required <code>state</code> <code>int</code> <p>1 = active, 2 = deleted</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset to apply when listing runs. Use with limit to paginate results.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The limit to apply when listing runs. Use with offset to paginate results.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code></p> <pre><code>client.cloud.list_connections(1, 1)\n</code></pre> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc connections list\n</code></pre></p>"},{"location":"guide/cloud/#test_connection","title":"test_connection","text":"<p>Test a connection</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the connection to test</p> required"},{"location":"guide/cloud/#update_connection","title":"update_connection","text":"<p>Update a connection</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>connection_id</code> <code>int</code> <p>Numeric ID of the connection to update</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the connection to update</p> required"},{"location":"guide/cloud/#credentials","title":"Credentials","text":""},{"location":"guide/cloud/#create_credentials","title":"create_credentials","text":"<p>Create credentials</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the credentials to create</p> required <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.create_credentials(account_id, project_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc create-credentials --payload='{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}'  # noqa: E501\n</code></pre></p> <pre><code>payload = {\n    'id': None,\n    'account_id': 1,\n    'created_by_id': 1,\n    'project_id': 1,\n    'state': 1,\n    'adapter_version': 'databricks_spark_v0',\n}\n</code></pre>"},{"location":"guide/cloud/#list_credentials","title":"list_credentials","text":"<p>List credentials for a specific account and project</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_credentials(account_id, project_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc list-credentials\n</code></pre></p>"},{"location":"guide/cloud/#update_credentials","title":"update_credentials","text":"<p>Update credentials</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>credentials_id</code> <code>int</code> <p>Numeric ID of the credentials to update</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the credentials to update</p> required"},{"location":"guide/cloud/#environment","title":"Environment","text":""},{"location":"guide/cloud/#create_environment","title":"create_environment","text":"<p>Create an environment</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the environment to create</p> required"},{"location":"guide/cloud/#delete_environment","title":"delete_environment","text":"<p>Delete job for a specified account</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>environment_id</code> <code>int</code> <p>Numeric ID of the environment to delete</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.delete_environment(account_id, project_id, environment_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc delete-environment --environment-id=1\n</code></pre></p>"},{"location":"guide/cloud/#list_environments","title":"list_environments","text":"<p>List environments for a specific account and project</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>project_id</code> <code>int or list</code> <p>The project ID or IDs</p> required <code>dbt_version</code> <code>str or list</code> <p>The version of dbt the environment is using</p> <code>None</code> <code>deployment_type</code> <code>str or list</code> <p>The deployment type of the environment. Valid values are \"staging\" and \"production\"</p> <code>None</code> <code>credentials_id</code> <code>int</code> <p>Numeric ID of the credentials to retrieve</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the environment to retrieve</p> <code>None</code> <code>type</code> <code>str</code> <p>Type of the environment (deployment or development)</p> <code>None</code> <code>state</code> <code>int</code> <p>1 = active, 2 = deleted</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset to apply when listing runs. Use with limit to paginate results.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The limit to apply when listing runs. Use with offset to paginate results.</p> <code>None</code> <code>order_by</code> <code>str</code> <p>Field to order the result by.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_environments(account_id, project_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc list-environments\n</code></pre></p>"},{"location":"guide/cloud/#update_environment","title":"update_environment","text":"<p>Update a connection</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>environment_id</code> <code>int</code> <p>Numeric ID of the environment to update</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the environment to update</p> required"},{"location":"guide/cloud/#environment-variables","title":"Environment Variables","text":""},{"location":"guide/cloud/#create_environment_variables","title":"create_environment_variables","text":"<p>Create environment variables</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the environment variables to create</p> required <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.create_environment_variables(account_id, project_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc create-credentials --payload='{\"env_var\": {\"name\": \"DBT_ENV_TEST\", \"ids\": [], \"new_name\": \"DBT_ENV_TEST\", \"project\": \"foo\", \"{{development_environment_name}}\": \"dev_value\", \"{{deployment_environment_name}}\": \"deploy_value\"}}'\n</code></pre></p> <pre><code>payload = {\n    'env_var': {\n        'name': 'DBT_ENV_TEST',\n        'ids': [],\n        'new_name': 'DBT_ENV_TEST',\n        'project': 'foo',\n        '{{development_environment_name}}': 'dev_value',\n        '{{deployment_environment_name}}': 'deploy_value'\n    }\n}\n</code></pre>"},{"location":"guide/cloud/#delete_environment_variables","title":"delete_environment_variables","text":"<p>Delete environment variables</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>env_var_id</code> <code>int</code> <p>Numeric ID of the environment variable to delete</p> required <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.delete_environment_variables(account_id, project_id, environment_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc delete-environment --payload='{\"name\": \"DBT_MY_AWESOME_VARIABLE\"}'\n</code></pre></p> <pre><code>payload = {\n    'name': 'DBT_MY_AWESOME_VARIABLE'\n}\n</code></pre>"},{"location":"guide/cloud/#group","title":"Group","text":""},{"location":"guide/cloud/#assign_group_permissions","title":"assign_group_permissions","text":"<p>Assign group permissions</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>group_id</code> <code>int</code> <p>Numeric ID of the group</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the group to create</p> required <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code></p> <pre><code>client.cloud.assign_service_token_permissions(account_id, group_id, payload)\n</code></pre> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set.</p> <pre><code>dbtc assign-group-permissions --payload='[{\"group_id\": 1, \"account_id\": 1, \"permission_set\": \"analyst\", \"project_id\": 1, \"all_projects\": false}]'\n</code></pre> <pre><code>payload = [\n    {\n        'group_id': 1,\n        'account_id': 1,\n        'permission_set': 'analyst',\n        'project_id': 1,\n        'all_projects': False\n    },\n]\n</code></pre>"},{"location":"guide/cloud/#assign_user_to_group","title":"assign_user_to_group","text":"<p>Assign a user to a group</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the user to assign</p> required <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.assign_user_to_group(account_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc assign-user-to-group --payload='{\"user_id\": 1, \"desired_group_ids\": [1]}'\n</code></pre></p> <pre><code>payload = {\n    'user_id': 1,\n    'desired_group_ids': [1],\n}\n</code></pre>"},{"location":"guide/cloud/#create_user_group","title":"create_user_group","text":"<p>Create a user group</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the group to create</p> required <p>Note</p> <p>The group_name is the name of the dbt Cloud group. The list of sso_mapping_groups are string values that dbt Cloud will attempt to match with incoming information from your identity provider at login time, in order to assign the group with group_name to the user.</p> <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.create_user_group(account_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc create-user-group --payload='{\"account_id\": 1, \"name\": \"{{group_name}}\", \"assign_by_default\": false, \"sso_mapping_groups\": [\"mapping_group_1\"]}'\n</code></pre></p> <pre><code>payload = {\n    'account_id':1,\n    'name':'{{group_name}}',\n    'assign_by_default':False,\n    'sso_mapping_groups':['mapping_group_1']\n}\n</code></pre>"},{"location":"guide/cloud/#delete_user_group","title":"delete_user_group","text":"<p>Delete group for a specified account</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>group_id</code> <code>int</code> <p>Numeric ID of the group to delete</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the group to delete with the format {     \"account_id\": int,     \"name\": str,     \"id\": int,     \"state\":2,     \"assign_by_default\":false,     \"sso_mapping_groups\": list }</p> required <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.delete_group(account_id, group_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc delete-environment --group-id=1\n</code></pre></p> <pre><code>payload = {\n    'account_id': 1,\n    'name': '{{ group_name }}',\n    'id': 1,\n    'state':2,\n    'assign_by_default': False,\n    'sso_mapping_groups': []\n}\n</code></pre>"},{"location":"guide/cloud/#list_groups","title":"list_groups","text":"<p>List groups for a specific account and project</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_groups(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc list-groups\n</code></pre></p>"},{"location":"guide/cloud/#job","title":"Job","text":""},{"location":"guide/cloud/#create_job","title":"create_job","text":"<p>Create a job</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the job to create</p> required <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.create_job(account_id, project_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc create-credentials --payload='{\"account_id\": 1, \"project_id\": 1, \"id\": null, \"environment_id\": 1, \"name\": \"&lt;your-job-name&gt;\", \"dbt_version\": \"1.0.1\", \"triggers\": {\"github_webhook\": false, \"schedule\": false, \"custom_branch_only\": false}, \"execute_steps\": [\"dbt build\"], \"settings\": {\"threads\": 1, \"target_name\": \"default\"}, \"state\": 1, \"generate_docs\": false, \"schedule\": {\"date\": {\"type\": \"every_day\"}, \"time\": {\"type\": \"every_hour\", \"interval\": 1}}}'\n</code></pre></p> <pre><code>payload = {\n    'account_id': 1,\n    'project_id': 1,\n    'id': None,\n    'environment_id': 1,\n    'name': '&lt;your-job-name&gt;',\n    'dbt_version': '1.0.1',\n    'triggers': {\n    'github_webhook': False,\n    'schedule': False,\n    'custom_branch_only': False\n    },\n    'execute_steps': [\n        'dbt build'\n    ],\n    'settings': {\n    'threads': 1,\n        'target_name': 'default'\n    },\n    'state': 1,\n    'generate_docs': False,\n    'schedule': {\n        'date': {\n            'type': 'every_day'\n        },\n        'time': {\n            'type': 'every_hour',\n            'interval': 1\n        }\n    }\n}\n</code></pre>"},{"location":"guide/cloud/#delete_job","title":"delete_job","text":"<p>Delete job for a specified account</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>job_id</code> <code>int</code> <p>Numeric ID of the project to delete</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.delete_job(account_id, job_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc delete-environment --job-id=1\n</code></pre></p>"},{"location":"guide/cloud/#get_job","title":"get_job","text":"<p>Get a job by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>job_id</code> <code>int</code> <p>Numeric ID of the job to retrieve</p> required <code>order_by</code> <code>str</code> <p>Field to order the result by. Use - to indicate reverse order.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_job(account_id, job_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc get-job --job-id=1\n</code></pre></p>"},{"location":"guide/cloud/#list_jobs","title":"list_jobs","text":"<p>List jobs in an account or specific project.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>environment_id</code> <code>int</code> <p>Numeric ID of the environment to retrieve</p> <code>None</code> <code>project_id</code> <code>int or list</code> <p>The project ID or IDs</p> <code>None</code> <code>state</code> <code>int</code> <p>1 = active, 2 = deleted</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset to apply when listing runs. Use with limit to paginate results.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The limit to apply when listing runs. Use with offset to paginate results.</p> <code>None</code> <code>order_by</code> <code>str</code> <p>Field to order the result by. Use - to indicate reverse order.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_jobs(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc list-jobs\n</code></pre></p>"},{"location":"guide/cloud/#trigger_autoscaling_ci_job","title":"trigger_autoscaling_ci_job","text":"<p>Trigger an autoscaling CI job</p> <p>Info</p> <p>In the event your CI job is already running, this will do the following:</p> <ul> <li>If a new commit is created for the currently running job, cancel the   job and then trigger again</li> <li>If this is an entirely new pull request, clone the job and trigger</li> <li>This will also check to see if your account has met or exceeded the   allotted run slots.  In the event you have, a cloned job will   not be created and the existing job will be triggered.</li> </ul> <p>More info here</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>job_id</code> <code>int</code> <p>Numeric ID of the job to trigger</p> required <code>payload</code> <code>dict</code> <p>Payload required in triggering a job.  It's important that the payload consists of the following keys in order to mimic the native behavior of dbt Cloud's Slim CI functionality:</p> <ul> <li><code>git_sha</code></li> <li><code>cause</code></li> <li><code>schema_override</code></li> <li>Depending on your git provider, one of <code>github_pull_request_id</code>,   <code>gitlab_merge_request_id</code>, or <code>azure_pull_request_id</code></li> </ul> required <code>should_poll</code> <code>bool</code> <p>Poll until completion if <code>True</code>, completion is one of success, failure, or cancelled</p> <code>False</code> <code>poll_interval</code> <code>int</code> <p>Number of seconds to wait in between polling</p> <code>10</code> <code>delete_cloned_job</code> <code>bool</code> <p>Indicate if cloned job should be deleted after being triggered</p> <code>True</code> <code>max_run_slots</code> <code>int</code> <p>Number of run slots that should be available to this process.  This will limit the ability to run concurrent PRs up the the allocated run slots for your account.  When set to <code>None</code>, the <code>run_slots</code> allocated to your account will be used to determine if a job should be cloned.</p> <code>None</code>"},{"location":"guide/cloud/#trigger_job","title":"trigger_job","text":"<p>Trigger a job by its ID</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>job_id</code> <code>int</code> <p>Numeric ID of the job to trigger</p> required <code>payload</code> <code>dict</code> <p>Payload required for post request</p> required <code>should_poll</code> <code>bool</code> <p>Poll until completion if <code>True</code>, completion is one of success, failure, or cancelled</p> <code>True</code> <code>poll_interval</code> <code>int</code> <p>Number of seconds to wait in between polling</p> <code>10</code> <code>retries</code> <code>int</code> <p>Number of times to retry a failed job</p> <code>0</code>"},{"location":"guide/cloud/#trigger_job_from_failure","title":"trigger_job_from_failure","text":"<p>Trigger job from point of failure</p> <p>Use this method to retry a failed run for a job from the point of failure, if the run failed. Otherwise trigger a new run.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>job_id</code> <code>int</code> <p>Numeric ID of the job to trigger</p> required"},{"location":"guide/cloud/#update_job","title":"update_job","text":"<p>Update a job by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>job_id</code> <code>int</code> <p>Numeric ID of the job to retrieve</p> required <code>payload</code> <code>dict</code> <p>Payload required for post request</p> required"},{"location":"guide/cloud/#repository","title":"Repository","text":""},{"location":"guide/cloud/#create_repository","title":"create_repository","text":"<p>Create a repository</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the repository to create</p> required <p>Note</p> <p>After creating / updating a dbt Cloud repository's SSH key, you will need to add the generated key text as a deploy key to the target repository. This gives dbt Cloud permissions to read / write in the repository</p> <p>You can read more in the docs  # noqa: E501</p> <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.create_repository(account_id, project_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc create-repository --payload='{\"account_id\": 1, \"project_id\": 1, \"remote_url\": \"{{git_clone_url}}\", \"git_clone_strategy\": \"deploy_key\", \"github_installation_id\": null, \"token_str\": null}'\n</code></pre></p> <pre><code>payload = {\n    'account_id': 1,\n    'project_id': 1,\n    'remote_url':'{{git_clone_url}}',\n    'git_clone_strategy': 'deploy_key',\n    'github_installation_id': None,\n    'token_str': None\n}\n</code></pre>"},{"location":"guide/cloud/#delete_repository","title":"delete_repository","text":"<p>Delete repository for a specified account</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>repository_id</code> <code>int</code> <p>Numeric ID of the repository to delete</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.delete_repository(account_id, project_id, repository_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc delete-repository --repository-id=1\n</code></pre></p>"},{"location":"guide/cloud/#list_repositories","title":"list_repositories","text":"<p>List repositories for a specific account and project</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_repositories(account_id, project_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc list-repositories\n</code></pre></p>"},{"location":"guide/cloud/#update_repository","title":"update_repository","text":"<p>Update a connection</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project</p> required <code>repository_id</code> <code>int</code> <p>Numeric ID of the repository to update</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the repository to update</p> required"},{"location":"guide/cloud/#run","title":"Run","text":""},{"location":"guide/cloud/#cancel_run","title":"cancel_run","text":"<p>Cancel a run.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>run_id</code> <code>int</code> <p>Numeric ID of the run to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.cancel_run(account_id, run_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. ```bash dbtc cancel-run --account-id=1 --run-id=1</p>"},{"location":"guide/cloud/#get_most_recent_run","title":"get_most_recent_run","text":"<p>Get the most recent run</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>include_related</code> <code>list</code> <p>List of related fields to pull with the run. Valid values are <code>trigger</code>, <code>job</code>, <code>repository</code>, <code>debug_logs</code>, <code>run_steps</code>, and <code>environment</code>.</p> <code>None</code> <code>job_definition_id</code> <code>int</code> <p>Applies a filter to only return runs from the specified Job.</p> <code>None</code> <code>environment_id</code> <code>int</code> <p>Numeric ID of the environment</p> <code>None</code> <code>project_id</code> <code>int or list</code> <p>The project ID or IDs</p> <code>None</code> <code>deferring_run_id</code> <code>int</code> <p>Numeric ID of a deferred run</p> <code>None</code> <code>status</code> <code>str or list</code> <p>The status to apply when listing runs. Options include queued, starting, running, success, error, and cancelled</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_most_recent_run(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc get-most-recent-run\n</code></pre></p>"},{"location":"guide/cloud/#get_run","title":"get_run","text":"<p>Get a run by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>run_id</code> <code>int</code> <p>Numeric ID of the run to retrieve</p> required <code>include_related</code> <code>list</code> <p>List of related fields to pull with the run. Valid values are <code>trigger</code>, <code>job</code>, <code>repository</code>, <code>debug_logs</code>, <code>run_steps</code>, and <code>environment</code>.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_run(account_id, run_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc get-run --run-id=1\n</code></pre></p>"},{"location":"guide/cloud/#get_run_timing_details","title":"get_run_timing_details","text":"<p>Retrieves the timing details related to a run</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>run_id</code> <code>int</code> <p>Numeric ID of the run to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_run_timing_details(account_id, project_id, run_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc get-run-timing-details --run-id=1\n</code></pre></p>"},{"location":"guide/cloud/#list_runs","title":"list_runs","text":"<p>List runs in an account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>include_related</code> <code>list</code> <p>List of related fields to pull with the run. Valid values are <code>trigger</code>, <code>job</code>, <code>repository</code>, <code>debug_logs</code>, <code>run_steps</code>, and <code>environment</code>.</p> <code>None</code> <code>job_definition_id</code> <code>int</code> <p>Applies a filter to only return runs from the specified Job.</p> <code>None</code> <code>environment_id</code> <code>int</code> <p>Numeric ID of the environment</p> <code>None</code> <code>project_id</code> <code>int or list</code> <p>The project ID or IDs</p> <code>None</code> <code>deferring_run_id</code> <code>int</code> <p>Numeric ID of a deferred run</p> <code>None</code> <code>status</code> <code>str or list</code> <p>The status to apply when listing runs. Options include queued, starting, running, success, error, and cancelled</p> <code>None</code> <code>order_by</code> <code>str</code> <p>Field to order the result by. Use - to indicate reverse order.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset to apply when listing runs. Use with limit to paginate results.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The limit to apply when listing runs. Use with offset to paginate results.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_runs(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc list-runs\n</code></pre></p>"},{"location":"guide/cloud/#project","title":"Project","text":""},{"location":"guide/cloud/#create_project","title":"create_project","text":"<p>Create a project</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the project to create</p> required <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.create_project(account_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc create-project --payload='{\"id\": null, \"name\": \"{{project_name}}\", \"dbt_project_subdirectory\": null, \"account_id\": 1, \"connection_id\": null, \"repository_id\": null}'\n</code></pre></p> <pre><code>payload = {\n    'id': None,\n    'name': '{{project_name}}',\n    'dbt_project_subdirectory': None,\n    'account_id': 1,\n    'connection_id': None,\n    'repository_id': None\n}\n</code></pre>"},{"location":"guide/cloud/#delete_project","title":"delete_project","text":"<p>Delete project for a specified account</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project to delete</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.delete_project(account_id, project_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc delete-project\n</code></pre></p>"},{"location":"guide/cloud/#get_project","title":"get_project","text":"<p>Get a project by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_project(account_id, project_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc get-project\n</code></pre></p>"},{"location":"guide/cloud/#get_project_by_name","title":"get_project_by_name","text":"<p>Get a project by its name.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>Name of project to retrieve</p> required <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> <code>None</code> <code>account_name</code> <code>str</code> <p>Name of account to retrieve</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_project_by_name(account_id, project_name)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc get-project --project-name=name\n</code></pre></p>"},{"location":"guide/cloud/#list_projects","title":"list_projects","text":"<p>List projects for a specified account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>project_id</code> <code>int or list</code> <p>The project ID or IDs</p> <code>None</code> <code>state</code> <code>int</code> <p>1 = active, 2 = deleted</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset to apply when listing runs. Use with limit to paginate results.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The limit to apply when listing runs. Use with offset to paginate results.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_projects(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc list-projects\n</code></pre></p>"},{"location":"guide/cloud/#update_project","title":"update_project","text":"<p>Update project for a specified account</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>project_id</code> <code>int</code> <p>Numeric ID of the project to update</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the project to update</p> required"},{"location":"guide/cloud/#service-token","title":"Service Token","text":""},{"location":"guide/cloud/#assign_service_token_permissions","title":"assign_service_token_permissions","text":"<p>Assign permissions to a service token.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>service_token_id</code> <code>int</code> <p>Numeric ID of the service token</p> required <code>payload</code> <code>list</code> <p>List of dictionaries representing the permissions to assign</p> required <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.assign_service_token_permissions(account_id, service_token_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables have been set. <pre><code>dbtc assign-service-token-permissions --payload='[{\"service_token_id\": 1, \"account_id\": 1, \"permission_set\": \"job_viewer\", \"project_id\": 1, \"all_projects\": false}]'\n</code></pre></p> <pre><code>payload = [\n    {\n        'service_token_id': 1,\n        'account_id': 1,\n        'permission_set': 'job_viewer',\n        'project_id': 1,\n        'all_projects': False\n    },\n]\n</code></pre>"},{"location":"guide/cloud/#create_service_token","title":"create_service_token","text":"<p>Create a service token</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>payload</code> <code>dict</code> <p>Dictionary representing the service token to create</p> required <p>Note</p> <p>This request creates a service token, but does not assign permissions to it.  Permissions are assigned via the assign_service_token_permissions</p> <p>See the user tokens  # noqa: E501 and service tokens  # noqa: E501 documentation for more information.</p> <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.create_service_token(account_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc create-service-token --payload='{\"id\": null, \"name\": \"api-test\", \"state\": 1, \"account_id\": 1, \"access\": {\"admin\": {\"permissionSet\": \"admin\", \"projects\": [1]}, \"job_admin\": {\"permissionSet\": \"job_admin\", \"projects\": [1]}}}'\n</code></pre></p> <pre><code>payload = {\n    'id': None,\n    'name': 'api-test',\n    'state': 1,\n    'account_id': 1,\n    'access': {\n        'admin': {\n            'permissionSet': 'admin',\n            'projects': [\n                1\n            ]\n        },\n        'job_admin': {\n            'permissionSet': 'job_admin',\n            'projects': [\n                1\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"guide/cloud/#get_service_token","title":"get_service_token","text":"<p>Retrieves a service token.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>service_token_id</code> <code>int</code> <p>Numeric ID of the service token to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_service_toke (account_id, service_token_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc get-service-token --service-token-id=1\n</code></pre></p>"},{"location":"guide/cloud/#list_service_tokens","title":"list_service_tokens","text":"<p>List service tokens for a specific account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_service_tokens(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc list-service-tokens\n</code></pre></p>"},{"location":"guide/cloud/#list_service_token_permissions","title":"list_service_token_permissions","text":"<p>List service token permissions for a specific account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>service_token_id</code> <code>int</code> <p>Numeric ID of the service token to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_service_token_permissions(account_id, service_token_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc list-service-token-permissions --service-token-id=1\n</code></pre></p>"},{"location":"guide/cloud/#user","title":"User","text":""},{"location":"guide/cloud/#deactivate_user_license","title":"deactivate_user_license","text":"<p>Deactivate user license</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account</p> required <code>permission_id</code> <code>int</code> <p>Numeric ID of the permission that contains user you'd like to deactivate</p> required <p>Note</p> <p>Ensure the <code>groups</code> object contains all of a user's assigned group permissions. This request will fail if a user has already been deactivated.</p> <p>Examples:</p> PythonCLIPayload <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.deactivate_user_license(account_id, permission_id, payload)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc deactivate-user-license --permission_id=1 --payload='{\"license_type\": \"developer\", \"id\": 1, \"user_id\": 1, \"account_id\": 1, \"state\": 2, \"groups\": [{\"account_id\": 1, \"name\": \"test-group-with-sso-mappings\", \"id\": 1, \"state\": 1, \"assign_by_default\": false, \"sso_mapping_groups\": [\"something\"], \"group_permissions\": [{\"account_id\": 1, \"group_id\": 1, \"project_id\": null, \"all_projects\": true, \"permission_set\": \"analyst\", \"permission_level\": null, \"id\": \"{{group_permission_id}}\", \"state\": 1}]}], \"permission_statements\": [{\"permission\": \"invitations_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"license_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"environments_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"jobs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"runs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"metadata_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_develop\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"credentials_write\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"develop_access\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_write\", \"target_resource\": null, \"all_resources\": true}]}'\n</code></pre></p> <pre><code>payload = {\n    'license_type': 'developer',\n    'id': 1,\n    'user_id': 1,\n    'account_id': 1,\n    'state': 2,\n    'groups': [\n        {\n            'account_id': 1,\n            'name': 'test-group-with-sso-mappings',\n            'id': 1,\n            'state': 1,\n            'assign_by_default': False,\n            'sso_mapping_groups': [\n                'something'\n            ],\n            'group_permissions': [\n                {\n                    'account_id': 1,\n                    'group_id': 1,\n                    'project_id': None,\n                    'all_projects': True,\n                    'permission_set': 'analyst',\n                    'permission_level': None,\n                    'id': '{{group_permission_id}}',\n                    'state': 1\n                }\n            ]\n        }\n    ],\n    'permission_statements': [\n        {\n            'permission': 'invitations_read',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'license_read',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'projects_read',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'environments_read',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'jobs_read',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'runs_read',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'metadata_read',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'custom_environment_variables_read',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'projects_develop',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'credentials_write',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'develop_access',\n            'target_resource': None,\n            'all_resources': True\n        },\n        {\n            'permission': 'custom_environment_variables_write',\n            'target_resource': None,\n            'all_resources': True\n        }\n    ]\n}\n</code></pre>"},{"location":"guide/cloud/#get_user","title":"get_user","text":"<p>List invited users in an account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>user_id</code> <code>int</code> <p>Numeric ID of the user to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.get_user(account_id, user_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc get_user --user-id=1\n</code></pre></p>"},{"location":"guide/cloud/#list_invited_users","title":"list_invited_users","text":"<p>List invited users in an account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_invited_users(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc list-invited-users\n</code></pre></p>"},{"location":"guide/cloud/#list_users","title":"list_users","text":"<p>List users in an account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>Numeric ID of the account to retrieve</p> required <code>state</code> <code>int</code> <p>1 = active, 2 = deleted</p> <code>None</code> <code>limit</code> <code>int</code> <p>The limit to apply when listing runs. Use with offset to paginate results.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The offset to apply when listing runs. Use with limit to paginate results.</p> <code>None</code> <code>order_by</code> <code>str</code> <p>Field to order the result by. Use - to indicate reverse order.</p> <code>'email'</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.cloud.list_users(account_id)\n</code></pre></p> <p>Assuming that <code>DBT_CLOUD_ACCOUNT_ID</code> environment variable has been set. <pre><code>dbtc list-users\n</code></pre></p>"},{"location":"guide/intro/","title":"Introduction","text":""},{"location":"guide/intro/#python","title":"Python","text":""},{"location":"guide/intro/#class","title":"Class","text":"<p>The <code>dbtCloudClient</code> class is the main interface through which you will interact with dbt Cloud API endpoints.  The class accepts three optional arguments:</p> <ul> <li><code>api_key</code></li> <li><code>service_token</code></li> <li><code>host</code></li> </ul> <p>An <code>api_key</code> can be used to access endpoints from any version of the dbt Cloud API (v2 or v3).  The <code>service_token</code> can be used for either the dbt Cloud API or the Metadata API.  If you have the proper permissions, you would only need to pass a service token.</p> <pre><code>from dbtc import dbtCloudClient\n\nclient = dbtCloudClient(service_token='this-is-my-service-token')\n</code></pre> <p>Alternatively, you can set the following environment variables in place of passing the arguments to the class:</p> <ul> <li><code>api_key</code> --&gt; <code>DBT_CLOUD_API_KEY</code></li> <li><code>service_token</code> --&gt; <code>DBT_CLOUD_SERVICE_TOKEN</code></li> <li><code>host</code> --&gt; <code>DBT_CLOUD_HOST</code></li> </ul> <p>If you have set environment variables, and have the proper permissions, you'll be able to instantiate the <code>dbtCloudClient</code> class as follows:</p> <pre><code>from dbtc import dbtCloudClient\n\nclient = dbtCloudClient()\n</code></pre> <p>Info</p> <p>The <code>host</code> argument is only necessary for customers using dbt Cloud outside of the North America multi-tenant instance (see more info on dbt Cloud hosting)</p>"},{"location":"guide/intro/#interfaces","title":"Interfaces","text":"<p>The <code>dbtCloudClient</code> class contains two properties:</p> <ul> <li><code>cloud</code> - instance of the <code>_AdminClient</code> class, which contains methods to create, read, update, and delete dbt Cloud resources</li> <li><code>metadata</code> - instance of the <code>_MetadataClient</code> class, which contains methods to retrieve metadata generated from a dbt Cloud job run</li> </ul> <p><code>cloud</code></p> <pre><code>from dbtc import dbtCloudClient\n\n# Assuming we've set the `DBT_CLOUD_SERVICET_TOKEN` environment variable`\nclient = dbtCloudClient()\n\naccounts = client.cloud.list_accounts()\n</code></pre> <p><code>metadata</code></p> <pre><code>from dbtc import dbtCloudClient\n\nclient = dbtCloudClient()\nquery = '''\nquery ($environmentId: BigInt!, $first: Int!) {\n  environment(id: $environmentId) {\n    definition {\n      metrics(first: $first) {\n        edges {\n          node {\n            name\n            description\n            type\n            formula\n            filter\n            tags\n            parents {\n              name\n              resourceType\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'''\nvariables = {'environmentId': 1, 'first': 500}\ndata = client.metadata.query(query, variables)\n\n# Data will be in the edges key, which will be a list of nodes\nnodes = data['data']['definition']['metrics']['edges']\nfor node in nodes:\n    # node is a dictionary\n    node_name = node['name']\n    ...\n</code></pre>"},{"location":"guide/intro/#cli","title":"CLI","text":"<p>This package also comes with a command-line utility, <code>dbtc</code>.  All of the methods available through the <code>cloud</code> or <code>metadata</code> properties on the <code>dbtCloudClient</code> class are available through the command line as well.</p> <p>The command line interface also accepts additional environment variables:</p> <ul> <li><code>DBT_CLOUD_ACCOUNT_ID</code></li> <li><code>DBT_CLOUD_PROJECT_ID</code></li> </ul> <p>Setting these will reduce the amount of arguments you'll need to pass.</p> <pre><code>dbtc get-project --account-id=1 --project-id=1\n</code></pre> <p>Or, if you've set the <code>DBT_CLOUD_ACCOUNT_ID</code> and <code>DBT_CLOUD_PROJECT_ID</code> environment variables.</p> <pre><code>dbtc get-project\n</code></pre>"},{"location":"guide/metadata/","title":"Metadata","text":"<p>Every time dbt Cloud runs a project, it generates and stores information about the project. The metadata includes details about your project\u2019s models, sources, and other nodes along with their execution results. With the dbt Cloud Discovery API, you can query this comprehensive information to gain a better understanding of your DAG and the data it produces.</p> <p>By leveraging the metadata in dbt Cloud, you can create systems for data monitoring and alerting, lineage exploration, and automated reporting. This can help you improve data discovery, data quality, and pipeline operations within your organization.</p> <p>The <code>metadata</code> property on the <code>dbtCloudClient</code> class contains a single method, <code>query</code>, that allows a user to interact with the Discovery API.</p> <p>If you're unfamiliar either with the Schema to query or even how to write a GraphQL query, I highly recommend going to the dbt Cloud Discovery API playground.  You'll be able to interactively explore the Schema while watching it write a GraphQL query for you!</p>"},{"location":"guide/metadata/#usage","title":"Usage","text":"<p>The <code>metadata</code> property on the <code>dbtCloudClient</code> class has a single method to pass a <code>query</code> string and <code>variables</code> that will be submitted in the payload with the <code>query</code>.  It's important to note that as a default this package will use the beta endpoint at <code>https://metadata.cloud.getdbt.com/beta/graphql</code> (or your particular host).  As of this writing, there are many more beta fields that allow for a user to retrieve performance, lineage, recommendations, and much more!  If you don't want to use the beta endpoint, construct your <code>dbtCloudClient</code> as follows:</p> <p>Warning</p> <p>If you do end up not using the beta endpoint, only the <code>query</code> method will work properly.</p> <pre><code>from dbtc import dbtCloudClient\n\n# Assuming I have `DBT_CLOUD_SERVICE_TOKEN` as an env var\nclient = dbtCloudClient(use_beta_endpoint=False)\n\n# Now all calls to the metadata service will use https://metadata.&lt;host&gt;.com/graphql\nclient.metadata.query(...)\n</code></pre>"},{"location":"guide/metadata/#column_lineage","title":"column_lineage","text":"<p>Retrieve column lineage for a given node.</p> <p>Parameters:</p> Name Type Description Default <code>environment_id</code> <code>int</code> <p>The environment id.</p> required <code>node_unique_id</code> <code>str</code> <p>The unique id of the node.</p> required <code>max_depth</code> <code>int</code> <p>(int): The max depth to traverse the lineage. Defaults to None.</p> <code>None</code> <code>column_name</code> <code>str</code> <p>(str): The column name to filter by. Defaults to None.</p> <code>None</code> <code>is_error</code> <code>bool</code> <p>(bool): Whether to return only error nodes. Defaults to False.</p> <code>False</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.column_lineage(environment_id, \"model.tpch.dim_customers\")\n</code></pre></p> <pre><code>dbtc metadata column-lineage --environment-id 1 --unique-id \"model.tpch.dim_customers\"\n</code></pre>"},{"location":"guide/metadata/#longest_executed_models","title":"longest_executed_models","text":"<p>Retrieve the longest executed models for a given environment.</p> <p>Parameters:</p> Name Type Description Default <code>environment_id</code> <code>int</code> <p>The environment id.</p> required <code>start_date</code> <code>str</code> <p>The start date in the format YYYY-MM-DD.</p> required <code>end_date</code> <code>str</code> <p>The end date in the format YYYY-MM-DD.</p> required <code>limit</code> <code>int</code> <p>The max number of models to return. Defaults to 5.</p> <code>5</code> <code>job_limit</code> <code>int</code> <p>The max number of jobs to return for each model. Defaults to 5.</p> <code>5</code> <code>job_id</code> <code>int</code> <p>The job id to filter by. Defaults to None.</p> <code>None</code> <code>order_by</code> <code>str</code> <p>The order by clause. One of \"AVG\" or \"MAX\". Defaults to \"MAX\".</p> <code>'MAX'</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.longest_executed_models(environment_id, \"2024-01-23\", \"2024-01-24\")\n</code></pre></p> <pre><code>dbtc metadata longest-executed-models --environment-id 1 --start-date \"2024-01-23\" --end-date \"2024-01-24\"\n</code></pre>"},{"location":"guide/metadata/#mesh_projects","title":"mesh_projects","text":"<p>Retrieve mesh projects for a given account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>The account id.</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.mesh_projects(1)\n</code></pre></p> <pre><code>dbtc metadata mesh-projects --account-id 1\n</code></pre>"},{"location":"guide/metadata/#model_execution_history","title":"model_execution_history","text":"<p>Retrieve model execution history for a given environment.</p> <p>Parameters:</p> Name Type Description Default <code>environment_id</code> <code>int</code> <p>The environment id.</p> required <code>start_date</code> <code>str</code> <p>The start date in the format YYYY-MM-DD.</p> required <code>end_date</code> <code>str</code> <p>The end date in the format YYYY-MM-DD.</p> required <code>unique_id</code> <code>str</code> <p>The unique id of the model.</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.model_execution_history(1, \"2024-01-23\", \"2024-01-24\", \"model.tpch.dim_customers\")\n</code></pre></p> <pre><code>dbtc metadata model-execution-history --environment-id 1 --start-date \"2024-01-23\" --end-date \"2024-01-24\" --unique-id \"model.tpch.dim_customers\"\n</code></pre>"},{"location":"guide/metadata/#model_job_information","title":"model_job_information","text":"<p>Retrieve model job information for a given environment.</p> <p>Parameters:</p> Name Type Description Default <code>environment_id</code> <code>int</code> <p>The environment id.</p> required <code>start_date</code> <code>str</code> <p>The start date in the format YYYY-MM-DD.</p> required <code>end_date</code> <code>str</code> <p>The end date in the format YYYY-MM-DD.</p> required <code>unique_id</code> <code>str</code> <p>The unique id of the model.</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.model_job_information(1, \"2024-01-23\", \"2024-01-24\", \"model.tpch.dim_customers\")\n</code></pre></p> <pre><code>dbtc metadata model-job-information --environment-id 1 --start-date \"2024-01-23\" --end-date \"2024-01-24\" --unique-id \"model.tpch.dim_customers\"\n</code></pre>"},{"location":"guide/metadata/#most_executed_models","title":"most_executed_models","text":"<p>Retrieve the most executed models for a given environment.</p> <p>Parameters:</p> Name Type Description Default <code>environment_id</code> <code>int</code> <p>The environment id.</p> required <code>start_date</code> <code>str</code> <p>The start date in the format YYYY-MM-DD.</p> required <code>end_date</code> <code>str</code> <p>The end date in the format YYYY-MM-DD.</p> required <code>limit</code> <code>int</code> <p>The max number of models to return. Defaults to 5.</p> <code>5</code> <code>job_limit</code> <code>int</code> <p>The max number of jobs to return for each model. Defaults to 5.</p> <code>5</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.most_executed_models(1, \"2024-01-23\", \"2024-01-24\")\n</code></pre></p> <pre><code>dbtc metadata most-executed-models --environment-id 1 --start-date \"2024-01-23\" --end-date \"2024-01-24\"\n</code></pre>"},{"location":"guide/metadata/#most_failed_models","title":"most_failed_models","text":"<p>Retrieve the most failed models for a given environment.</p> <p>Parameters:</p> Name Type Description Default <code>environment_id</code> <code>int</code> <p>The environment id.</p> required <code>start_date</code> <code>str</code> <p>The start date in the format YYYY-MM-DD.</p> required <code>end_date</code> <code>str</code> <p>The end date in the format YYYY-MM-DD.</p> required <code>limit</code> <code>int</code> <p>The max number of models to return. Defaults to 5.</p> <code>5</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.most_failed_models(1, \"2024-01-23\", \"2024-01-24\")\n</code></pre></p> <pre><code>dbtc metadata most-failed-models --environment-id 1 --start-date \"2024-01-23\" --end-date \"2024-01-24\"\n</code></pre>"},{"location":"guide/metadata/#most_models_test_failures","title":"most_models_test_failures","text":"<p>Retrieve the most models with test failures for a given environment.</p> <p>Parameters:</p> Name Type Description Default <code>environment_id</code> <code>int</code> <p>The environment id.</p> required <code>start_date</code> <code>str</code> <p>The start date in the format YYYY-MM-DD.</p> required <code>end_date</code> <code>str</code> <p>The end date in the format YYYY-MM-DD.</p> required <code>limit</code> <code>int</code> <p>The max number of models to return. Defaults to 5.</p> <code>5</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.most_models_test_failures(1, \"2024-01-23\", \"2024-01-24\")\n</code></pre></p> <pre><code>dbtc metadata most-test-failures --environment-id 1 --start-date \"2024-01-23\" --end-date \"2024-01-24\"\n</code></pre>"},{"location":"guide/metadata/#public_models","title":"public_models","text":"<p>Retrieve public models for a given account.</p> <p>Parameters:</p> Name Type Description Default <code>account_id</code> <code>int</code> <p>The account id.</p> required <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.public_models(1)\n</code></pre></p> <pre><code>dbtc metadata public-models --account-id 1\n</code></pre>"},{"location":"guide/metadata/#query","title":"query","text":"<p>Query the Discovery API</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The GraphQL query to execute.</p> required <code>variables</code> <code>Dict</code> <p>Dictionary containing the variables to include in the payload of the request.  Defaults to None.</p> <code>None</code> <code>max_pages</code> <code>int</code> <p>The max number of pages to paginate through when Defaults to None.</p> <code>None</code> <code>paginated_request_to_list</code> <code>bool</code> <p>When paginating through a request, the elements of the list within each request will be combined into a single list of dictionaries. Defaults to True.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[List[Dict], Dict]</code> <p>Union[List[Dict], Dict]: description</p> <p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>query = '''\nquery ($environmentId: BigInt!, $first: Int!) {\nenvironment(id: $environmentId) {\n    definition {\n    metrics(first: $first) {\n        edges {\n        node {\n            name\n            description\n            type\n            formula\n            filter\n            tags\n            parents {\n            name\n            resourceType\n            }\n        }\n        }\n    }\n    }\n}\n}\n'''\nvariables = {'environmentId': 1, 'first': 500}\ndata = client.metadata.query(query, variables)\nclient.metadata.query(query, variables)\n</code></pre></p>"},{"location":"guide/metadata/#recommendations","title":"recommendations","text":"<p>Retrieve recommendations for a given environment.</p> <p>Parameters:</p> Name Type Description Default <code>environment_id</code> <code>int</code> <p>The environment id.</p> required <code>first</code> <code>int</code> <p>The max number of recommendations to return. Defaults to 10.</p> <code>500</code> <code>severity</code> <code>List[str]</code> <p>The severity levels to filter by. Defaults to None.</p> <code>None</code> <code>categories</code> <code>List[str]</code> <p>The categories to filter by. Defaults to None.</p> <code>None</code> <code>rule_names</code> <code>List[str]</code> <p>The rule names to filter by. Defaults to None.</p> <code>None</code> <code>unique_ids</code> <code>List[str]</code> <p>The unique ids to filter by. Defaults to None.</p> <code>None</code> <p>Examples:</p> PythonCLI <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.metadata.recommendations(1)\n</code></pre></p> <pre><code>dbtc metadata recommendations --environment-id 1\n</code></pre>"},{"location":"guide/restart_from_failure/","title":"Restart From Failure","text":"<p>Warning</p> <p>This feature within this package is no longer required as it's all done in a native way through dbt Cloud's user interface or through the administrative API</p> <p>Thank You!</p> <p>All credit, for both the words below as well as the code that enables this functionality, should be directed to @matt-winkler.  The initial work for this started with his incredible gist.</p>"},{"location":"guide/restart_from_failure/#intro","title":"Intro","text":""},{"location":"guide/restart_from_failure/#summary","title":"Summary","text":"<p>This library offers a convenient interface to restart your jobs from the point of failure.  At a high level, it will do the following:</p> <ul> <li>Inspect the <code>run_results.json</code> artifacts from the previous run to understand which nodes succeeded / failed</li> <li>Any steps that succeeded on the previous run are skipped</li> <li>Any steps that were skipped on the previous run (e.g. because they followed a failed / errored step) are repeated as-is</li> </ul>"},{"location":"guide/restart_from_failure/#background","title":"Background","text":"<p>dbt Cloud offers users the ability to run and monitor their data pipelines remotely via API endpoints. Each pipeline run produces metadata artifacts that provide rich information on the models run, success/failure status for each, timing, and more.</p>"},{"location":"guide/restart_from_failure/#why-pipelines-might-fail","title":"Why Pipelines Might Fail","text":"<p>There are a few scenarios in which the need to restart a job from failure occurs in practice:</p> <ul> <li>Database permission errors</li> <li>Code merged to production isn't properly tested (a related-but-separate problem with a distinct set of solutions)</li> <li>Data content changes (e.g. due to a problem in a raw data feed that wasn't historically present)</li> <li>Timeouts</li> </ul> <p>Despite our best intentions, the above can and will happen.</p>"},{"location":"guide/restart_from_failure/#how-can-we-respond-to-failures","title":"How can we Respond to Failures","text":"<p>When responding to failures in a particular area of the DAG, it's often expedient to avoid reprocessing data that's already been run, in particular for maintaining trust with stakeholders when pipelines are \"behind.\" In order to achieve this most efficiently and reliably, the solution should be programmatic, and contained with dbt's capabilities, versus expecting users to:</p> <ul> <li>Inspect the results of a run to identify the (potentially multiple) roots of failure points (e.g. the earliest failed dbt models or sources for a given run).</li> <li>Modify a job command (or create a new job) with the failure points from 1 and including the + syntax to run it's children.</li> <li>Ensure the job isn't triggered on an ongoing basis or otherwise put into the orchestration flow unintentionally.</li> </ul>"},{"location":"guide/restart_from_failure/#examples","title":"Examples","text":"PythonCLIGithub ActionResponse <pre><code>from dbtc import dbtCloudClient\n\n# Assumes I have DBT_CLOUD_SERVICE_TOKEN as an environment variable\nclient = dbtCloudClient()\n\naccount_id = 1\njob_id = 1\npayload = {'cause': 'Restarting from failure'}\n\nrun = client.cloud.trigger_job_from_failure(account_id, job_id, payload)\n</code></pre> <p>Assuming that <code>DBT_CLOUD_SERVICE_TOKEN</code> environment variable has been set. <pre><code>dbtc trigger-job-from-failure \\\n    --account-id 1 \\\n    --job-id 1 \\\n    --payload '{\"cause\": \"Restarting from failure\"}'\n</code></pre></p> <p>Required:  You'll need to create a secret in your repo called <code>DBT_CLOUD_SERVICE_TOKEN</code>.  The token can be obtained from dbt Cloud</p> <pre><code>name: Restart from Failure\non:\n  workflow_dispatch:\n\njobs:\n  restart:\n    runs-on: ubuntu-latest\n    env:\n      DBT_CLOUD_SERVICE_TOKEN: ${{ secrets.DBT_CLOUD_SERVICE_TOKEN }}\n      DBT_CLOUD_ACCOUNT_ID: 1\n      JOB_ID: 1\n    # Optional if statement to gate this to a particular user or users\n    if: github.actor == 'dpguthrie'\n    steps:\n      - uses: actions/checkout@v2\n      - uses: actions/setup-python@v2\n        with:\n          python-version: \"3.9.x\"\n\n      - name: Restart Job from Failure\n        run: |\n          pip install dbtc==0.3.3\n          dbtc trigger-job-from-failure \\\n              --job-id=$JOB_ID \\\n              --payload='{\"cause\": \"Restarting job from failure\"}' \\\n              --no-should-poll \\\n              --restart-from-failure\n</code></pre> <pre><code>{\n    'status': {\n        'code': 200,\n        'is_success': True,\n        'user_message': 'Success!',\n        'developer_message': ''\n    },\n    'data': {\n        'id': 78614274,\n        'trigger_id': 79329387,\n        'account_id': 1,\n        'environment_id': 1,\n        'project_id': 1,\n        'job_definition_id': 1,\n        'status': 1,\n        'dbt_version': '1.2.0-latest',\n        'git_branch': None,\n        'git_sha': None,\n        'status_message': None,\n        'owner_thread_id': None,\n        'executed_by_thread_id': None,\n        'deferring_run_id': None,\n        'artifacts_saved': False,\n        'artifact_s3_path': None,\n        'has_docs_generated': False,\n        'has_sources_generated': False,\n        'notifications_sent': False,\n        'blocked_by': [],\n        'scribe_enabled': True,\n        'created_at': '2022-08-31 02:18:57.855152+00:00',\n        'updated_at': '2022-08-31 02:18:57.855169+00:00',\n        'dequeued_at': None,\n        'started_at': None,\n        'finished_at': None,\n        'last_checked_at': None,\n        'last_heartbeat_at': None,\n        'should_start_at': None,\n        'trigger': {\n            'id': 79329387,\n            'cause': 'Just cause',\n            'job_definition_id': 1,\n            'git_branch': None,\n            'git_sha': None,\n            'azure_pull_request_id': None,\n            'github_pull_request_id': None,\n            'gitlab_merge_request_id': None,\n            'schema_override': None,\n            'dbt_version_override': None,\n            'threads_override': None,\n            'target_name_override': None,\n            'generate_docs_override': None,\n            'timeout_seconds_override': None,\n            'steps_override': ['dbt run -s bad_model --vars \\'{\"key\": \"value\"}\\''],\n            'created_at': '2022-08-31 02:18:57.846515+00:00',\n            'cause_humanized': 'Just cause',\n            'job': None\n        },\n        'job': {\n            'execution': {\n                'timeout_seconds': 0\n            },\n            'generate_docs': False,\n            'run_generate_sources': False,\n            'id': 1,\n            'account_id': 1,\n            'project_id': 1,\n            'environment_id': 1,\n            'name': 'Test 10 - Restart with Vars',\n            'dbt_version': None,\n            'created_at': '2022-08-29T14:02:57.378279Z',\n            'updated_at': '2022-08-29T14:06:31.485879Z',\n            'execute_steps': ['dbt run -s good_model bad_model --vars \\'{\"key\": \"value\"}\\''],\n            'state': 1,\n            'deactivated': False,\n            'run_failure_count': 0,\n            'deferring_job_definition_id': None,\n            'lifecycle_webhooks': False,\n            'lifecycle_webhooks_url': None,\n            'triggers': {\n                'github_webhook': False,\n                'git_provider_webhook': False,\n                'custom_branch_only': False,\n                'schedule': False\n            },\n            'settings': {\n                'threads': 4,\n                'target_name': 'default'\n            },\n            'schedule': {\n                'cron': '0 * * * 0,1,2,3,4,5,6',\n                'date': 'days_of_week',\n                'time': 'every_hour'\n            },\n            'is_deferrable': False\n        },\n        'environment': None,\n        'run_steps': [],\n        'status_humanized': 'Queued',\n        'in_progress': True,\n        'is_complete': False,\n        'is_success': False,\n        'is_error': False,\n        'is_cancelled': False,\n        'href': 'https://cloud.getdbt.com/#/accounts/43786/projects/146089/runs/78614274/',\n        'duration': '00:00:00',\n        'queued_duration': '00:00:00',\n        'run_duration': '00:00:00',\n        'duration_humanized': '0 minutes',\n        'queued_duration_humanized': '0 minutes',\n        'run_duration_humanized': '0 minutes',\n        'created_at_humanized': '0 minutes ago',\n        'finished_at_humanized': '0 minutes from now',\n        'job_id': 1,\n        'is_running': None\n    }\n}\n</code></pre>"},{"location":"guide/semantic_layer/","title":"Semantic Layer","text":"<p>The dbt Cloud Semantic Layer is used as an intermediary between your data platform and the various consumption points you have within your organization.  Metricflow, the underlying piece of technology within the Semantic Layer, is responsible for translating the request from a client application into SQL that the underlying data platform understands.  What this means for you?  Define your metrics in a single place - within your dbt project - and leverage that definition across your stack to enable any stakeholder, regardless of technical capability or preferred medium.</p> <p>This client has a convenient wrapper around the Semantic Layer GraphQL API and enables those that are using python to consume that governed set of metrics defined in your dbt project.</p> <p>If you're unfamiliar either with the Schema to query metrics defined in your project or even how to write a GraphQL query, I highly recommend going to the Semantic Layer GraphQL API playground.  You'll be able to interactively explore the Schema while watching it write a GraphQL query for you!</p>"},{"location":"guide/semantic_layer/#usage","title":"Usage","text":"<p>The <code>sl</code> property on the <code>dbtCloudClient</code> class contains the methods that allow for interaction with dbt Cloud's Semantic Layer.  The one requirement when initializing the class is to pass the environment ID that you've configured within dbt Cloud.  For example</p> <pre><code>from dbtc import dbtCloudClient\n\n# Assuming I have `DBT_CLOUD_SERVICE_TOKEN` as an env var\nclient = dbtCloudClient(environment_id=1)\n</code></pre> <p>Additionally, you'll want to be sure that you pass the appropriate host when initializing the class.  As a default, the host mapped to the North America region will be used.  More regions and their corresonding host values (see Access URL) can be found here</p> <pre><code>from dbtc import dbtCloudClient\n\n# Assuming I have `DBT_CLOUD_SERVICE_TOKEN` as an env var\nclient = dbtCloudClient(environment_id=1, host=\"emea.dbt.com\")\n</code></pre>"},{"location":"guide/semantic_layer/#list_dimensions","title":"list_dimensions","text":"<p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.sl.list_dimensions(metrics=[\"total_revenue\", \"total_profit\"])\n</code></pre></p>"},{"location":"guide/semantic_layer/#list_entities","title":"list_entities","text":"<p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.sl.list_entities(metrics=[\"total_revenue\", \"total_profit\"])\n</code></pre></p>"},{"location":"guide/semantic_layer/#list_measures","title":"list_measures","text":"<p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.sl.list_measures(metrics=[\"total_revenue\", \"total_profit\"])\n</code></pre></p>"},{"location":"guide/semantic_layer/#list_metrics","title":"list_metrics","text":"<p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.sl.list_metrics()\n</code></pre></p>"},{"location":"guide/semantic_layer/#list_metrics_for_dimensions","title":"list_metrics_for_dimensions","text":"<p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.sl.list_metrics_for_dimensions(\n    dimensions=[\"customer__region\", {\"name\": \"metric_time\": \"grain\": \"day\"}]\n)\n</code></pre></p>"},{"location":"guide/semantic_layer/#list_queryable_granularities","title":"list_queryable_granularities","text":"<p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.sl.list_queryable_granularities(metrics=[\"total_revenue\"])\n</code></pre></p>"},{"location":"guide/semantic_layer/#list_saved_queries","title":"list_saved_queries","text":"<p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.sl.list_saved_queries()\n</code></pre></p>"},{"location":"guide/semantic_layer/#list_dimension_values","title":"list_dimension_values","text":"<p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>client.sl.list_dimension_values(\n    group_by=[\"customer__region\"],\n    output_format=\"list\",\n)\n</code></pre></p>"},{"location":"guide/semantic_layer/#query","title":"query","text":"<p>Examples:</p> Python <p>Assuming that <code>client</code> is an instance of <code>dbtCloudClient</code> <pre><code>query_result = client.sl.query(\n    metrics=[\"]\n    group_by=[\"customer__region\"],\n)\n\n# query_result is an instance of QueryResult, data is in the `result` attribute\nquery_result.result # default will be a pandas.DataFrame\n\n# Also view the generated SQL\nquery_result.sql\n\n# And the query_id\nquery_result.query_id\n\n# Or do something with the status\nif query_result.status == \"SUCCESSFUL\":\n    ...\n</code></pre></p>"}]}