{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An unaffiliated python interface for dbt Cloud APIs Documentation : https://dbtc.dpguthrie.com Source Code : https://github.com/dpguthrie/dbtc V2 Docs : https://docs.getdbt.com/dbt-cloud/api-v2 V3 Docs (Unofficial) : https://documenter.getpostman.com/view/14183654/UVsSNiXC V4 Docs : https://docs.getdbt.com/dbt-cloud/api-v4 Overview \u00b6 dbtc is an unaffiliated python interface to various dbt Cloud API endpoints. This library acts as a convenient interface to two different APIs that dbt Cloud offers: Cloud API : This is a REST API that exposes endpoints that allow users to programatically create, read, update, and delete resources within their dbt Cloud Account. Metadata API : This is a GraphQL API that exposes metadata generated from a job run within dbt Cloud. Requirements \u00b6 Python 3.7+ Requests - The elegant and simple HTTP library for Python, built for human beings. sgqlc - Simple GraphQL Client Typer - Library for building CLI applications Installation \u00b6 pip install dbtc Successfully installed dbtc restart \u21bb Basic Usage \u00b6 Python \u00b6 The interface to both APIs are located in the dbtCloudClient class. The example below shows how you use the cloud property on an instance of the dbtCloudClient class to access methods that allow for programmatic control over dbt Cloud resources. from dbtc import dbtCloudClient client = dbtCloudClient () project = client . cloud . get_project ( account_id = 1 , project_id = 1 ) CLI \u00b6 All of the methods available via the dbtCloudClient class are also available through the command line via dbtc . The same code above can be written as follows using the CLI: dbtc get-project --account-id = 1 --project-id = 1 License \u00b6 This project is licensed under the terms of the MIT license.","title":"Home"},{"location":"#overview","text":"dbtc is an unaffiliated python interface to various dbt Cloud API endpoints. This library acts as a convenient interface to two different APIs that dbt Cloud offers: Cloud API : This is a REST API that exposes endpoints that allow users to programatically create, read, update, and delete resources within their dbt Cloud Account. Metadata API : This is a GraphQL API that exposes metadata generated from a job run within dbt Cloud.","title":"Overview"},{"location":"#requirements","text":"Python 3.7+ Requests - The elegant and simple HTTP library for Python, built for human beings. sgqlc - Simple GraphQL Client Typer - Library for building CLI applications","title":"Requirements"},{"location":"#installation","text":"pip install dbtc Successfully installed dbtc restart \u21bb","title":"Installation"},{"location":"#basic-usage","text":"","title":"Basic Usage"},{"location":"#python","text":"The interface to both APIs are located in the dbtCloudClient class. The example below shows how you use the cloud property on an instance of the dbtCloudClient class to access methods that allow for programmatic control over dbt Cloud resources. from dbtc import dbtCloudClient client = dbtCloudClient () project = client . cloud . get_project ( account_id = 1 , project_id = 1 )","title":"Python"},{"location":"#cli","text":"All of the methods available via the dbtCloudClient class are also available through the command line via dbtc . The same code above can be written as follows using the CLI: dbtc get-project --account-id = 1 --project-id = 1","title":"CLI"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 [0.2.2] - 2022-09-15 \u00b6 Fixed \u00b6 Global CLI args --warn-error and --use-experimental-parser were not being considered. If they were present in the command, the modified command would have been invalid. These are now included within the modified_command if present in the initial step's command. Added \u00b6 --full-refresh flag is now being pulled in the modified_command if present in the initial step's command. [0.2.1] - 2022-08-31 \u00b6 Fixed \u00b6 Checking for an invalid result \"skip\" instead of \"skipped\" when identifying nodes that need to be reran. [0.2.0] - 2022-08-30 \u00b6 Added \u00b6 The ability to restart a job from failure. The trigger_job method now accepts an argument restart_from_failure (default False ) that will determine whether or not the last run attempt for a job was unsuccessful - in the event it was, it will parse the steps within that job and find the nodes that it needs to rerun as well as any steps that were skipped entirely. Additional commands to the trigger_job method: should_poll - Indicate whether or not the method should poll for completion (default True ) poll_interval - How long in between polling requests (default 10 seconds) restart_from_failure - Described above trigger_on_failure_only - Only relevant when setting restart_from_failure to True . This has the effect, when set to True , of only triggering the job when the prior invocation was not successful. Otherwise, the function will exit prior to triggering the job (default False ) Logging to stderr when using the trigger_job method (internally using the rich package that comes when installing Typer ) Multiple tests for the restart_from_failure functionality Removed \u00b6 The trigger_job_and_poll method within the cloud property of the dbtCloudClient class. The polling functionality is now rolled up into the single trigger_job method with the argument should_poll (default is True ) [0.1.4] - 2022-07-11 \u00b6 Added \u00b6 get_model_by_environment to the metadata property meta field is now available when you query columns [0.1.3] - 2022-07-08 \u00b6 Added \u00b6 The metadata methods are now available via the CLI A status arg can now be used in the list_runs method on the cloud property [0.1.2] - 2022-06-30 \u00b6 Fixed \u00b6 The _dbt_cloud_request private method, which is used in the CLI, now only uses typer.echo to return data from a request. Changed \u00b6 The trigger_job_and_poll method now returns the Run , represented as a dict . It will no longer raise an exception if the result of the run is cancelled or error. [0.1.1] - 2022-05-16 \u00b6 Added \u00b6 The cloud property on the dbtCloudClient class now contains v3 endpoints [0.1.0] - 2022-05-13 \u00b6 Added \u00b6 dbtCloudClient class is the main interface to the dbt Cloud APIs. The cloud property contains methods that allow for programmatic access to different resources within dbt Cloud (e.g. dbtCloudClient().cloud.list_accounts() ). The metadata property contains methods that allow for retrieval of metadata related to a dbt Cloud job run (e.g. dbtCloudClient().metadata.get_models(job_id, run_id) ). dbtc is a command line interface to the methods on the dbtCloudClient class (e.g. dbtc list-accounts )","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#022-2022-09-15","text":"","title":"[0.2.2] - 2022-09-15"},{"location":"changelog/#fixed","text":"Global CLI args --warn-error and --use-experimental-parser were not being considered. If they were present in the command, the modified command would have been invalid. These are now included within the modified_command if present in the initial step's command.","title":"Fixed"},{"location":"changelog/#added","text":"--full-refresh flag is now being pulled in the modified_command if present in the initial step's command.","title":"Added"},{"location":"changelog/#021-2022-08-31","text":"","title":"[0.2.1] - 2022-08-31"},{"location":"changelog/#fixed_1","text":"Checking for an invalid result \"skip\" instead of \"skipped\" when identifying nodes that need to be reran.","title":"Fixed"},{"location":"changelog/#020-2022-08-30","text":"","title":"[0.2.0] - 2022-08-30"},{"location":"changelog/#added_1","text":"The ability to restart a job from failure. The trigger_job method now accepts an argument restart_from_failure (default False ) that will determine whether or not the last run attempt for a job was unsuccessful - in the event it was, it will parse the steps within that job and find the nodes that it needs to rerun as well as any steps that were skipped entirely. Additional commands to the trigger_job method: should_poll - Indicate whether or not the method should poll for completion (default True ) poll_interval - How long in between polling requests (default 10 seconds) restart_from_failure - Described above trigger_on_failure_only - Only relevant when setting restart_from_failure to True . This has the effect, when set to True , of only triggering the job when the prior invocation was not successful. Otherwise, the function will exit prior to triggering the job (default False ) Logging to stderr when using the trigger_job method (internally using the rich package that comes when installing Typer ) Multiple tests for the restart_from_failure functionality","title":"Added"},{"location":"changelog/#removed","text":"The trigger_job_and_poll method within the cloud property of the dbtCloudClient class. The polling functionality is now rolled up into the single trigger_job method with the argument should_poll (default is True )","title":"Removed"},{"location":"changelog/#014-2022-07-11","text":"","title":"[0.1.4] - 2022-07-11"},{"location":"changelog/#added_2","text":"get_model_by_environment to the metadata property meta field is now available when you query columns","title":"Added"},{"location":"changelog/#013-2022-07-08","text":"","title":"[0.1.3] - 2022-07-08"},{"location":"changelog/#added_3","text":"The metadata methods are now available via the CLI A status arg can now be used in the list_runs method on the cloud property","title":"Added"},{"location":"changelog/#012-2022-06-30","text":"","title":"[0.1.2] - 2022-06-30"},{"location":"changelog/#fixed_2","text":"The _dbt_cloud_request private method, which is used in the CLI, now only uses typer.echo to return data from a request.","title":"Fixed"},{"location":"changelog/#changed","text":"The trigger_job_and_poll method now returns the Run , represented as a dict . It will no longer raise an exception if the result of the run is cancelled or error.","title":"Changed"},{"location":"changelog/#011-2022-05-16","text":"","title":"[0.1.1] - 2022-05-16"},{"location":"changelog/#added_4","text":"The cloud property on the dbtCloudClient class now contains v3 endpoints","title":"Added"},{"location":"changelog/#010-2022-05-13","text":"","title":"[0.1.0] - 2022-05-13"},{"location":"changelog/#added_5","text":"dbtCloudClient class is the main interface to the dbt Cloud APIs. The cloud property contains methods that allow for programmatic access to different resources within dbt Cloud (e.g. dbtCloudClient().cloud.list_accounts() ). The metadata property contains methods that allow for retrieval of metadata related to a dbt Cloud job run (e.g. dbtCloudClient().metadata.get_models(job_id, run_id) ). dbtc is a command line interface to the methods on the dbtCloudClient class (e.g. dbtc list-accounts )","title":"Added"},{"location":"guide/cloud/","text":"Cloud \u00b6 The cloud property on the dbtCloudClient class contains methods that allow a user to perform CRUD operations against dbt Cloud resources. Account \u00b6 get_account \u00b6 Get an account by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_account ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-account get_account_by_name \u00b6 Get an account by its name. Parameters: Name Type Description Default account_name str Name of an account required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_account_by_name ( account_name ) dbtc get-account-by-name --account-name = name get_account_licenses \u00b6 List account licenses for a specified account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_account_licenses ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-account-licenses list_accounts \u00b6 List of accounts that your API Token is authorized to access. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_accounts () dbtc list-accounts Artifact \u00b6 get_run_artifact \u00b6 Fetch artifacts from a completed run. Once a run has completed, you can use this endpoint to download the manifest.json , run_results.json or catalog.json files from dbt Cloud. These artifacts contain information about the models in your dbt project, timing information around their execution, and a status message indicating the result of the model build. Note By default, this endpoint returns artifacts from the last step in the run. To list artifacts from other steps in the run, use the step query parameter described below. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required path str Paths are rooted at the target/ directory. Use manifest.json, catalog.json, or run_results.json to download dbt-generated artifacts for the run. required step str The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_run_artifact ( account_id , run_id , path ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-run-artifact --run-id = 1 --path = manifest.json list_run_artifacts \u00b6 Fetch a list of artifact files generated for a completed run. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required step str The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_run_artifacts ( account_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-environments --run-id = 1 Audit Log \u00b6 list_audit_logs \u00b6 List audit logs for a specific account Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required logged_at_start str Date to begin retrieving audit logs Format is yyyy-mm-dd None logged_at_end str Date to stop retrieving audit logs. Format is yyyy-mm-dd None offset int The offset to apply when listing runs. Use with limit to paginate results. None limit int The limit to apply when listing runs. Use with offset to paginate results. None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_audit_logs ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-audit-logs Connection \u00b6 create_adapter \u00b6 Create an adapter Note This is a prerequisite for creating a Databricks connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the adapter to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_adapter ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-adapter --payload = '{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 payload = { 'id' : None , 'account_id' : 1 , 'created_by_id' : 1 , 'project_id' : 1 , 'state' : 1 , 'adapter_version' : 'databricks_spark_v0' , } create_connection \u00b6 Create a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the connection to create required Examples: Python CLI Snowflake Bigquery Redshift Assuming that client is an instance of dbtCloudClient client . cloud . create_connection ( account_id , project_id , payload ) dbtc create-connection --payload = '{\"id\": null, \"name\": \"<connection-name>\", \"type\": \"redshift\", \"details\": {\"hostname\": \"<hostname>\", \"port\": 5439, \"dbname\": \"<your-db-name>\", \"tunnel_enabled\": false}, \"state\": 1, \"account_id\": 1, \"project_id\": 1}' # noqa: E501 payload = { 'id' : None , 'name' : 'Test' , 'type' : 'snowflake' , 'details' : { 'account' : snowflake_account , 'role' : snowflake_role , 'database' : snowflake_database , 'warehouse' : snowflake_warehouse , 'oauth_client_id' : None , 'oauth_client_secret' : None , 'client_session_keep_alive' : False , 'allow_sso' : False , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } payload = { 'id' : None , 'name' : '<test-bigquery-connection>' , 'type' : 'bigquery' , 'details' : { 'retries' : 1 , 'maximum_bytes_billed' : 0 , 'locaiton' : None , 'timeout_seconds' : 300 , 'project_id' : google_cloud_project_id , 'private_key_id' : service_account_private_key_id , 'private_key' : '-----BEGIN PRIVATE KEY----' , 'client_email' : 'service_account_email@gmail.com' , 'client_id' : '<service-account-client-id' , 'auth_uri' : 'https://accounts.google.com/o/oauth2/auth' , 'token_uri' : 'https://oauth2.googleapis.com/token' , 'auth_provider_x509_cert_url' : 'https://www.googleapiscom/robot/v1/metadata/x509/<service-account-email>' , 'application_id' : None , 'application_secret' : None , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } payload = { 'id' : None , 'name' : '<connection-name>' , 'type' : 'redshift' , 'details' : { 'hostname' : '<hostname>' , 'port' : 5439 , 'dbname' : '<your-db-name>' , 'tunnel_enabled' : False , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } delete_connection \u00b6 Delete a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required connection_id int Numeric ID of the connection to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_connection ( account_id , project_id , connection_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-connection --connection-id = 1 list_connections \u00b6 List connections for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_connections ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-connections test_connection \u00b6 Test a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the connection to test required update_connection \u00b6 Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required connection_id int Numeric ID of the connection to update required payload dict Dictionary representing the connection to update required Credentials \u00b6 create_credentials \u00b6 Create credentials Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the credentials to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_credentials ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 payload = { 'id' : None , 'account_id' : 1 , 'created_by_id' : 1 , 'project_id' : 1 , 'state' : 1 , 'adapter_version' : 'databricks_spark_v0' , } list_credentials \u00b6 List credentials for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_credentials ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-credentials update_credentials \u00b6 Update credentials Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required credentials_id int Numeric ID of the credentials to update required payload dict Dictionary representing the credentials to update required Environment \u00b6 create_environment \u00b6 Create an environment Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the environment to create required delete_environment \u00b6 Delete job for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required environment_id int Numeric ID of the environment to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_environment ( account_id , project_id , environment_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-environment --environment-id = 1 list_environments \u00b6 List environments for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_environments ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-environments update_environment \u00b6 Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required environment_id int Numeric ID of the environment to update required payload dict Dictionary representing the environment to update required Environment Variables \u00b6 create_environment_variables \u00b6 Create environment variabless Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the environment variables to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_environment_variables ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"env_var\": {\"name\": \"DBT_ENV_TEST\", \"ids\": [], \"new_name\": \"DBT_ENV_TEST\", \"project\": \"foo\", \"{{development_environment_name}}\": \"dev_value\", \"{{deployment_environment_name}}\": \"deploy_value\"}}' payload = { 'env_var' : { 'name' : 'DBT_ENV_TEST' , 'ids' : [], 'new_name' : 'DBT_ENV_TEST' , 'project' : 'foo' , '{{development_environment_name}}' : 'dev_value' , '{{deployment_environment_name}}' : 'deploy_value' } } delete_environment_variables \u00b6 Delete environment variables for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload Dict Dictionary representing environment variables to delete required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . delete_environment_variables ( account_id , project_id , environment_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-environment --payload = '{\"name\": \"DBT_MY_AWESOME_VARIABLE\"}' payload = { 'name' : 'DBT_MY_AWESOME_VARIABLE' } Feature Flags \u00b6 list_feature_flags \u00b6 List feature flags for a specific account Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_feature_flags ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-feature-flags Group \u00b6 assign_group_permissions \u00b6 Assign group permissions Parameters: Name Type Description Default account_id int Numeric ID of the account required group_id int Numeric ID of the group required payload dict Dictionary representing the group to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . assign_service_token_permissions ( account_id , group_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-group-permissions --payload = '[{\"group_id\": 1, \"account_id\": 1, \"permission_set\": \"analyst\", \"project_id\": 1, \"all_projects\": false}]' payload = [ { 'group_id' : 1 , 'account_id' : 1 , 'permission_set' : 'analyst' , 'project_id' : 1 , 'all_projects' : False }, ] assign_user_to_group \u00b6 Assign a user to a group Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the user to assign required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . assign_user_to_group ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-user-to-group --payload = '{\"user_id\": 1, \"desired_group_ids\": [1]}' payload = { 'user_id' : 1 , 'desired_group_ids' : [ 1 ], } create_user_group \u00b6 Create a user group Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the group to create required Note The group_name is the name of the dbt Cloud group. The list of sso_mapping_groups are string values that dbt Cloud will attempt to match with incoming information from your identity provider at login time, in order to assign the group with group_name to the user. Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_user_group ( account_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-user-group --payload = '{\"account_id\": 1, \"name\": \"{{group_name}}\", \"assign_by_default\": false, \"sso_mapping_groups\": [\"mapping_group_1\"]}' payload = { 'account_id' : 1 , 'name' : '{{group_name}}' , 'assign_by_default' : False , 'sso_mapping_groups' :[ 'mapping_group_1' ] } delete_user_group \u00b6 Delete group for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required group_id int Numeric ID of the group to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_group ( account_id , group_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --group-id = 1 list_groups \u00b6 List groups for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_groups ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-groups Job \u00b6 create_job \u00b6 Create a job Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the job to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_job ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"account_id\": 1, \"project_id\": 1, \"id\": null, \"environment_id\": 1, \"name\": \"<your-job-name>\", \"dbt_version\": \"1.0.1\", \"triggers\": {\"github_webhook\": false, \"schedule\": false, \"custom_branch_only\": false}, \"execute_steps\": [\"dbt build\"], \"settings\": {\"threads\": 1, \"target_name\": \"default\"}, \"state\": 1, \"generate_docs\": false, \"schedule\": {\"date\": {\"type\": \"every_day\"}, \"time\": {\"type\": \"every_hour\", \"interval\": 1}}}' payload = { 'account_id' : 1 , 'project_id' : 1 , 'id' : None , 'environment_id' : 1 , 'name' : '<your-job-name>' , 'dbt_version' : '1.0.1' , 'triggers' : { 'github_webhook' : False , 'schedule' : False , 'custom_branch_only' : False }, 'execute_steps' : [ 'dbt build' ], 'settings' : { 'threads' : 1 , 'target_name' : 'default' }, 'state' : 1 , 'generate_docs' : False , 'schedule' : { 'date' : { 'type' : 'every_day' }, 'time' : { 'type' : 'every_hour' , 'interval' : 1 } } } delete_job \u00b6 Delete job for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required job_id int Numeric ID of the project to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_job ( account_id , job_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --job-id = 1 get_job \u00b6 Get a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to retrieve required order_by str Field to order the result by. Use - to indicate reverse order. None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_job ( account_id , job_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-job --job-id = 1 list_jobs \u00b6 List jobs in an account or specific project. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required order_by str Field to order the result by. Use - to indicate reverse order. None project_id int Numeric ID of the project containing jobs None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_jobs ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-jobs trigger_job \u00b6 Trigger a job by its ID Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to trigger required payload dict Payload required for post request required should_poll bool Poll until completion if True , completion is one of success, failure, or cancelled True poll_interval int Number of seconds to wait in between polling 10 restart_from_failure bool Restart your job from the point of failure False trigger_on_failure_only bool Only relevant when setting restart_from_failure to True. This has the effect of only triggering the job when the prior invocation was not successful. Otherwise, the function will exit prior to triggering the job. False update_job \u00b6 Update a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to retrieve required payload dict Payload required for post request required Repository \u00b6 create_repository \u00b6 Create a repository Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the repository to create required Note After creating / updating a dbt Cloud repository's SSH key, you will need to add the generated key text as a deploy key to the target repository. This gives dbt Cloud permissions to read / write in the repository You can read more in the docs # noqa: E501 Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_repository ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-repository --payload = '{\"account_id\": 1, \"project_id\": 1, \"remote_url\": \"{{git_clone_url}}\", \"git_clone_strategy\": \"deploy_key\", \"github_installation_id\": null, \"token_str\": null}' payload = { 'account_id' : 1 , 'project_id' : 1 , 'remote_url' : '{{git_clone_url}}' , 'git_clone_strategy' : 'deploy_key' , 'github_installation_id' : None , 'token_str' : None } delete_repository \u00b6 Delete repository for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required repository_id int Numeric ID of the repository to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_repository ( account_id , project_id , repository_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-repository --repository-id = 1 list_repositories \u00b6 List repositories for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_repositories ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-repositories update_repository \u00b6 Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required repository_id int Numeric ID of the repository to update required payload dict Dictionary representing the repository to update required Run \u00b6 cancel_run \u00b6 Cancel a run. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . cancel_run ( account_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. ```bash dbtc cancel-run --account-id=1 --run-id=1 get_run \u00b6 Get a run by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required include_related list List of related fields to pull with the run. Valid values are trigger , job , repository , debug_logs , run_steps , and environment . None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_run ( account_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-run --run-id = 1 get_run_timing_details \u00b6 Retrieves the timing details related to a run Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_run_timing_details ( account_id , project_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc get-run-timing-details --run-id = 1 get_run_v4 \u00b6 Retrieves the details of an existing run with the given run_id. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_run_v4 ( account_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --run-id = 1 list_runs \u00b6 List runs in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required include_related list List of related fields to pull with the run. Valid values are trigger , job , repository , debug_logs , run_steps , and environment . None job_definition_id int Applies a filter to only return runs from the specified Job. None order_by str Field to order the result by. Use - to indicate reverse order. None offset int The offset to apply when listing runs. Use with limit to paginate results. None limit int The limit to apply when listing runs. Use with offset to paginate results. None status str The status to apply when listing runs. Options include queued, starting, running, success, error, and cancelled None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_runs ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-runs list_runs_v4 \u00b6 Returns a list of runs in the account. The runs are returned sorted by creation date, with the most recent run appearing first. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required limit int A limit on the number of objects to be returned, between 1 and 100. None environment str A filter on the list based on the object's environment_id field. None project str A filter on the list based on the object's project_id field. None job str A filter on the list based on the object's job_id field. None status str A filter on the list based on the object's status field. Enum: \"Queued\" \"Starting\" \"Running\" \"Succeeded\" \"Failed\" \"Canceled\" None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_runs_v4 ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-runs-v4 Project \u00b6 create_project \u00b6 Create a project Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the project to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_project ( account_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-project --payload = '{\"id\": null, \"name\": \"{{project_name}}\", \"dbt_project_subdirectory\": null, \"account_id\": 1, \"connection_id\": null, \"repository_id\": null}' payload = { 'id' : None , 'name' : '{{project_name}}' , 'dbt_project_subdirectory' : None , 'account_id' : 1 , 'connection_id' : None , 'repository_id' : None } delete_project \u00b6 Delete project for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_project ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-project get_project \u00b6 Get a project by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_project ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc get-project get_project_by_name \u00b6 Get a project by its name. Parameters: Name Type Description Default project_name str Name of project to retrieve required account_id int Numeric ID of the account to retrieve None account_name str Name of account to retrieve None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_project ( \"name\" ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-project --project-name = name list_projects \u00b6 List projects for a specified account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_projects ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-projects update_project \u00b6 Update project for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project to update required payload dict Dictionary representing the project to update required Service Token \u00b6 assign_service_token_permissions \u00b6 Assign permissions to a service token. Parameters: Name Type Description Default account_id int Numeric ID of the account required service_token_id int Numeric ID of the service token required payload list List of dictionaries representing the permissions to assign required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . assign_service_token_permissions ( account_id , service_token_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-service-token-permissions --payload = '[{\"service_token_id\": 1, \"account_id\": 1, \"permission_set\": \"job_viewer\", \"project_id\": 1, \"all_projects\": false}]' payload = [ { 'service_token_id' : 1 , 'account_id' : 1 , 'permission_set' : 'job_viewer' , 'project_id' : 1 , 'all_projects' : False }, ] create_service_token \u00b6 Create a service token Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the service token to create required Note This request creates a service token, but does not assign permissions to it. Permissions are assigned via the assign_service_token_permissions See the user tokens # noqa: E501 and service tokens # noqa: E501 documentation for more information. Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_service_token ( account_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-service-token --payload = '{\"id\": null, \"name\": \"api-test\", \"state\": 1, \"account_id\": 1, \"access\": {\"admin\": {\"permissionSet\": \"admin\", \"projects\": [1]}, \"job_admin\": {\"permissionSet\": \"job_admin\", \"projects\": [1]}}}' payload = { 'id' : None , 'name' : 'api-test' , 'state' : 1 , 'account_id' : 1 , 'access' : { 'admin' : { 'permissionSet' : 'admin' , 'projects' : [ 1 ] }, 'job_admin' : { 'permissionSet' : 'job_admin' , 'projects' : [ 1 ] } } } get_service_token \u00b6 Retrieves a service token. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required service_token_id int Numeric ID of the service token to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_service_toke ( account_id , service_token_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-service-token --service-token-id = 1 list_service_tokens \u00b6 List service tokens for a specific account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_service_tokens ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-service-tokens list_service_token_permissions \u00b6 List service token permissions for a specific account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required service_token_id int Numeric ID of the service token to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_service_token_permissions ( account_id , service_token_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-service-token-permissions --service-token-id = 1 User \u00b6 deactivate_user_license \u00b6 Deactivate user license Parameters: Name Type Description Default account_id int Numeric ID of the account required permission_id int Numeric ID of the permission that contains user you'd like to deactivate required Note Ensure the groups object contains all of a user's assigned group permissions. This request will fail if a user has already been deactivated. Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . deactivate_user_license ( account_id , permission_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc deactivate-user-license --permission_id = 1 --payload = '{\"license_type\": \"developer\", \"id\": 1, \"user_id\": 1, \"account_id\": 1, \"state\": 2, \"groups\": [{\"account_id\": 1, \"name\": \"test-group-with-sso-mappings\", \"id\": 1, \"state\": 1, \"assign_by_default\": false, \"sso_mapping_groups\": [\"something\"], \"group_permissions\": [{\"account_id\": 1, \"group_id\": 1, \"project_id\": null, \"all_projects\": true, \"permission_set\": \"analyst\", \"permission_level\": null, \"id\": \"{{group_permission_id}}\", \"state\": 1}]}], \"permission_statements\": [{\"permission\": \"invitations_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"license_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"environments_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"jobs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"runs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"metadata_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_develop\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"credentials_write\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"develop_access\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_write\", \"target_resource\": null, \"all_resources\": true}]}' payload = { 'license_type' : 'developer' , 'id' : 1 , 'user_id' : 1 , 'account_id' : 1 , 'state' : 2 , 'groups' : [ { 'account_id' : 1 , 'name' : 'test-group-with-sso-mappings' , 'id' : 1 , 'state' : 1 , 'assign_by_default' : False , 'sso_mapping_groups' : [ 'something' ], 'group_permissions' : [ { 'account_id' : 1 , 'group_id' : 1 , 'project_id' : None , 'all_projects' : True , 'permission_set' : 'analyst' , 'permission_level' : None , 'id' : '{{group_permission_id}}' , 'state' : 1 } ] } ], 'permission_statements' : [ { 'permission' : 'invitations_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'license_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'projects_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'environments_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'jobs_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'runs_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'metadata_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'custom_environment_variables_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'projects_develop' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'credentials_write' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'develop_access' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'custom_environment_variables_write' , 'target_resource' : None , 'all_resources' : True } ] } get_user \u00b6 List invited users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required user_id int Numeric ID of the user to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_user ( account_id , user_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get_user --user-id = 1 list_invited_users \u00b6 List invited users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_invited_users ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-invited-users list_users \u00b6 List users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required limit int The limit to apply when listing runs. Use with offset to paginate results. None offset int The offset to apply when listing runs. Use with limit to paginate results. None order_by str Field to order the result by. Use - to indicate reverse order. 'email' Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_users ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-users","title":"Cloud"},{"location":"guide/cloud/#cloud","text":"The cloud property on the dbtCloudClient class contains methods that allow a user to perform CRUD operations against dbt Cloud resources.","title":"Cloud"},{"location":"guide/cloud/#account","text":"","title":"Account"},{"location":"guide/cloud/#get_account","text":"Get an account by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_account ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-account","title":"get_account"},{"location":"guide/cloud/#get_account_by_name","text":"Get an account by its name. Parameters: Name Type Description Default account_name str Name of an account required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_account_by_name ( account_name ) dbtc get-account-by-name --account-name = name","title":"get_account_by_name"},{"location":"guide/cloud/#get_account_licenses","text":"List account licenses for a specified account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_account_licenses ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-account-licenses","title":"get_account_licenses"},{"location":"guide/cloud/#list_accounts","text":"List of accounts that your API Token is authorized to access. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_accounts () dbtc list-accounts","title":"list_accounts"},{"location":"guide/cloud/#artifact","text":"","title":"Artifact"},{"location":"guide/cloud/#get_run_artifact","text":"Fetch artifacts from a completed run. Once a run has completed, you can use this endpoint to download the manifest.json , run_results.json or catalog.json files from dbt Cloud. These artifacts contain information about the models in your dbt project, timing information around their execution, and a status message indicating the result of the model build. Note By default, this endpoint returns artifacts from the last step in the run. To list artifacts from other steps in the run, use the step query parameter described below. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required path str Paths are rooted at the target/ directory. Use manifest.json, catalog.json, or run_results.json to download dbt-generated artifacts for the run. required step str The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_run_artifact ( account_id , run_id , path ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-run-artifact --run-id = 1 --path = manifest.json","title":"get_run_artifact"},{"location":"guide/cloud/#list_run_artifacts","text":"Fetch a list of artifact files generated for a completed run. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required step str The index of the Step in the Run to query for artifacts. The first step in the run has the index 1. If the step parameter is omitted, then this endpoint will return the artifacts compiled for the last step in the run. None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_run_artifacts ( account_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-environments --run-id = 1","title":"list_run_artifacts"},{"location":"guide/cloud/#audit-log","text":"","title":"Audit Log"},{"location":"guide/cloud/#list_audit_logs","text":"List audit logs for a specific account Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required logged_at_start str Date to begin retrieving audit logs Format is yyyy-mm-dd None logged_at_end str Date to stop retrieving audit logs. Format is yyyy-mm-dd None offset int The offset to apply when listing runs. Use with limit to paginate results. None limit int The limit to apply when listing runs. Use with offset to paginate results. None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_audit_logs ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-audit-logs","title":"list_audit_logs"},{"location":"guide/cloud/#connection","text":"","title":"Connection"},{"location":"guide/cloud/#create_adapter","text":"Create an adapter Note This is a prerequisite for creating a Databricks connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the adapter to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_adapter ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-adapter --payload = '{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 payload = { 'id' : None , 'account_id' : 1 , 'created_by_id' : 1 , 'project_id' : 1 , 'state' : 1 , 'adapter_version' : 'databricks_spark_v0' , }","title":"create_adapter"},{"location":"guide/cloud/#create_connection","text":"Create a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the connection to create required Examples: Python CLI Snowflake Bigquery Redshift Assuming that client is an instance of dbtCloudClient client . cloud . create_connection ( account_id , project_id , payload ) dbtc create-connection --payload = '{\"id\": null, \"name\": \"<connection-name>\", \"type\": \"redshift\", \"details\": {\"hostname\": \"<hostname>\", \"port\": 5439, \"dbname\": \"<your-db-name>\", \"tunnel_enabled\": false}, \"state\": 1, \"account_id\": 1, \"project_id\": 1}' # noqa: E501 payload = { 'id' : None , 'name' : 'Test' , 'type' : 'snowflake' , 'details' : { 'account' : snowflake_account , 'role' : snowflake_role , 'database' : snowflake_database , 'warehouse' : snowflake_warehouse , 'oauth_client_id' : None , 'oauth_client_secret' : None , 'client_session_keep_alive' : False , 'allow_sso' : False , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } payload = { 'id' : None , 'name' : '<test-bigquery-connection>' , 'type' : 'bigquery' , 'details' : { 'retries' : 1 , 'maximum_bytes_billed' : 0 , 'locaiton' : None , 'timeout_seconds' : 300 , 'project_id' : google_cloud_project_id , 'private_key_id' : service_account_private_key_id , 'private_key' : '-----BEGIN PRIVATE KEY----' , 'client_email' : 'service_account_email@gmail.com' , 'client_id' : '<service-account-client-id' , 'auth_uri' : 'https://accounts.google.com/o/oauth2/auth' , 'token_uri' : 'https://oauth2.googleapis.com/token' , 'auth_provider_x509_cert_url' : 'https://www.googleapiscom/robot/v1/metadata/x509/<service-account-email>' , 'application_id' : None , 'application_secret' : None , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , } payload = { 'id' : None , 'name' : '<connection-name>' , 'type' : 'redshift' , 'details' : { 'hostname' : '<hostname>' , 'port' : 5439 , 'dbname' : '<your-db-name>' , 'tunnel_enabled' : False , }, 'state' : 1 , 'account_id' : 1 , 'project_id' : 1 , }","title":"create_connection"},{"location":"guide/cloud/#delete_connection","text":"Delete a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required connection_id int Numeric ID of the connection to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_connection ( account_id , project_id , connection_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-connection --connection-id = 1","title":"delete_connection"},{"location":"guide/cloud/#list_connections","text":"List connections for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_connections ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-connections","title":"list_connections"},{"location":"guide/cloud/#test_connection","text":"Test a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the connection to test required","title":"test_connection"},{"location":"guide/cloud/#update_connection","text":"Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required connection_id int Numeric ID of the connection to update required payload dict Dictionary representing the connection to update required","title":"update_connection"},{"location":"guide/cloud/#credentials","text":"","title":"Credentials"},{"location":"guide/cloud/#create_credentials","text":"Create credentials Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the credentials to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_credentials ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"id\": null, \"account_id\": 1, \"created_by_id\": 1, \"project_id\": 1, \"state\": 1, \"adapter_version\": \"databricks_spark_v0\"}' # noqa: E501 payload = { 'id' : None , 'account_id' : 1 , 'created_by_id' : 1 , 'project_id' : 1 , 'state' : 1 , 'adapter_version' : 'databricks_spark_v0' , }","title":"create_credentials"},{"location":"guide/cloud/#list_credentials","text":"List credentials for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_credentials ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-credentials","title":"list_credentials"},{"location":"guide/cloud/#update_credentials","text":"Update credentials Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required credentials_id int Numeric ID of the credentials to update required payload dict Dictionary representing the credentials to update required","title":"update_credentials"},{"location":"guide/cloud/#environment","text":"","title":"Environment"},{"location":"guide/cloud/#create_environment","text":"Create an environment Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the environment to create required","title":"create_environment"},{"location":"guide/cloud/#delete_environment","text":"Delete job for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required environment_id int Numeric ID of the environment to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_environment ( account_id , project_id , environment_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-environment --environment-id = 1","title":"delete_environment"},{"location":"guide/cloud/#list_environments","text":"List environments for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_environments ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-environments","title":"list_environments"},{"location":"guide/cloud/#update_environment","text":"Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required environment_id int Numeric ID of the environment to update required payload dict Dictionary representing the environment to update required","title":"update_environment"},{"location":"guide/cloud/#environment-variables","text":"","title":"Environment Variables"},{"location":"guide/cloud/#create_environment_variables","text":"Create environment variabless Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the environment variables to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_environment_variables ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"env_var\": {\"name\": \"DBT_ENV_TEST\", \"ids\": [], \"new_name\": \"DBT_ENV_TEST\", \"project\": \"foo\", \"{{development_environment_name}}\": \"dev_value\", \"{{deployment_environment_name}}\": \"deploy_value\"}}' payload = { 'env_var' : { 'name' : 'DBT_ENV_TEST' , 'ids' : [], 'new_name' : 'DBT_ENV_TEST' , 'project' : 'foo' , '{{development_environment_name}}' : 'dev_value' , '{{deployment_environment_name}}' : 'deploy_value' } }","title":"create_environment_variables"},{"location":"guide/cloud/#delete_environment_variables","text":"Delete environment variables for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload Dict Dictionary representing environment variables to delete required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . delete_environment_variables ( account_id , project_id , environment_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-environment --payload = '{\"name\": \"DBT_MY_AWESOME_VARIABLE\"}' payload = { 'name' : 'DBT_MY_AWESOME_VARIABLE' }","title":"delete_environment_variables"},{"location":"guide/cloud/#feature-flags","text":"","title":"Feature Flags"},{"location":"guide/cloud/#list_feature_flags","text":"List feature flags for a specific account Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_feature_flags ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-feature-flags","title":"list_feature_flags"},{"location":"guide/cloud/#group","text":"","title":"Group"},{"location":"guide/cloud/#assign_group_permissions","text":"Assign group permissions Parameters: Name Type Description Default account_id int Numeric ID of the account required group_id int Numeric ID of the group required payload dict Dictionary representing the group to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . assign_service_token_permissions ( account_id , group_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-group-permissions --payload = '[{\"group_id\": 1, \"account_id\": 1, \"permission_set\": \"analyst\", \"project_id\": 1, \"all_projects\": false}]' payload = [ { 'group_id' : 1 , 'account_id' : 1 , 'permission_set' : 'analyst' , 'project_id' : 1 , 'all_projects' : False }, ]","title":"assign_group_permissions"},{"location":"guide/cloud/#assign_user_to_group","text":"Assign a user to a group Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the user to assign required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . assign_user_to_group ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-user-to-group --payload = '{\"user_id\": 1, \"desired_group_ids\": [1]}' payload = { 'user_id' : 1 , 'desired_group_ids' : [ 1 ], }","title":"assign_user_to_group"},{"location":"guide/cloud/#create_user_group","text":"Create a user group Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the group to create required Note The group_name is the name of the dbt Cloud group. The list of sso_mapping_groups are string values that dbt Cloud will attempt to match with incoming information from your identity provider at login time, in order to assign the group with group_name to the user. Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_user_group ( account_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-user-group --payload = '{\"account_id\": 1, \"name\": \"{{group_name}}\", \"assign_by_default\": false, \"sso_mapping_groups\": [\"mapping_group_1\"]}' payload = { 'account_id' : 1 , 'name' : '{{group_name}}' , 'assign_by_default' : False , 'sso_mapping_groups' :[ 'mapping_group_1' ] }","title":"create_user_group"},{"location":"guide/cloud/#delete_user_group","text":"Delete group for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required group_id int Numeric ID of the group to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_group ( account_id , group_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --group-id = 1","title":"delete_user_group"},{"location":"guide/cloud/#list_groups","text":"List groups for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_groups ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-groups","title":"list_groups"},{"location":"guide/cloud/#job","text":"","title":"Job"},{"location":"guide/cloud/#create_job","text":"Create a job Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the job to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_job ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-credentials --payload = '{\"account_id\": 1, \"project_id\": 1, \"id\": null, \"environment_id\": 1, \"name\": \"<your-job-name>\", \"dbt_version\": \"1.0.1\", \"triggers\": {\"github_webhook\": false, \"schedule\": false, \"custom_branch_only\": false}, \"execute_steps\": [\"dbt build\"], \"settings\": {\"threads\": 1, \"target_name\": \"default\"}, \"state\": 1, \"generate_docs\": false, \"schedule\": {\"date\": {\"type\": \"every_day\"}, \"time\": {\"type\": \"every_hour\", \"interval\": 1}}}' payload = { 'account_id' : 1 , 'project_id' : 1 , 'id' : None , 'environment_id' : 1 , 'name' : '<your-job-name>' , 'dbt_version' : '1.0.1' , 'triggers' : { 'github_webhook' : False , 'schedule' : False , 'custom_branch_only' : False }, 'execute_steps' : [ 'dbt build' ], 'settings' : { 'threads' : 1 , 'target_name' : 'default' }, 'state' : 1 , 'generate_docs' : False , 'schedule' : { 'date' : { 'type' : 'every_day' }, 'time' : { 'type' : 'every_hour' , 'interval' : 1 } } }","title":"create_job"},{"location":"guide/cloud/#delete_job","text":"Delete job for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required job_id int Numeric ID of the project to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_job ( account_id , job_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --job-id = 1","title":"delete_job"},{"location":"guide/cloud/#get_job","text":"Get a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to retrieve required order_by str Field to order the result by. Use - to indicate reverse order. None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_job ( account_id , job_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-job --job-id = 1","title":"get_job"},{"location":"guide/cloud/#list_jobs","text":"List jobs in an account or specific project. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required order_by str Field to order the result by. Use - to indicate reverse order. None project_id int Numeric ID of the project containing jobs None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_jobs ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-jobs","title":"list_jobs"},{"location":"guide/cloud/#trigger_job","text":"Trigger a job by its ID Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to trigger required payload dict Payload required for post request required should_poll bool Poll until completion if True , completion is one of success, failure, or cancelled True poll_interval int Number of seconds to wait in between polling 10 restart_from_failure bool Restart your job from the point of failure False trigger_on_failure_only bool Only relevant when setting restart_from_failure to True. This has the effect of only triggering the job when the prior invocation was not successful. Otherwise, the function will exit prior to triggering the job. False","title":"trigger_job"},{"location":"guide/cloud/#update_job","text":"Update a job by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required job_id int Numeric ID of the job to retrieve required payload dict Payload required for post request required","title":"update_job"},{"location":"guide/cloud/#repository","text":"","title":"Repository"},{"location":"guide/cloud/#create_repository","text":"Create a repository Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required payload dict Dictionary representing the repository to create required Note After creating / updating a dbt Cloud repository's SSH key, you will need to add the generated key text as a deploy key to the target repository. This gives dbt Cloud permissions to read / write in the repository You can read more in the docs # noqa: E501 Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_repository ( account_id , project_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc create-repository --payload = '{\"account_id\": 1, \"project_id\": 1, \"remote_url\": \"{{git_clone_url}}\", \"git_clone_strategy\": \"deploy_key\", \"github_installation_id\": null, \"token_str\": null}' payload = { 'account_id' : 1 , 'project_id' : 1 , 'remote_url' : '{{git_clone_url}}' , 'git_clone_strategy' : 'deploy_key' , 'github_installation_id' : None , 'token_str' : None }","title":"create_repository"},{"location":"guide/cloud/#delete_repository","text":"Delete repository for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required repository_id int Numeric ID of the repository to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_repository ( account_id , project_id , repository_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-repository --repository-id = 1","title":"delete_repository"},{"location":"guide/cloud/#list_repositories","text":"List repositories for a specific account and project Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_repositories ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc list-repositories","title":"list_repositories"},{"location":"guide/cloud/#update_repository","text":"Update a connection Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project required repository_id int Numeric ID of the repository to update required payload dict Dictionary representing the repository to update required","title":"update_repository"},{"location":"guide/cloud/#run","text":"","title":"Run"},{"location":"guide/cloud/#cancel_run","text":"Cancel a run. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . cancel_run ( account_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. ```bash dbtc cancel-run --account-id=1 --run-id=1","title":"cancel_run"},{"location":"guide/cloud/#get_run","text":"Get a run by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required include_related list List of related fields to pull with the run. Valid values are trigger , job , repository , debug_logs , run_steps , and environment . None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_run ( account_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-run --run-id = 1","title":"get_run"},{"location":"guide/cloud/#get_run_timing_details","text":"Retrieves the timing details related to a run Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_run_timing_details ( account_id , project_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc get-run-timing-details --run-id = 1","title":"get_run_timing_details"},{"location":"guide/cloud/#get_run_v4","text":"Retrieves the details of an existing run with the given run_id. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required run_id int Numeric ID of the run to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_run_v4 ( account_id , run_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc delete-environment --run-id = 1","title":"get_run_v4"},{"location":"guide/cloud/#list_runs","text":"List runs in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required include_related list List of related fields to pull with the run. Valid values are trigger , job , repository , debug_logs , run_steps , and environment . None job_definition_id int Applies a filter to only return runs from the specified Job. None order_by str Field to order the result by. Use - to indicate reverse order. None offset int The offset to apply when listing runs. Use with limit to paginate results. None limit int The limit to apply when listing runs. Use with offset to paginate results. None status str The status to apply when listing runs. Options include queued, starting, running, success, error, and cancelled None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_runs ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-runs","title":"list_runs"},{"location":"guide/cloud/#list_runs_v4","text":"Returns a list of runs in the account. The runs are returned sorted by creation date, with the most recent run appearing first. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required limit int A limit on the number of objects to be returned, between 1 and 100. None environment str A filter on the list based on the object's environment_id field. None project str A filter on the list based on the object's project_id field. None job str A filter on the list based on the object's job_id field. None status str A filter on the list based on the object's status field. Enum: \"Queued\" \"Starting\" \"Running\" \"Succeeded\" \"Failed\" \"Canceled\" None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_runs_v4 ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-runs-v4","title":"list_runs_v4"},{"location":"guide/cloud/#project","text":"","title":"Project"},{"location":"guide/cloud/#create_project","text":"Create a project Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the project to create required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_project ( account_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-project --payload = '{\"id\": null, \"name\": \"{{project_name}}\", \"dbt_project_subdirectory\": null, \"account_id\": 1, \"connection_id\": null, \"repository_id\": null}' payload = { 'id' : None , 'name' : '{{project_name}}' , 'dbt_project_subdirectory' : None , 'account_id' : 1 , 'connection_id' : None , 'repository_id' : None }","title":"create_project"},{"location":"guide/cloud/#delete_project","text":"Delete project for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project to delete required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . delete_project ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc delete-project","title":"delete_project"},{"location":"guide/cloud/#get_project","text":"Get a project by its ID. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required project_id int Numeric ID of the project to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_project ( account_id , project_id ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc get-project","title":"get_project"},{"location":"guide/cloud/#get_project_by_name","text":"Get a project by its name. Parameters: Name Type Description Default project_name str Name of project to retrieve required account_id int Numeric ID of the account to retrieve None account_name str Name of account to retrieve None Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_project ( \"name\" ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-project --project-name = name","title":"get_project_by_name"},{"location":"guide/cloud/#list_projects","text":"List projects for a specified account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_projects ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-projects","title":"list_projects"},{"location":"guide/cloud/#update_project","text":"Update project for a specified account Parameters: Name Type Description Default account_id int Numeric ID of the account required project_id int Numeric ID of the project to update required payload dict Dictionary representing the project to update required","title":"update_project"},{"location":"guide/cloud/#service-token","text":"","title":"Service Token"},{"location":"guide/cloud/#assign_service_token_permissions","text":"Assign permissions to a service token. Parameters: Name Type Description Default account_id int Numeric ID of the account required service_token_id int Numeric ID of the service token required payload list List of dictionaries representing the permissions to assign required Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . assign_service_token_permissions ( account_id , service_token_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables have been set. dbtc assign-service-token-permissions --payload = '[{\"service_token_id\": 1, \"account_id\": 1, \"permission_set\": \"job_viewer\", \"project_id\": 1, \"all_projects\": false}]' payload = [ { 'service_token_id' : 1 , 'account_id' : 1 , 'permission_set' : 'job_viewer' , 'project_id' : 1 , 'all_projects' : False }, ]","title":"assign_service_token_permissions"},{"location":"guide/cloud/#create_service_token","text":"Create a service token Parameters: Name Type Description Default account_id int Numeric ID of the account required payload dict Dictionary representing the service token to create required Note This request creates a service token, but does not assign permissions to it. Permissions are assigned via the assign_service_token_permissions See the user tokens # noqa: E501 and service tokens # noqa: E501 documentation for more information. Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . create_service_token ( account_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc create-service-token --payload = '{\"id\": null, \"name\": \"api-test\", \"state\": 1, \"account_id\": 1, \"access\": {\"admin\": {\"permissionSet\": \"admin\", \"projects\": [1]}, \"job_admin\": {\"permissionSet\": \"job_admin\", \"projects\": [1]}}}' payload = { 'id' : None , 'name' : 'api-test' , 'state' : 1 , 'account_id' : 1 , 'access' : { 'admin' : { 'permissionSet' : 'admin' , 'projects' : [ 1 ] }, 'job_admin' : { 'permissionSet' : 'job_admin' , 'projects' : [ 1 ] } } }","title":"create_service_token"},{"location":"guide/cloud/#get_service_token","text":"Retrieves a service token. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required service_token_id int Numeric ID of the service token to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_service_toke ( account_id , service_token_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get-service-token --service-token-id = 1","title":"get_service_token"},{"location":"guide/cloud/#list_service_tokens","text":"List service tokens for a specific account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_service_tokens ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-service-tokens","title":"list_service_tokens"},{"location":"guide/cloud/#list_service_token_permissions","text":"List service token permissions for a specific account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required service_token_id int Numeric ID of the service token to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_service_token_permissions ( account_id , service_token_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-service-token-permissions --service-token-id = 1","title":"list_service_token_permissions"},{"location":"guide/cloud/#user","text":"","title":"User"},{"location":"guide/cloud/#deactivate_user_license","text":"Deactivate user license Parameters: Name Type Description Default account_id int Numeric ID of the account required permission_id int Numeric ID of the permission that contains user you'd like to deactivate required Note Ensure the groups object contains all of a user's assigned group permissions. This request will fail if a user has already been deactivated. Examples: Python CLI Payload Assuming that client is an instance of dbtCloudClient client . cloud . deactivate_user_license ( account_id , permission_id , payload ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc deactivate-user-license --permission_id = 1 --payload = '{\"license_type\": \"developer\", \"id\": 1, \"user_id\": 1, \"account_id\": 1, \"state\": 2, \"groups\": [{\"account_id\": 1, \"name\": \"test-group-with-sso-mappings\", \"id\": 1, \"state\": 1, \"assign_by_default\": false, \"sso_mapping_groups\": [\"something\"], \"group_permissions\": [{\"account_id\": 1, \"group_id\": 1, \"project_id\": null, \"all_projects\": true, \"permission_set\": \"analyst\", \"permission_level\": null, \"id\": \"{{group_permission_id}}\", \"state\": 1}]}], \"permission_statements\": [{\"permission\": \"invitations_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"license_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"environments_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"jobs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"runs_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"metadata_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_read\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"projects_develop\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"credentials_write\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"develop_access\", \"target_resource\": null, \"all_resources\": true}, {\"permission\": \"custom_environment_variables_write\", \"target_resource\": null, \"all_resources\": true}]}' payload = { 'license_type' : 'developer' , 'id' : 1 , 'user_id' : 1 , 'account_id' : 1 , 'state' : 2 , 'groups' : [ { 'account_id' : 1 , 'name' : 'test-group-with-sso-mappings' , 'id' : 1 , 'state' : 1 , 'assign_by_default' : False , 'sso_mapping_groups' : [ 'something' ], 'group_permissions' : [ { 'account_id' : 1 , 'group_id' : 1 , 'project_id' : None , 'all_projects' : True , 'permission_set' : 'analyst' , 'permission_level' : None , 'id' : '{{group_permission_id}}' , 'state' : 1 } ] } ], 'permission_statements' : [ { 'permission' : 'invitations_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'license_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'projects_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'environments_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'jobs_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'runs_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'metadata_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'custom_environment_variables_read' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'projects_develop' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'credentials_write' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'develop_access' , 'target_resource' : None , 'all_resources' : True }, { 'permission' : 'custom_environment_variables_write' , 'target_resource' : None , 'all_resources' : True } ] }","title":"deactivate_user_license"},{"location":"guide/cloud/#get_user","text":"List invited users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required user_id int Numeric ID of the user to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . get_user ( account_id , user_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc get_user --user-id = 1","title":"get_user"},{"location":"guide/cloud/#list_invited_users","text":"List invited users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_invited_users ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-invited-users","title":"list_invited_users"},{"location":"guide/cloud/#list_users","text":"List users in an account. Parameters: Name Type Description Default account_id int Numeric ID of the account to retrieve required limit int The limit to apply when listing runs. Use with offset to paginate results. None offset int The offset to apply when listing runs. Use with limit to paginate results. None order_by str Field to order the result by. Use - to indicate reverse order. 'email' Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . cloud . list_users ( account_id ) Assuming that DBT_CLOUD_ACCOUNT_ID environment variable has been set. dbtc list-users","title":"list_users"},{"location":"guide/intro/","text":"Introduction \u00b6 Python \u00b6 Class \u00b6 The dbtCloudClient class is the main interface through which you will interact with dbt Cloud API endpoints. The class accepts three optional arguments: api_key service_token host An api_key can be used to access endpoints from any version of the dbt Cloud API (v2, v3, or v4). The service_token can be used for either the dbt Cloud API or the Metadata API. If you have the proper permissions , you would only need to pass a service token. from dbtc import dbtCloudClient client = dbtCloudClient ( service_token = 'this-is-my-service-token' ) Alternatively, you can set the following environment variables in place of passing the arguments to the class: api_key --> DBT_CLOUD_API_KEY service_token --> DBT_CLOUD_SERVICE_TOKEN host --> DBT_CLOUD_HOST If you have set environment variables, and have the proper permissions, you'll be able to instantiate the dbtCloudClient class as follows: from dbtc import dbtCloudClient client = dbtCloudClient () Info The host argument is only necessary for customers on single-tenant instances Interfaces \u00b6 The dbtCloudClient class contains two properties: cloud - instance of the _CloudClient class, which contains methods to create, read, update, and delete dbt Cloud resources metadata - instance of the _MetadataClient class, which contains methods to retrieve metadata generated from a dbt Cloud job run cloud from dbtc import dbtCloudClient # Assuming we've set the `DBT_CLOUD_SERVICET_TOKEN` environment variable` client = dbtCloudClient () accounts = client . cloud . list_accounts () metadata from dbtc import dbtCloudClient client = dbtCloudClient () job_id = < xxx > run_id = < xxx > models = client . metadata . get_models ( job_id , run_id ) CLI \u00b6 This package also comes with a command-line utility, dbtc . All of the methods available through the cloud or metadata properties on the dbtCloudClient class are available through the command line as well. The command line interface also accepts additional environment variables: DBT_CLOUD_ACCOUNT_ID DBT_CLOUD_PROJECT_ID Setting these will reduce the amount of arguments you'll need to pass. dbtc get-project --account-id = 1 --project-id = 1 Or, if you've set the DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables. dbtc get-project","title":"Introduction"},{"location":"guide/intro/#introduction","text":"","title":"Introduction"},{"location":"guide/intro/#python","text":"","title":"Python"},{"location":"guide/intro/#class","text":"The dbtCloudClient class is the main interface through which you will interact with dbt Cloud API endpoints. The class accepts three optional arguments: api_key service_token host An api_key can be used to access endpoints from any version of the dbt Cloud API (v2, v3, or v4). The service_token can be used for either the dbt Cloud API or the Metadata API. If you have the proper permissions , you would only need to pass a service token. from dbtc import dbtCloudClient client = dbtCloudClient ( service_token = 'this-is-my-service-token' ) Alternatively, you can set the following environment variables in place of passing the arguments to the class: api_key --> DBT_CLOUD_API_KEY service_token --> DBT_CLOUD_SERVICE_TOKEN host --> DBT_CLOUD_HOST If you have set environment variables, and have the proper permissions, you'll be able to instantiate the dbtCloudClient class as follows: from dbtc import dbtCloudClient client = dbtCloudClient () Info The host argument is only necessary for customers on single-tenant instances","title":"Class"},{"location":"guide/intro/#interfaces","text":"The dbtCloudClient class contains two properties: cloud - instance of the _CloudClient class, which contains methods to create, read, update, and delete dbt Cloud resources metadata - instance of the _MetadataClient class, which contains methods to retrieve metadata generated from a dbt Cloud job run cloud from dbtc import dbtCloudClient # Assuming we've set the `DBT_CLOUD_SERVICET_TOKEN` environment variable` client = dbtCloudClient () accounts = client . cloud . list_accounts () metadata from dbtc import dbtCloudClient client = dbtCloudClient () job_id = < xxx > run_id = < xxx > models = client . metadata . get_models ( job_id , run_id )","title":"Interfaces"},{"location":"guide/intro/#cli","text":"This package also comes with a command-line utility, dbtc . All of the methods available through the cloud or metadata properties on the dbtCloudClient class are available through the command line as well. The command line interface also accepts additional environment variables: DBT_CLOUD_ACCOUNT_ID DBT_CLOUD_PROJECT_ID Setting these will reduce the amount of arguments you'll need to pass. dbtc get-project --account-id = 1 --project-id = 1 Or, if you've set the DBT_CLOUD_ACCOUNT_ID and DBT_CLOUD_PROJECT_ID environment variables. dbtc get-project","title":"CLI"},{"location":"guide/metadata/","text":"Metadata \u00b6 The metadata property on the dbtCloudClient class contains methods that allow a user to retrieve metadata which pertains to the accuracy, recency, configuration, and structure of the views and tables in the warehouse. get_exposure \u00b6 The exposure object allows you to query information about a particular exposure. You can learn more about exposures here . Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this expsoure was generated for required name str The name of this particular exposure required run_id int The run ID of the run in dbt Cloud that this exposure was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_exposure ( job_id ) dbtc get-exposure --job-id = 12345 get_exposures \u00b6 The exposures object allows you to query information about all exposures in a given job. You can learn more about exposures here . Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this exposure was generated for required run_id int The run ID of the run in dbt Cloud that this exposure was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_exposures ( job_id ) dbtc get-exposures --job-id = 12345 get_macro \u00b6 The macro object allows you to query information about a particular macro in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this macro was generated for required unique_id str The unique ID of this particular macro required run_id int The run ID of the run in dbt Cloud that this macro was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_macro ( job_id ) dbtc get-macro --job-id = 12345 get_macros \u00b6 The macros object allows you to query information about all macros in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this macro was generated for required run_id int The run ID of the run in dbt Cloud that this macro was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_macros ( job_id ) dbtc get-macros --job-id = 12345 get_metric \u00b6 The metric object allows you to query information about metrics . Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this metric was generated for required unique_id str The unique ID of this particular metric required run_id int The run ID of the run in dbt Cloud that this metric was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_metric ( job_id ) dbtc get-metric --job-id = 12345 get_metrics \u00b6 The metrics object allows you to query information about metrics . Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this metric was generated for required run_id int The run ID of the run in dbt Cloud that this metric was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_metrics ( job_id ) dbtc get-metrics --job-id = 12345 get_model \u00b6 The model object allows you to query information about a particular model in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this model was generated for required unique_id str The unique ID of this particular model required run_id int The run ID of the run in dbt Cloud that this model was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_model ( job_id ) dbtc get-model --job-id = 12345 get_model_by_environment \u00b6 The model by environment object allows you to query information about a particular model based on environment_id Warning This feature is currently in beta and subject to change. Parameters: Name Type Description Default environment_id int The environment_id for this model required unique_id str The unique ID of this model required last_run_count int Number of last run results where this model was built to return (max of 10). Defaults to 10. 10 with_catalog bool If true, return only runs that have catalog information for this model. Defaults to False. False Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_model_by_environment ( environment_id , unique_id ) dbtc get-model-by-environment --environment-id = 12345 --unique-id = models.tpch.order_items get_models \u00b6 The models object allows you to query information about all models in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this model was generated for required run_id int The run ID of the run in dbt Cloud that this model was generated for None database str The database where this table/view lives None schema str The schema where this table/view lives None identifier str The identifier of this table/view None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_models ( job_id ) dbtc get-models --job-id = 12345 get_seed \u00b6 The seed object allows you to query information about a particular seed in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this seed was generated for required unique_id str The unique ID of this particular seed required run_id int The run ID of the run in dbt Cloud that this seed was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_seed ( job_id ) dbtc get-seed --job-id = 12345 get_seeds \u00b6 The seeds object allows you to query information about a all seeds in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this seed was generated for required run_id int The run ID of the run in dbt Cloud that this seed was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_seeds ( job_id ) dbtc get-seeds --job-id = 12345 get_snapshot \u00b6 The snapshot object allows you to query information about a particular snapshot. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this snapshot was generated for required unique_id str The unique ID of this particular snapshot required run_id int The run ID of the run in dbt Cloud that this snapshot was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_snapshot ( job_id ) dbtc get-snapshot --job-id = 12345 get_snapshots \u00b6 The snapshots object allows you to query information about all snapshots in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this snapshot was generated for required run_id int The run ID of the run in dbt Cloud that this snapshot was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_snapshots ( job_id ) dbtc get-snapshots --job-id = 12345 get_source \u00b6 The source object allows you to query information about a particular source in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this source was generated for required unique_id str The unique ID of this particular source required run_id int The run ID of the run in dbt Cloud that this source was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_source ( job_id ) dbtc get-source --job-id = 12345 get_sources \u00b6 The snapshots object allows you to query information about all snapshots in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this source was generated for required run_id int The run ID of the run in dbt Cloud that this source was generated for None database str The database where this table/view lives None schema str The schema where this table/view lives None identifier str The identifier of this table/view None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_sources ( job_id ) dbtc get-sources --job-id = 12345 get_test \u00b6 The test object allows you to query information about a particular test. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this test was generated for required unique_id str The unique ID of this particular test required run_id int The run ID of the run in dbt Cloud that this test was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_test ( job_id ) dbtc get-test --job-id = 12345 get_tests \u00b6 The tests object allows you to query information about all tests in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this test was generated for required run_id int The run ID of the run in dbt Cloud that this test was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_tests ( job_id ) dbtc get-tests --job-id = 12345","title":"Metadata"},{"location":"guide/metadata/#metadata","text":"The metadata property on the dbtCloudClient class contains methods that allow a user to retrieve metadata which pertains to the accuracy, recency, configuration, and structure of the views and tables in the warehouse.","title":"Metadata"},{"location":"guide/metadata/#get_exposure","text":"The exposure object allows you to query information about a particular exposure. You can learn more about exposures here . Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this expsoure was generated for required name str The name of this particular exposure required run_id int The run ID of the run in dbt Cloud that this exposure was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_exposure ( job_id ) dbtc get-exposure --job-id = 12345","title":"get_exposure"},{"location":"guide/metadata/#get_exposures","text":"The exposures object allows you to query information about all exposures in a given job. You can learn more about exposures here . Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this exposure was generated for required run_id int The run ID of the run in dbt Cloud that this exposure was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_exposures ( job_id ) dbtc get-exposures --job-id = 12345","title":"get_exposures"},{"location":"guide/metadata/#get_macro","text":"The macro object allows you to query information about a particular macro in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this macro was generated for required unique_id str The unique ID of this particular macro required run_id int The run ID of the run in dbt Cloud that this macro was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_macro ( job_id ) dbtc get-macro --job-id = 12345","title":"get_macro"},{"location":"guide/metadata/#get_macros","text":"The macros object allows you to query information about all macros in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this macro was generated for required run_id int The run ID of the run in dbt Cloud that this macro was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_macros ( job_id ) dbtc get-macros --job-id = 12345","title":"get_macros"},{"location":"guide/metadata/#get_metric","text":"The metric object allows you to query information about metrics . Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this metric was generated for required unique_id str The unique ID of this particular metric required run_id int The run ID of the run in dbt Cloud that this metric was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_metric ( job_id ) dbtc get-metric --job-id = 12345","title":"get_metric"},{"location":"guide/metadata/#get_metrics","text":"The metrics object allows you to query information about metrics . Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this metric was generated for required run_id int The run ID of the run in dbt Cloud that this metric was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_metrics ( job_id ) dbtc get-metrics --job-id = 12345","title":"get_metrics"},{"location":"guide/metadata/#get_model","text":"The model object allows you to query information about a particular model in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this model was generated for required unique_id str The unique ID of this particular model required run_id int The run ID of the run in dbt Cloud that this model was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_model ( job_id ) dbtc get-model --job-id = 12345","title":"get_model"},{"location":"guide/metadata/#get_model_by_environment","text":"The model by environment object allows you to query information about a particular model based on environment_id Warning This feature is currently in beta and subject to change. Parameters: Name Type Description Default environment_id int The environment_id for this model required unique_id str The unique ID of this model required last_run_count int Number of last run results where this model was built to return (max of 10). Defaults to 10. 10 with_catalog bool If true, return only runs that have catalog information for this model. Defaults to False. False Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_model_by_environment ( environment_id , unique_id ) dbtc get-model-by-environment --environment-id = 12345 --unique-id = models.tpch.order_items","title":"get_model_by_environment"},{"location":"guide/metadata/#get_models","text":"The models object allows you to query information about all models in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this model was generated for required run_id int The run ID of the run in dbt Cloud that this model was generated for None database str The database where this table/view lives None schema str The schema where this table/view lives None identifier str The identifier of this table/view None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_models ( job_id ) dbtc get-models --job-id = 12345","title":"get_models"},{"location":"guide/metadata/#get_seed","text":"The seed object allows you to query information about a particular seed in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this seed was generated for required unique_id str The unique ID of this particular seed required run_id int The run ID of the run in dbt Cloud that this seed was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_seed ( job_id ) dbtc get-seed --job-id = 12345","title":"get_seed"},{"location":"guide/metadata/#get_seeds","text":"The seeds object allows you to query information about a all seeds in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this seed was generated for required run_id int The run ID of the run in dbt Cloud that this seed was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_seeds ( job_id ) dbtc get-seeds --job-id = 12345","title":"get_seeds"},{"location":"guide/metadata/#get_snapshot","text":"The snapshot object allows you to query information about a particular snapshot. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this snapshot was generated for required unique_id str The unique ID of this particular snapshot required run_id int The run ID of the run in dbt Cloud that this snapshot was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_snapshot ( job_id ) dbtc get-snapshot --job-id = 12345","title":"get_snapshot"},{"location":"guide/metadata/#get_snapshots","text":"The snapshots object allows you to query information about all snapshots in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this snapshot was generated for required run_id int The run ID of the run in dbt Cloud that this snapshot was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_snapshots ( job_id ) dbtc get-snapshots --job-id = 12345","title":"get_snapshots"},{"location":"guide/metadata/#get_source","text":"The source object allows you to query information about a particular source in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this source was generated for required unique_id str The unique ID of this particular source required run_id int The run ID of the run in dbt Cloud that this source was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_source ( job_id ) dbtc get-source --job-id = 12345","title":"get_source"},{"location":"guide/metadata/#get_sources","text":"The snapshots object allows you to query information about all snapshots in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this source was generated for required run_id int The run ID of the run in dbt Cloud that this source was generated for None database str The database where this table/view lives None schema str The schema where this table/view lives None identifier str The identifier of this table/view None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_sources ( job_id ) dbtc get-sources --job-id = 12345","title":"get_sources"},{"location":"guide/metadata/#get_test","text":"The test object allows you to query information about a particular test. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this test was generated for required unique_id str The unique ID of this particular test required run_id int The run ID of the run in dbt Cloud that this test was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_test ( job_id ) dbtc get-test --job-id = 12345","title":"get_test"},{"location":"guide/metadata/#get_tests","text":"The tests object allows you to query information about all tests in a given job. Parameters: Name Type Description Default job_id int The unique ID of the job in dbt Cloud that this test was generated for required run_id int The run ID of the run in dbt Cloud that this test was generated for None Note If you do not include a run_id, it will default to the most recent run of the specified job. Examples: Python CLI Assuming that client is an instance of dbtCloudClient client . metadata . get_tests ( job_id ) dbtc get-tests --job-id = 12345","title":"get_tests"},{"location":"guide/restart_from_failure/","text":"Restart From Failure \u00b6 Thank You! All credit, for both the words below as well as the code that enables this functionality, should be directed to @matt-winkler . The initial work for this started with his incredible gist . Summary \u00b6 This library offers a convenient interface to restart your jobs from the point of failure. At a high level, it will do the following: Inspect the run_results.json artifacts from the previous run to understand which nodes succeeded / failed Any steps that succeeded on the previous run are skipped Any steps that were skipped on the previous run (e.g. because they followed a failed / errored step) are repeated as-is Background \u00b6 dbt Cloud offers users the ability to run and monitor their data pipelines remotely via API endpoints. Each pipeline run produces metadata artifacts that provide rich information on the models run, success/failure status for each, timing, and more. Why Pipelines Might Fail \u00b6 There are a few scenarios in which the need to restart a job from failure occurs in practice: Database permission errors Code merged to production isn't properly tested (a related-but-separate problem with a distinct set of solutions) Data content changes (e.g. due to a problem in a raw data feed that wasn't historically present) Timeouts Despite our best intentions, the above can and will happen. How can we Respond to Failures \u00b6 When responding to failures in a particular area of the DAG, it's often expedient to avoid reprocessing data that's already been run, in particular for maintaining trust with stakeholders when pipelines are \"behind.\" In order to achieve this most efficiently and reliably, the solution should be programmatic, and contained with dbt's capabilities, versus expecting users to: Inspect the results of a run to identify the (potentially multiple) roots of failure points (e.g. the earliest failed dbt models or sources for a given run). Modify a job command (or create a new job) with the failure points from 1 and including the + syntax to run it's children. Ensure the job isn't triggered on an ongoing basis or otherwise put into the orchestration flow unintentionally. Examples \u00b6 Python CLI Github Action Response from dbtc import dbtCloudClient # Assumes I have DBT_CLOUD_SERVICE_TOKEN as an environment variable client = dbtCloudClient () account_id = 1 job_id = 1 payload = { 'cause' : 'Restarting from failure' } run = client . cloud . trigger_job ( account_id , job_id , payload , restart_from_failure = True ) Assuming that DBT_CLOUD_SERVICE_TOKEN environment variable has been set. dbtc trigger-job \\ --account-id 1 --job-id 1 --payload '{\"cause\": \"Restarting from failure\"}' \\ --restart-from-failure Required : You'll need to create a secret in your repo called DBT_CLOUD_SERVICE_TOKEN . The token can be obtained from dbt Cloud name : Restart from Failure on : workflow_dispatch : jobs : restart : runs-on : ubuntu-latest env : DBT_CLOUD_SERVICE_TOKEN : ${{ secrets.DBT_CLOUD_SERVICE_TOKEN }} DBT_CLOUD_ACCOUNT_ID : 1 JOB_ID : 1 # Optional if statement to gate this to a particular user or users if : github.actor == 'dpguthrie' steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : \"3.9.x\" - name : Restart Job from Failure run : | pip install dbtc==0.2.0 dbtc trigger-job \\ --job-id=$JOB_ID \\ --payload='{\"cause\": \"Restarting job from failure\"}' \\ --no-should-poll \\ --restart-from-failure { 's tatus ' : { 'code' : 200 , 'is_success' : True , 'user_message' : 'Success!' , 'developer_message' : '' }, 'da ta ' : { 'id' : 78614274 , ' tr igger_id' : 79329387 , 'accou nt _id' : 1 , 'e n viro n me nt _id' : 1 , 'projec t _id' : 1 , 'job_de f i n i t io n _id' : 1 , 's tatus ' : 1 , 'db t _versio n ' : ' 1.2.0- la test ' , 'gi t _bra n ch' : No ne , 'gi t _sha' : No ne , 's tatus _message' : No ne , 'ow ner _ t hread_id' : No ne , 'execu te d_by_ t hread_id' : No ne , 'de ferr i n g_ru n _id' : No ne , 'ar t i fa c ts _saved' : False , 'ar t i fa c t _s 3 _pa t h' : No ne , 'has_docs_ge nerate d' : False , 'has_sources_ge nerate d' : False , ' n o t i f ica t io ns _se nt ' : False , 'blocked_by' : [], 'scribe_e na bled' : True , 'crea te d_a t ' : ' 2022-08-31 02 : 18 : 57.855152+00 : 00 ' , 'upda te d_a t ' : ' 2022-08-31 02 : 18 : 57.855169+00 : 00 ' , 'dequeued_a t ' : No ne , 's tarte d_a t ' : No ne , ' f i n ished_a t ' : No ne , 'las t _checked_a t ' : No ne , 'las t _hear t bea t _a t ' : No ne , 'should_s tart _a t ' : No ne , ' tr igger' : { 'id' : 79329387 , 'cause' : 'Jus t cause' , 'job_de f i n i t io n _id' : 1 , 'gi t _bra n ch' : No ne , 'gi t _sha' : No ne , 'azure_pull_reques t _id' : No ne , 'gi t hub_pull_reques t _id' : No ne , 'gi tla b_merge_reques t _id' : No ne , 'schema_override' : No ne , 'db t _versio n _override' : No ne , ' t hreads_override' : No ne , ' tar ge t _ na me_override' : No ne , 'ge nerate _docs_override' : No ne , ' t imeou t _seco n ds_override' : No ne , 's te ps_override' : [ 'db t ru n - s bad_model -- vars \\' { \"key\" : \"value\" } \\'' ], 'crea te d_a t ' : ' 2022-08-31 02 : 18 : 57.846515+00 : 00 ' , 'cause_huma n ized' : 'Jus t cause' , 'job' : No ne }, 'job' : { 'execu t io n ' : { ' t imeou t _seco n ds' : 0 }, 'ge nerate _docs' : False , 'ru n _ge nerate _sources' : False , 'id' : 1 , 'accou nt _id' : 1 , 'projec t _id' : 1 , 'e n viro n me nt _id' : 1 , ' na me' : 'Tes t 10 - Res tart wi t h Vars' , 'db t _versio n ' : No ne , 'crea te d_a t ' : ' 2022-08-29 T 14 : 02 : 57.378279 Z' , 'upda te d_a t ' : ' 2022-08-29 T 14 : 06 : 31.485879 Z' , 'execu te _s te ps' : [ 'db t ru n - s good_model bad_model -- vars \\' { \"key\" : \"value\" } \\'' ], 's tate ' : 1 , 'deac t iva te d' : False , 'ru n _ fa ilure_cou nt ' : 0 , 'de ferr i n g_job_de f i n i t io n _id' : No ne , 'li fe cycle_webhooks' : False , 'li fe cycle_webhooks_url' : No ne , ' tr iggers' : { 'gi t hub_webhook' : False , 'gi t _provider_webhook' : False , 'cus t om_bra n ch_o nl y' : False , 'schedule' : False }, 'se tt i n gs' : { ' t hreads' : 4 , ' tar ge t _ na me' : 'de fault ' }, 'schedule' : { 'cro n ' : ' 0 * * * 0 , 1 , 2 , 3 , 4 , 5 , 6 ' , 'da te ' : 'days_o f _week' , ' t ime' : 'every_hour' }, 'is_de ferra ble' : False }, 'e n viro n me nt ' : No ne , 'ru n _s te ps' : [], 's tatus _huma n ized' : 'Queued' , 'i n _progress' : True , 'is_comple te ' : False , 'is_success' : False , 'is_error' : False , 'is_ca n celled' : False , 'hre f ' : 'h tt ps : //cloud.getdbt.com/#/accounts/43786/projects/146089/runs/78614274/', 'dura t io n ' : ' 00 : 00 : 00 ' , 'queued_dura t io n ' : ' 00 : 00 : 00 ' , 'ru n _dura t io n ' : ' 00 : 00 : 00 ' , 'dura t io n _huma n ized' : ' 0 mi nutes ' , 'queued_dura t io n _huma n ized' : ' 0 mi nutes ' , 'ru n _dura t io n _huma n ized' : ' 0 mi nutes ' , 'crea te d_a t _huma n ized' : ' 0 mi nutes ago' , ' f i n ished_a t _huma n ized' : ' 0 mi nutes fr om n ow' , 'job_id' : 1 , 'is_ru nn i n g' : No ne } }","title":"Restart From Failure"},{"location":"guide/restart_from_failure/#restart-from-failure","text":"Thank You! All credit, for both the words below as well as the code that enables this functionality, should be directed to @matt-winkler . The initial work for this started with his incredible gist .","title":"Restart From Failure"},{"location":"guide/restart_from_failure/#summary","text":"This library offers a convenient interface to restart your jobs from the point of failure. At a high level, it will do the following: Inspect the run_results.json artifacts from the previous run to understand which nodes succeeded / failed Any steps that succeeded on the previous run are skipped Any steps that were skipped on the previous run (e.g. because they followed a failed / errored step) are repeated as-is","title":"Summary"},{"location":"guide/restart_from_failure/#background","text":"dbt Cloud offers users the ability to run and monitor their data pipelines remotely via API endpoints. Each pipeline run produces metadata artifacts that provide rich information on the models run, success/failure status for each, timing, and more.","title":"Background"},{"location":"guide/restart_from_failure/#why-pipelines-might-fail","text":"There are a few scenarios in which the need to restart a job from failure occurs in practice: Database permission errors Code merged to production isn't properly tested (a related-but-separate problem with a distinct set of solutions) Data content changes (e.g. due to a problem in a raw data feed that wasn't historically present) Timeouts Despite our best intentions, the above can and will happen.","title":"Why Pipelines Might Fail"},{"location":"guide/restart_from_failure/#how-can-we-respond-to-failures","text":"When responding to failures in a particular area of the DAG, it's often expedient to avoid reprocessing data that's already been run, in particular for maintaining trust with stakeholders when pipelines are \"behind.\" In order to achieve this most efficiently and reliably, the solution should be programmatic, and contained with dbt's capabilities, versus expecting users to: Inspect the results of a run to identify the (potentially multiple) roots of failure points (e.g. the earliest failed dbt models or sources for a given run). Modify a job command (or create a new job) with the failure points from 1 and including the + syntax to run it's children. Ensure the job isn't triggered on an ongoing basis or otherwise put into the orchestration flow unintentionally.","title":"How can we Respond to Failures"},{"location":"guide/restart_from_failure/#examples","text":"Python CLI Github Action Response from dbtc import dbtCloudClient # Assumes I have DBT_CLOUD_SERVICE_TOKEN as an environment variable client = dbtCloudClient () account_id = 1 job_id = 1 payload = { 'cause' : 'Restarting from failure' } run = client . cloud . trigger_job ( account_id , job_id , payload , restart_from_failure = True ) Assuming that DBT_CLOUD_SERVICE_TOKEN environment variable has been set. dbtc trigger-job \\ --account-id 1 --job-id 1 --payload '{\"cause\": \"Restarting from failure\"}' \\ --restart-from-failure Required : You'll need to create a secret in your repo called DBT_CLOUD_SERVICE_TOKEN . The token can be obtained from dbt Cloud name : Restart from Failure on : workflow_dispatch : jobs : restart : runs-on : ubuntu-latest env : DBT_CLOUD_SERVICE_TOKEN : ${{ secrets.DBT_CLOUD_SERVICE_TOKEN }} DBT_CLOUD_ACCOUNT_ID : 1 JOB_ID : 1 # Optional if statement to gate this to a particular user or users if : github.actor == 'dpguthrie' steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : \"3.9.x\" - name : Restart Job from Failure run : | pip install dbtc==0.2.0 dbtc trigger-job \\ --job-id=$JOB_ID \\ --payload='{\"cause\": \"Restarting job from failure\"}' \\ --no-should-poll \\ --restart-from-failure { 's tatus ' : { 'code' : 200 , 'is_success' : True , 'user_message' : 'Success!' , 'developer_message' : '' }, 'da ta ' : { 'id' : 78614274 , ' tr igger_id' : 79329387 , 'accou nt _id' : 1 , 'e n viro n me nt _id' : 1 , 'projec t _id' : 1 , 'job_de f i n i t io n _id' : 1 , 's tatus ' : 1 , 'db t _versio n ' : ' 1.2.0- la test ' , 'gi t _bra n ch' : No ne , 'gi t _sha' : No ne , 's tatus _message' : No ne , 'ow ner _ t hread_id' : No ne , 'execu te d_by_ t hread_id' : No ne , 'de ferr i n g_ru n _id' : No ne , 'ar t i fa c ts _saved' : False , 'ar t i fa c t _s 3 _pa t h' : No ne , 'has_docs_ge nerate d' : False , 'has_sources_ge nerate d' : False , ' n o t i f ica t io ns _se nt ' : False , 'blocked_by' : [], 'scribe_e na bled' : True , 'crea te d_a t ' : ' 2022-08-31 02 : 18 : 57.855152+00 : 00 ' , 'upda te d_a t ' : ' 2022-08-31 02 : 18 : 57.855169+00 : 00 ' , 'dequeued_a t ' : No ne , 's tarte d_a t ' : No ne , ' f i n ished_a t ' : No ne , 'las t _checked_a t ' : No ne , 'las t _hear t bea t _a t ' : No ne , 'should_s tart _a t ' : No ne , ' tr igger' : { 'id' : 79329387 , 'cause' : 'Jus t cause' , 'job_de f i n i t io n _id' : 1 , 'gi t _bra n ch' : No ne , 'gi t _sha' : No ne , 'azure_pull_reques t _id' : No ne , 'gi t hub_pull_reques t _id' : No ne , 'gi tla b_merge_reques t _id' : No ne , 'schema_override' : No ne , 'db t _versio n _override' : No ne , ' t hreads_override' : No ne , ' tar ge t _ na me_override' : No ne , 'ge nerate _docs_override' : No ne , ' t imeou t _seco n ds_override' : No ne , 's te ps_override' : [ 'db t ru n - s bad_model -- vars \\' { \"key\" : \"value\" } \\'' ], 'crea te d_a t ' : ' 2022-08-31 02 : 18 : 57.846515+00 : 00 ' , 'cause_huma n ized' : 'Jus t cause' , 'job' : No ne }, 'job' : { 'execu t io n ' : { ' t imeou t _seco n ds' : 0 }, 'ge nerate _docs' : False , 'ru n _ge nerate _sources' : False , 'id' : 1 , 'accou nt _id' : 1 , 'projec t _id' : 1 , 'e n viro n me nt _id' : 1 , ' na me' : 'Tes t 10 - Res tart wi t h Vars' , 'db t _versio n ' : No ne , 'crea te d_a t ' : ' 2022-08-29 T 14 : 02 : 57.378279 Z' , 'upda te d_a t ' : ' 2022-08-29 T 14 : 06 : 31.485879 Z' , 'execu te _s te ps' : [ 'db t ru n - s good_model bad_model -- vars \\' { \"key\" : \"value\" } \\'' ], 's tate ' : 1 , 'deac t iva te d' : False , 'ru n _ fa ilure_cou nt ' : 0 , 'de ferr i n g_job_de f i n i t io n _id' : No ne , 'li fe cycle_webhooks' : False , 'li fe cycle_webhooks_url' : No ne , ' tr iggers' : { 'gi t hub_webhook' : False , 'gi t _provider_webhook' : False , 'cus t om_bra n ch_o nl y' : False , 'schedule' : False }, 'se tt i n gs' : { ' t hreads' : 4 , ' tar ge t _ na me' : 'de fault ' }, 'schedule' : { 'cro n ' : ' 0 * * * 0 , 1 , 2 , 3 , 4 , 5 , 6 ' , 'da te ' : 'days_o f _week' , ' t ime' : 'every_hour' }, 'is_de ferra ble' : False }, 'e n viro n me nt ' : No ne , 'ru n _s te ps' : [], 's tatus _huma n ized' : 'Queued' , 'i n _progress' : True , 'is_comple te ' : False , 'is_success' : False , 'is_error' : False , 'is_ca n celled' : False , 'hre f ' : 'h tt ps : //cloud.getdbt.com/#/accounts/43786/projects/146089/runs/78614274/', 'dura t io n ' : ' 00 : 00 : 00 ' , 'queued_dura t io n ' : ' 00 : 00 : 00 ' , 'ru n _dura t io n ' : ' 00 : 00 : 00 ' , 'dura t io n _huma n ized' : ' 0 mi nutes ' , 'queued_dura t io n _huma n ized' : ' 0 mi nutes ' , 'ru n _dura t io n _huma n ized' : ' 0 mi nutes ' , 'crea te d_a t _huma n ized' : ' 0 mi nutes ago' , ' f i n ished_a t _huma n ized' : ' 0 mi nutes fr om n ow' , 'job_id' : 1 , 'is_ru nn i n g' : No ne } }","title":"Examples"}]}